WEBVTT

00:01:00.000 --> 00:01:30.000
3-4 minutes, we are going to start with the class, yeah?

00:04:32.000 --> 00:04:39.000
Okay, fine everyone, so good morning, and happy Rakshabandhan to all of you. So, it's, uh, Rakshabandhan in India today.

00:04:39.000 --> 00:04:43.000
So, yeah, most of us are from India, and, um, yeah.

00:04:43.000 --> 00:04:54.000
Good morning. So, guys, as I have already announced inside the group, that today I'm going to talk about API, basically. And not just in theory, so obviously.

00:04:54.000 --> 00:05:01.000
Uh, first of all, we'll try to discuss an API, a concept of API in theoretical term, and then we will try to.

00:05:01.000 --> 00:05:09.000
Do the exact same thing in terms of practical. Plus, we'll try to even test our API. And the reason is very simple.

00:05:09.000 --> 00:05:19.000
So, whatever system you will be able to see in this entire world, right? Even whichever app that you are using in your mobile devices, whatever BEV portal that you are using as of now.

00:05:19.000 --> 00:05:27.000
So, everything works with API. So, this is something that you will be able to understand, maybe after this class.

00:05:27.000 --> 00:05:37.000
Uh, not now, that's completely fine. But yeah, the entire world, whatever software, whatever application that you are going to build, so without understanding an API.

00:05:37.000 --> 00:05:44.000
You will not be able to build it. Yes, there are different kinds of framework which is available in this entire world.

00:05:44.000 --> 00:05:49.000
By which you will be able to create an API. This is… there is not just one single framework, but… yes.

00:05:49.000 --> 00:05:55.000
Without API, you will not be able to build any real-world application.

00:05:55.000 --> 00:06:06.000
Not today, not tomorrow, maybe not in our future. So that's the reason API concept is very much important. Plus, we are going to consume a lot of APIs, so we are going to.

00:06:06.000 --> 00:06:18.000
Use a lot of model throughout our live classes, because whenever we are going to build an agent, whenever we are going to build a RAG application, whenever we are going to build anything, so obviously we are going to call a model.

00:06:18.000 --> 00:06:34.000
And, uh, model we will be able to access just with the help of what? Just with the help of API. And again, this is where API, again, comes into a picture. Uh, so API should not look like a black box for all of you, and that is the reason, so we will try to understand this concept.

00:06:34.000 --> 00:06:44.000
So now, I'm going to share my screen, and uh… yeah, so just let me know once you are able to see my screen. I believe my screen is visible to all of you.

00:06:44.000 --> 00:06:55.000
Right, everyone? Yeah? Okay, now, let's get started, try to focus on class. Do not chat much in a group, because that is not going to give you any kind of advantages.

00:06:55.000 --> 00:07:01.000
Uh, if you are going to, you know, focus inside the class, that will give you a real advantage, yeah?

00:07:01.000 --> 00:07:12.000
And, uh, again, so… We'll try to do a practical. Plus, at the end of the class, I'm going to give you even assignments, so that you all will be able to do assignments.

00:07:12.000 --> 00:07:21.000
Fine. So, API. Now, if I'll talk about a full form of API, so it's called as application.

00:07:21.000 --> 00:07:30.000
Application. Programming interface.

00:07:30.000 --> 00:07:43.000
This is just a full form, so again, we should not go after the full form, that's completely fine. I'll try to explain to you the API with the help of one simple example. So, for example, let's suppose I'm trying to use a GPA. I believe we all are using a GPay, right?

00:07:43.000 --> 00:07:58.000
So, Google Pay, by the way. So, we all are using a Google Pay, and maybe we all are, like, using some different application, maybe we are using a Paytium, maybe we are using a phone pay, maybe we are using a Google Pay.

00:07:58.000 --> 00:08:09.000
So, but we all are using some of the payment gateway. So, it's not like, uh, without a payment gateway, any one of us can survive, you know, today's world, in a modern world. So, we are using a GP, let's suppose.

00:08:09.000 --> 00:08:18.000
Google Pay. And even outside India, so yes, most of us are using Google Pay. Or maybe some other payment gateway, that's completely fine.

00:08:18.000 --> 00:08:28.000
No. So, GPA is one of the application. Like any other application which is available inside your mobile devices.

00:08:28.000 --> 00:08:31.000
So, whenever you would like to make some sort of a payment.

00:08:31.000 --> 00:08:41.000
So, obviously, Gipe never holds any kind of a money. So, unless and until you are not going to keep it inside a wallet, so it is not going to hold any kind of a money.

00:08:41.000 --> 00:08:55.000
So, basically, your money will be available, your amount will be available, or your money will be available inside some of the bank, right? Maybe some XYZ bank, IC, ICI, maybe, maybe, inside a HD.

00:08:55.000 --> 00:09:06.000
Fc. So, your money will be available inside SDFC. Now, whenever you try to, you know, search some number, or maybe whenever you try to do some sort of a QR code.

00:09:06.000 --> 00:09:12.000
Scanning, or whenever you will try to go ahead with some sort of a UPI ID.

00:09:12.000 --> 00:09:22.000
So, with the help of your UBI ID, you will be able to do a transaction. So, let's suppose I'm a person, and my bank is basically ICICI.

00:09:22.000 --> 00:09:35.000
Yeah? My bank is, let's suppose, ICICI. So, obviously, GPA will try to make a transaction from ICICI, and let's suppose I'm trying to make a transaction in your account, and your account is available in HDFC.

00:09:35.000 --> 00:09:47.000
Right? So, you are going to request, basically, to a GPA. So, I'm a person, I'm going to request to a GPA that, okay, on this number, XYG number.

00:09:47.000 --> 00:09:52.000
Or a UPI ID, try to make a transaction. So, basically, you are XYZ person, right?

00:09:52.000 --> 00:10:05.000
It will try to connect with your bank. Uh, means a bank in which you are having an amount. Now, it will try to check with the bank that, okay, so whether we have a money or not.

00:10:05.000 --> 00:10:22.000
It will even try to check that, okay, so this user is authorized or not. It will even try to check that, okay, so basically, your limit is permissible or not. Because, again, in India, mostly, like, we have a limit of 1 lakh, max to max, in 24 hours.

00:10:22.000 --> 00:10:28.000
More than that, we will not be able to do a transaction. So, a lot of check it is going to perform.

00:10:28.000 --> 00:10:32.000
And then once it is going to pass all of this check.

00:10:32.000 --> 00:10:46.000
It is going to transfer our money from ICICI to SDFC. So, basically, ICICI is my bank, where I'm keeping my money, and SDFC is basically your bank, yeah? Sdfc is technically your bank, so where.

00:10:46.000 --> 00:10:56.000
I am trying to transfer the money. And then, eventually, inside a G-Pay, you will be able to see a notification that money is transferred, or this transaction is technically done.

00:10:56.000 --> 00:11:09.000
So here, again, so we all go through this kind of a cycle on a daily basis, right? We all are trying to do some sort of a transaction on a daily basis, maybe multiple times we do this kind of a transaction.

00:11:09.000 --> 00:11:16.000
Right? Multiple times. Regularly, daily. No. So here, uh…

00:11:16.000 --> 00:11:27.000
I'm not bothered about the transaction in between the bank or maybe a GPA. So, I'm bothered about the mechanism that it is trying to follow, and with the help of that, I'm trying to explain to you.

00:11:27.000 --> 00:11:37.000
That what, technically, the API is. So, here, let's suppose I have written a program, or someone has created an app for a GPA, right? And maybe that someone.

00:11:37.000 --> 00:11:41.000
Has written a program for a GPA, maybe a back-end program.

00:11:41.000 --> 00:11:52.000
By using a framework called as Node.js, a JavaScript, right? Someone has written maybe this ICICI bank program, maybe in a.

00:11:52.000 --> 00:12:00.000
Java. And someone has written maybe this HDFC program, or this entire application, which is going to handle the transaction.

00:12:00.000 --> 00:12:19.000
In maybe a language .NET, let's suppose. Yeah? .net. Now, here, because, see, a GPA can't ask ICICI that, okay, so you should use this particular language, or this particular framework. Hdfc won't be able to ask ICICI or GPA that you should use this framework or that framework.

00:12:19.000 --> 00:12:28.000
To write a program or to write a code. So technically, GPA will be using one of its own framework to…

00:12:28.000 --> 00:12:39.000
Create this entire application, maybe a backend, maybe a front-end. Icici will be using its own framework, its own language, its own programming, its own database of its own choice.

00:12:39.000 --> 00:12:53.000
And SDH3 will be doing the exact same thing, right? Because no one can ask anyone of this, that, okay, so you are supposed to use just a Node.js, or just a Java, or maybe just a .NET.

00:12:53.000 --> 00:12:59.000
To create your backend, or maybe go ahead with the front-end. No one can ask, because no one is having authority.

00:12:59.000 --> 00:13:08.000
Over each and every one, right? But still, still, so when, through a GPay, I'm trying to send a request.

00:13:08.000 --> 00:13:21.000
Right? I'm trying to send a request to a ICICI that for XYG, this one, right, try to make a transaction. So, XYZ is maybe a UPI ID, or maybe a phone number, or maybe a QR code.

00:13:21.000 --> 00:13:31.000
I'm trying to send. So, whenever I'm going to request, so obviously it is going to request this ICICI, and what will happen inside ICICI in general?

00:13:31.000 --> 00:13:39.000
So, it is going to check your balance. Check underscore, let's suppose ah, balance, yeah? It is going to check your balance.

00:13:39.000 --> 00:13:50.000
Uh, it is going to check even a valid underscore user, right? Maybe to validate a user, this ICI is going to ask SDFC that, okay, fine, this is your user.

00:13:50.000 --> 00:13:59.000
So, is this user a valid or not, or maybe a UPI server? It is going to ask, because we have a centralized UPI server for that one. But let's not bring this UPI server in between. Let's not complicate this entire thing.

00:13:59.000 --> 00:14:04.000
Let's try to keep the things very, very simple, right? Very, very simple. Let's forget about the UPS server over here.

00:14:04.000 --> 00:14:11.000
So, it is going to validate a particular user. It is going to even check a daily limit.

00:14:11.000 --> 00:14:17.000
Right? Check our daily limit, and any kind of an anomaly. So, this check balance, this validate user, and this check limit.

00:14:17.000 --> 00:14:22.000
Can I say that someone has written this as a function?

00:14:22.000 --> 00:14:28.000
Yep, someone has technically written this entire thing. So, someone has maybe written a check balance kind of function, someone has written a.

00:14:28.000 --> 00:14:38.000
So, someone like programmer, right? Programmer like me and you have written this check balance function, someone has written, basically, a validate user function, someone has written a check limit function.

00:14:38.000 --> 00:14:46.000
So, at the end of the day, when I'm talking about this AC… ICICA bank, when I'm talking about the HDFC bank, when I'm talking about the GPay.

00:14:46.000 --> 00:14:57.000
It's nothing but it's a piece of program someone has written, and when I say a piece of program, it simply means that that method, function, and classes, at the end of the day, right? Nothing more than that.

00:14:57.000 --> 00:15:02.000
That's a holy reality, that's a whole reality of this entire system, right? That's a whole reality of the entire system at the end of the day.

00:15:02.000 --> 00:15:09.000
So, someone has written a function called as checkBalance, in which language? Maybe in a Java language, right?

00:15:09.000 --> 00:15:17.000
Uh, so again, so once SDFC will be able to approve this entire transaction, so it is going to maybe deduct a money, right?

00:15:17.000 --> 00:15:33.000
Deduct our money, because in your account. So, basically, okay, so deduct… there will be a deduct function, there will be a deposit function over here. So, even over here, right, there will be a… deduct function, there will be a.

00:15:33.000 --> 00:15:42.000
Deposit function, right? And it is going to even send a notification. So again, in every banking system, there will be a notification system.

00:15:42.000 --> 00:15:57.000
Our acknowledgement system, you can say. So, even inside this SDFC bank, so we have a multiple function, even inside this GPay, so we have written a multiple function, and even inside this ICICI.

00:15:57.000 --> 00:16:05.000
We have written, technically, not just one, but maybe a many, many functions, maybe a hundredths, maybe 200, maybe a thousandth of functions we have written.

00:16:05.000 --> 00:16:13.000
But here, the amazing part is that, that with the help of… with Node.js, so let's suppose I have written a function in node.js, right, in a JavaScript, basically.

00:16:13.000 --> 00:16:28.000
But still, I'm able to communicate with a function which is written in some other language called as Java, right? So, here we have written all set of a function in Java, but still I'm able to communicate with other functions.

00:16:28.000 --> 00:16:40.000
Called… which is written, basically, in a .NET. So, technically, what I'm trying to showcase over here, that all of this system is a heterogeneous system, a complete heterogeneous system, so where.

00:16:40.000 --> 00:16:46.000
This entire tech stack for an individual system is different. It's completely different, but it's still, right, it's still.

00:16:46.000 --> 00:16:58.000
We are able to communicate in between our system, and we are able to execute. So, whenever someone is going to ask for the transaction, we are executing some functions, technically, right?

00:16:58.000 --> 00:17:04.000
Technically, we are executing some functions, so it will execute a check-balance function, then check-balance function will return true or false.

00:17:04.000 --> 00:17:18.000
Then, we will try to check a valid user function. So, valid user function will again return maybe true or false, then we are going to check our, basically, limit. So limit will return some numbers that, okay, fine, so this is the number, this is the limit for today's, for this particular user.

00:17:18.000 --> 00:17:22.000
And then we are going to deduct the amount from this particular bank, and then we are going.

00:17:22.000 --> 00:17:27.000
Deposit the amount from this particular bank, and then we are going to send a notification, right?

00:17:27.000 --> 00:17:37.000
So eventually, whenever I'm going to press a button, so whenever I'm going to call any kind of an action in my mobile devices, a lot of things happens in a backend.

00:17:37.000 --> 00:17:58.000
And technically, it is executing a function, nothing much, right? Ideally speaking, so it is executing some sort of function, it is trying to call some classes, it is trying to execute some function, but here, so everything is written in a complete different, different, different, different framework, in a complete different, different languages, but still, I am able to establish a communication.

00:17:58.000 --> 00:18:03.000
Right? Still, I'm able to. Establish the communication. How?

00:18:03.000 --> 00:18:09.000
Right? The question is, how we are able to establish a communication, so how I'm able to call a Node.js.

00:18:09.000 --> 00:18:14.000
Code from a Java or maybe a .NET code from a Java or JavaScript.

00:18:14.000 --> 00:18:24.000
Because the entire framework is different. So this is where the concept of API falls into a picture. This is where API concept comes into a picture.

00:18:24.000 --> 00:18:29.000
So, what is an API, by the way? What is the meaning of application programming interface?

00:18:29.000 --> 00:18:34.000
So, application programming interface is not a language, right? It's not a language.

00:18:34.000 --> 00:18:41.000
So, basically, application programming interface is a set of protocol. Protocol means a rule, a simple rule.

00:18:41.000 --> 00:18:51.000
Right? A set of protocol that, okay. And so, let's try to create our rule, let's try to create a protocol.

00:18:51.000 --> 00:19:02.000
So that it will not… or it should not depends upon any programming languages. But every programming language will be able to use it. Every framework will be able to use it.

00:19:02.000 --> 00:19:17.000
And by using that, by using that set of rules, by using that protocol, we will be able to hit any function which is running in any system, because if I'm talking about this function… So, obviously, this function must be running in some of the system, right?

00:19:17.000 --> 00:19:32.000
Even though on a server, on a cloud, whatever we say, but again, so it must be running on some system, so maybe today I'm going to show you everything in my local, and if time allows, I'm going to even deploy it on a render. I'm going to show you that, okay, now my function is technically.

00:19:32.000 --> 00:19:37.000
A global function, so anyone will be able to hit it, and anyone will be able to get an answer. So it doesn't matter, right?

00:19:37.000 --> 00:19:48.000
Whether it's available in my local, whether it's available on some server. Doesn't matter at all. So, I need a set of rules by which I will be able to call any function at any places.

00:19:48.000 --> 00:19:56.000
By using any framework. It should be… it should not depend upon any of the frameworks, it should not depends upon any of the programming languages.

00:19:56.000 --> 00:20:02.000
And this is where API, Application Programming Interface, comes into a picture, which behaves like a bridge.

00:20:02.000 --> 00:20:09.000
Right? Which behaves like a bridge, and which will be independent, right? Independent of any.

00:20:09.000 --> 00:20:13.000
Or any programming language, or any framework which exists in this entire world.

00:20:13.000 --> 00:20:19.000
So hope, theoretically, you are able to get some idea, maybe 1 or 2% of idea.

00:20:19.000 --> 00:20:30.000
Right? Everyone? Yeah? I'm not expecting that you should be able to understand, like, 100% of API, that's completely fine. By the end of this class, you will be able to understand.

00:20:30.000 --> 00:20:34.000
But some idea, right? Some thoughts you must be able to get as of now.

00:20:34.000 --> 00:20:40.000
Right? So that whenever I'm going to show you this practical explanation, practical example, you all will be able to connect.

00:20:40.000 --> 00:20:58.000
Yeah? You all will be able to connect. So, API is nothing, like, so don't, don't, like, generally, when I talk about an API, when I ask people that, uh, do you know, do you understand API? So people get scared, right? People get scared, and they say that, okay, so I think it's a… very heavy concept, but it's nothing, believe me, it's nothing.

00:20:58.000 --> 00:21:09.000
Right? It is something which we all are using on a daily basis, right? And whatever, just open up your mobile application. So, just open up a Euron app.

00:21:09.000 --> 00:21:22.000
So let's suppose I'm going to open up any app, including a Euron app in my system. So, let's suppose this is a Euron app. Now, so here, whenever you are going to do any kind of a click.

00:21:22.000 --> 00:21:36.000
It's not like it will load all the data, or it will… there is a static data which you are able to see. No. So, whenever you are going to click, let's suppose you are going to click on roadmap, let's suppose you are going to click on Yuri, let's suppose you are going to click on this one.

00:21:36.000 --> 00:21:42.000
So, whenever you are going to click, we are trying to fetch a data.

00:21:42.000 --> 00:21:48.000
We are trying to fetch our data. Now, where is my data, by the way? My data is available into a databases.

00:21:48.000 --> 00:22:03.000
Yeah? So my data is technically available into a databases. It's… so whatever data that you are able to see, most of the data, I would say, or 90% of the data, is technically a dynamic data. What is the meaning of dynamic data?

00:22:03.000 --> 00:22:10.000
Dynamic data means, so the data that you are able to see is not a part of this, like, technically. So, unless and until you are not going to click.

00:22:10.000 --> 00:22:26.000
It will not load. It's available into our databases. It's not like a, you know, binded with the entire Bev UI that you are able to see over here. So, again, so if you'll go to a profile, if you'll go to any of these courses, so we have something called as.

00:22:26.000 --> 00:22:34.000
Backend. And then, something that you are able to see, or this client that you are able to see, it's called as technically front-end. I think we all understand that part, right?

00:22:34.000 --> 00:22:44.000
So, front end. So, whenever you are going to click on any of these buttons, any means literally any of this button, for example, I'm talk… let's talk about a resume, right? So, resume. So, we have written a function.

00:22:44.000 --> 00:22:57.000
Right? We have written a function that, okay, so click, upload your resume, right? And once you will be able to upload your resume, so we are submitting your resume to a function. We have written a function, some sort of function.

00:22:57.000 --> 00:23:11.000
So, we are going to submit your regimen to a function. Now, what that function will do, it will try to scrap all of your data from your resume. It will try to understand all the keywords and your email ID and your phone number and your experience and your date, everything, right?

00:23:11.000 --> 00:23:35.000
So, we have written a function, one function, which will load the, or which will try to take input as a resume here. Then, second function, so second function will try to do, basically, a scrapping of the entire data. Now, the third function, so it will try to identify all of these keywords. The fourth function, so it will try to summarize your entire resume. The fifth function, so it will try to basically create a beautiful PDF, or, like, whatever.

00:23:35.000 --> 00:23:37.000
Template that you are going to select out of this one.

00:23:37.000 --> 00:23:48.000
Yeah? So, a lot of function calling, right? A lot of function calling is happening. Now, everything happens in our backend, so whenever I'm going to select and click something, right, so it will try to, basically.

00:23:48.000 --> 00:23:53.000
Fire up those chain of the function. How?

00:23:53.000 --> 00:24:00.000
With the help of API. My front end is written in some different technology. My backend is written in my… in some different… backend means.

00:24:00.000 --> 00:24:07.000
The actual worker. So, the actual, like, program, so which is going to execute something, and which is going to eventually give me the output.

00:24:07.000 --> 00:24:13.000
Right? So, it is going to execute it, and it is going to give you the output. So, how I'm trying to connect my front-end and back-end?

00:24:13.000 --> 00:24:19.000
Both frameworks are different, both programming language is different, completely different, right? So how I'm able to communicate in between?

00:24:19.000 --> 00:24:30.000
With the help of what? A neutral strategy, or a rule, technically an API. So, we have exposed all of those functions as an API. Okay, fine, use it, right? Okay, fine, let's use it.

00:24:30.000 --> 00:24:37.000
I'll try to give you a simple theoretical example, and then I'll come to the next part. So, here.

00:24:37.000 --> 00:24:45.000
Uh, let's suppose, uh, I'm going to come. On this endpoint, right? Endpoints. Now, we have given you this endpoint.

00:24:45.000 --> 00:24:54.000
What is technically a meaning of this endpoint, by the way? So, we have basically given you this endpoint. Now, what is the meaning of this endpoint?

00:24:54.000 --> 00:25:03.000
And by the end of this class, you will be able to understand, practically, even practically. So, as of now, I'm trying to explain it theoretically, but yeah, you will be able to understand even in a practical manner.

00:25:03.000 --> 00:25:13.000
What is the meaning of this endpoint? Meaning of this endpoint is very simple, that I'm hosting a model in some server, right? In some server. Server means?

00:25:13.000 --> 00:25:16.000
Piece of computer, nothing much, right? This is the meaning of the server.

00:25:16.000 --> 00:25:23.000
Nothing fancy. So, I'm trying to host my model. Let's suppose I'm hosting a GPT model in some of the server, file.

00:25:23.000 --> 00:25:36.000
Now, you have to reach out to that server, so you have to reach out to this particular system. Now, we have given you this URL, so that with the help of this URL, you will reach out to this particular server.

00:25:36.000 --> 00:25:45.000
Right? Now we have even applied a password that, okay, you will be able to reach out to the server, but it's a protected one.

00:25:45.000 --> 00:25:50.000
So, you have to give a password, and this is where this API key comes into a picture.

00:25:50.000 --> 00:25:59.000
Right? Without API key, you will not be able to use any of the models that we have given to you, right? So API key is what? It's nothing but authentication.

00:25:59.000 --> 00:26:06.000
Just the way you try to log in through a Gmail, so obviously you're going to give your email ID, you are going to give your password.

00:26:06.000 --> 00:26:16.000
So, technically, this is a API endpoint. This is called as API. So, at this location, and in, again, a layman way.

00:26:16.000 --> 00:26:29.000
Technically, it's a IP address, nothing much. Right? It's the IP address and the port number, so we have just given an English name to it, or you can say a domain name to it, and that's the reason, so you are able to see in this way.

00:26:29.000 --> 00:26:39.000
But technically, it's an IP address, right? Technically, it's an IP address, and we are just like a… so that it will be human-readable. You will not be able to maybe remember IP address.

00:26:39.000 --> 00:26:44.000
Frequently, but yeah, so this looks like you will be able to remember.

00:26:44.000 --> 00:26:50.000
Simple. So, all of these endpoints is nothing but it is helping you out to reach out to some of the system.

00:26:50.000 --> 00:27:03.000
Where we have written a function. Now, what that function is doing, for example, this chat completion, right? So, if you are going to click, let me… erase everything. So, let's suppose, if I'm going to click…

00:27:03.000 --> 00:27:15.000
Right? I will be able to get a response. I will be able to get a response. Let me, let me hit this one, yeah? So, there is a curl which is given to me. So, if I have to hit this curl.

00:27:15.000 --> 00:27:22.000
Maybe I can copy it, and uh… Don't worry, those who will not be able to understand, so…

00:27:22.000 --> 00:27:27.000
Once we are going to build the API, you will be able to understand.

00:27:27.000 --> 00:27:50.000
So here, call is given to me, so let me just copy this part.

00:27:50.000 --> 00:28:00.000
Now, so I just have to replace with my API token. So, here I'm going to put my API token. So, how I will be able to get my API key? So, click over here, create API key.

00:28:00.000 --> 00:28:04.000
Give any kind of a name, and create. Now, if I'm going to copy this API key.

00:28:04.000 --> 00:28:12.000
And, uh… I just have to replace this one, this API token, with this one. Now.

00:28:12.000 --> 00:28:20.000
So, if I'm going to… curl it. If I'm going to send this request over here.

00:28:20.000 --> 00:28:26.000
It will be able to give me some sort of a output. So, based on whatever, like, a function which has been designed, so it is going to give me technically as a.

00:28:26.000 --> 00:28:56.000
I'll put what, uh, happens…

00:29:06.000 --> 00:29:27.000
Mmm, girl is good, API key…

00:29:27.000 --> 00:29:32.000
In just a minute, guys, let me… check.

00:29:32.000 --> 00:29:38.000
The curl part.

00:29:38.000 --> 00:29:50.000
Yeah, just hit the, uh, terminal, so…

00:29:50.000 --> 00:30:00.000
Mmm… I think because of… this comma…

00:30:00.000 --> 00:30:09.000
Yeah, you can do it through Postman as well. I'm going to show you today that how we can do it even through a postman.

00:30:09.000 --> 00:30:15.000
There is some unnecessary text.

00:30:15.000 --> 00:30:29.000
Let me load it…

00:30:29.000 --> 00:30:45.000
Hmm, now it'll work. So, see, I have just, like, basically given a curl, and I'm able to get the response, see? Uh, so basically, my, uh, content was I didn't get it, uh, role user, right? And, uh, the content message was, what is AGI?

00:30:45.000 --> 00:30:51.000
So, yes, it is able to give me some sort of a outcome, right? Some sort of a outcome I'm able to receive out of this one.

00:30:51.000 --> 00:31:03.000
So, technically, I'm trying to hit this particular URL, the URL that you are able to see, a chat completion URL. Along with this, I'm trying to send my authorization. Authorization means I'm trying to send my password.

00:31:03.000 --> 00:31:10.000
You can say. And then, someone has written a function, right? Someone has written, basically, a function.

00:31:10.000 --> 00:31:19.000
And, uh, basically, I'm trying to access that function, and what technically that function is trying to do. So, that function is trying to hit a model.

00:31:19.000 --> 00:31:24.000
Right? That function is trying to hit the model, and then it will be able to give me some sort of a.

00:31:24.000 --> 00:31:33.000
Output at the end of the day. So, I think this is a new model which team has changed recently.

00:31:33.000 --> 00:31:38.000
Uh, it should be… let me change our model as well.

00:31:38.000 --> 00:31:45.000
This is a model that team has changed, I think. Just a day before yesterday.

00:31:45.000 --> 00:31:54.000
When GPT-5 was launched. So, OpenAI, maybe I can go ahead with. Uh, fine, let's go ahead with GPT-4.1 hyphen.

00:31:54.000 --> 00:32:01.000
No, no.

00:32:01.000 --> 00:32:15.000
4.1 hyphen nano.

00:32:15.000 --> 00:32:22.000
Login, let's try to hit.

00:32:22.000 --> 00:32:40.000
And I will be able to get the. Output, yeah. So now I'm able to see the output, our complete output I'm able to see. As you can see, in terms of our text. So, what is AGI? That was my question. This was the question which I have sent, and this is the answer which I'm able to get, that what is technically the AGI is. So, AGI stands for artificial general intelligence.

00:32:40.000 --> 00:32:47.000
It refers to the type of the artificial intelligence that can understand, learn, apply knowledge across the wide range of the task at.

00:32:47.000 --> 00:32:52.000
Level of, uh, completion. So, yeah, I'm able to get some sort of a output.

00:32:52.000 --> 00:33:01.000
So, technically, what I'm trying to prove over here, that this is the URL, right? This is the URL. Now, with the help of this URL, you are reaching out to our system.

00:33:01.000 --> 00:33:06.000
Now, in our system, so let's suppose I'm trying to inference this particular model.

00:33:06.000 --> 00:33:15.000
Right? This particular model. So, technically, someone has written a function, my team has written maybe a function, and that function.

00:33:15.000 --> 00:33:21.000
Is trying to take an input, input as this one, right? Input as this one, and this one a message, plus.

00:33:21.000 --> 00:33:30.000
Which model you are supposed to call, what should be the maximum number of token, what should be the temperature, so all of this basically will go as an input into a function.

00:33:30.000 --> 00:33:39.000
So, with the help of… and this function is available at this URL, right? This function is available at this URL, and this is the password to access that particular function. This is the token.

00:33:39.000 --> 00:33:47.000
To access that particular function, it is executing that function, and this is the output of the function I'm able to see. As simple as that.

00:33:47.000 --> 00:33:56.000
Right? So, this is an API. I'll come to this point, uh, I'll try to, like, show you all of these Euron API, or URI API.

00:33:56.000 --> 00:34:05.000
And again, so curl is one of the way. By which you will be able to hit the API from your command prompt.

00:34:05.000 --> 00:34:19.000
There are other ways as well. So, I can try to call it inside a Python, I can try to call it inside a Java, I can try to call it inside a .NET, I can try to test it with the help of some other tools called as Postman, something like that, right?

00:34:19.000 --> 00:34:29.000
So, this API, this URL, is independent. This is basically our HTTPS URL, and it's independent of any programming language.

00:34:29.000 --> 00:34:36.000
And this is technically called as API. Are you able to understand something, guys? Like, what is the API now?

00:34:36.000 --> 00:34:41.000
Yeah? Yes? Are we able to understand?

00:34:41.000 --> 00:34:47.000
That what is technically the API? So this URL which I'm talking about, it's technically an API.

00:34:47.000 --> 00:35:02.000
Which is independent of any programming languages. If someone is going to give me this URL, and if someone is going to give me this authorization, and if someone is going to tell me that, okay, so your function is going to take this, this, this as an input.

00:35:02.000 --> 00:35:10.000
So that is the only thing which I need. Apart from that, nothing means, literally, nothing is required. That is the exactly exact things.

00:35:10.000 --> 00:35:24.000
Which is required. That's it. Right? Just this URL and authorization, if someone is going to give me a token, and then I need, like, a input, I need information with respect to the function input, that what this function actually takes.

00:35:24.000 --> 00:35:31.000
So, function takes a message, function takes a model input, function takes a maximum token, function takes a temperature.

00:35:31.000 --> 00:35:45.000
If someone is going to give me only this much of input, I can write a Java code, I can write a .NET code, I can write a Python code, I can write a code in any languages, which will be able to call this API.

00:35:45.000 --> 00:35:48.000
Right? Which will be able to call this API. For example.

00:35:48.000 --> 00:35:57.000
Let's copy it, right? Let's copy it. And then… Uh, after copying this.

00:35:57.000 --> 00:36:03.000
Let's go to a URI, right? Maybe, uh, 4.1 is better.

00:36:03.000 --> 00:36:11.000
And, uh. I'm going to ask that convert this… code, or give me a code, whatever it is, convert this code.

00:36:11.000 --> 00:36:17.000
Into Python. Java, and…

00:36:17.000 --> 00:36:27.000
And .net. Yeah? .net. Now… The only thing, like I said, will be required will be the API. So, see, it is now giving me a Python code.

00:36:27.000 --> 00:36:31.000
Now, what Python code is trying to do, again, same thing, hit the URL.

00:36:31.000 --> 00:36:37.000
With this particular API, and this is the data. So, basically, it is trying to call request.post URL.

00:36:37.000 --> 00:36:44.000
Headar. Header means your authorization, basically, and then it is trying to give this input. So, this is my Python code.

00:36:44.000 --> 00:36:50.000
This is my Java code. Again, Java code will do the exact same thing. It is going to take all of these inputs, it is going to take the.

00:36:50.000 --> 00:36:55.000
Api endpoint, which is the URL and the authorization. Again, in .NET.

00:36:55.000 --> 00:37:10.000
Same thing, right? So, I just need only this much of information, and if that information is available with me, doesn't matter which language I'm going to use, I will be able to consume your API, I will be able to access your system.

00:37:10.000 --> 00:37:15.000
And this is how all of you are able to access, technically, a Euron system.

00:37:15.000 --> 00:37:24.000
Now, again, it's language independent, right? So maybe we have given you a curl, and we have given you a sample in a Python. Again, we have given you a sample in a JS.

00:37:24.000 --> 00:37:31.000
Javascript, but let's suppose if you are trying to use some other languages of your own choice. That's completely fine. Go ahead, use it.

00:37:31.000 --> 00:37:38.000
Right? You don't have to hustle, because you just need what? You need a URL so that you will be able to reach out to our system.

00:37:38.000 --> 00:37:48.000
You need an API token so that you will be able to unlock our system, and then inside our system, there is a function that we have written, which will give you an access of a.

00:37:48.000 --> 00:37:58.000
Which will give you access of, like, models that we are hosting, and that needs some input, maybe a message, maybe a model name, because we have a multiple model.

00:37:58.000 --> 00:38:08.000
So you have to pass a model name over there, a maximum number of token you have to pass, and then you have to technically give a temperature, and then everything will be done.

00:38:08.000 --> 00:38:19.000
Right? And you don't have to worry about, like, in which language I have written my function. It's completely fine, it's up to you in which language you are calling. You should not bother about, like, in which language we have written.

00:38:19.000 --> 00:38:30.000
So, this URL, which is our HTTPS URL, or HTTP, so what is HTTPS? Hypertext Transfer Protocol, right? And HTTPS S is nothing but hypertrans protocol secure.

00:38:30.000 --> 00:38:35.000
Now, what is this HTTP, by the way? It's a… Rule.

00:38:35.000 --> 00:38:40.000
Right? Since our childhood, we keep on listening that this HTTP is what? A protocol.

00:38:40.000 --> 00:38:48.000
A rule, right? A rule which is helping me out to reach out to some system, and this is how the entire internet works.

00:38:48.000 --> 00:38:54.000
We try to type google.com, we try to type LinkedIn.com, we try to typefacebook.com, right?

00:38:54.000 --> 00:39:00.000
So, someone is hosting that Facebook application in some server, and with the help of that.

00:39:00.000 --> 00:39:19.000
Url, and technically, it's an IP address, right? So whenever you're going to, like, from a command prompt, you're going to do ping google.com, it will start showing you the IP address, right? It will start showing you the IP address. So, someone is running that Google program, someone is running that Facebook.com, someone is running that LinkedIn.com, someone is running, basically, this Euron.1.

00:39:19.000 --> 00:39:28.000
And with the help of this HTTPS, you are able to reach out to that server where this is running. So, we are running this, you know what one?

00:39:28.000 --> 00:39:37.000
At some server. With the help of this URL, you are able to reach out to our server. And in our server, we have this entire application, so you are able to access it.

00:39:37.000 --> 00:39:51.000
So technically, you are using this HTTPS protocol to access our server. Similarly, API. So, you are trying to access some of the function which we have written in our server, so we are trying to expose it with the help of API.

00:39:51.000 --> 00:40:01.000
And entire world. So maybe you are trying to order something from a Swiggy Gemato, you are going to click, it is going to check from the backend that, okay, fine, so this particular items are available or not.

00:40:01.000 --> 00:40:15.000
You will try to add something to the cart, and then you will be able to place the order. Same goes with a Netflix, same goes with the YouTube, same goes with the entire world. Now just open up any application and click on any application. Every time you are going to click.

00:40:15.000 --> 00:40:20.000
You are hitting some APIs. And it is trying to bring the data.

00:40:20.000 --> 00:40:32.000
How? After executing some of the function in a backend. Yes? So after executing some sort of a function in a backend.

00:40:32.000 --> 00:40:44.000
Fine. So, HTTPS need SSL certificate, yeah. That's the reason, so it's called a secure. Https means HyperTax Transfer Protocol Secure. Once you are going to attach the certificate. Otherwise, it will be HTTP.

00:40:44.000 --> 00:41:00.000
Okay, so hope, theoretically, this concept of API is clear, right? But it will be more clear, so when we are going to write sub-API, right, when we are going to write some API. Now, if I'll talk about a Python, so Python is a programming language, right?

00:41:00.000 --> 00:41:08.000
But inside our Python programming language, we have multiple frameworks, right? We have multiple frameworks to achieve our different, different tasks. For example.

00:41:08.000 --> 00:41:14.000
For performing, maybe, uh, operation with respect to a structured data. We have a Pandas.

00:41:14.000 --> 00:41:20.000
Right? To deal with maybe a numerical data, arrays and vectors. We have NumPy, right?

00:41:20.000 --> 00:41:31.000
To deal with all those scientific functions. We have a psipi, basically, to plot a graph, we have a Matt Toddlib, we have C-born, we have a Pandas plot, we have a plotly, we have a cufflings, right?

00:41:31.000 --> 00:41:38.000
Now, to create an API. To create an API. So, which framework do we have?

00:41:38.000 --> 00:41:46.000
Yeah, which framework do we have in Python? So we have a multiple framework, right? We have a multiple framework, multiple libraries, technically.

00:41:46.000 --> 00:41:55.000
So now people are giving me an answer, people are saying that we have a fast API, we have a Flask, in a Django, we can try to create it, and technically, all of you are correct.

00:41:55.000 --> 00:42:00.000
Yes? So we have a framework. I can try to use any of this framework.

00:42:00.000 --> 00:42:13.000
And I will be able to create an API. Just a matter of fact that every framework try to follow its own functionalities, and it is having its own set of the rule, because every framework has been created by someone else, right?

00:42:13.000 --> 00:42:23.000
But eventually, I will be able to get an API, which is going to be language independent, and anyone and everyone will be able to call it, anyone and everyone will be able to use it.

00:42:23.000 --> 00:42:30.000
So, fine, let's go ahead and let's try to create some of the APIs on our own, then only we will be able to understand this entire thing in our.

00:42:30.000 --> 00:42:44.000
True manner. So… Uh, closing everything. Just try to open up your VS Code, guys. I believe in my previous class, we have already done an installation of a VS Code, right? So, just try to open up your VS Code.

00:42:44.000 --> 00:42:52.000
Nothing much is required. Uh, click on File, create one folder. So, let's suppose I'm going to create a folder called as API.

00:42:52.000 --> 00:43:00.000
Yeah? Api. Uh, API EXMPLE. Api example. So just create one folder inside of VS Code.

00:43:00.000 --> 00:43:07.000
And close everything. Yeah, just create one, like, file, uh, sorry, one folder called as API Example.

00:43:07.000 --> 00:43:16.000
And then close everything. Done, everyone?

00:43:16.000 --> 00:43:31.000
Library, basically. Framework means library. In an interview, someone asked, FastAPI is not enough, you should know Django. I mean, like, just go after the JD. If someone has mentioned something inside the JD, then it's fine. Otherwise, like, there are hundreds of other framework, and…

00:43:31.000 --> 00:43:42.000
Someone will tell you that this is not enough. So, what you will do, you will go and learn. So technically, like, you should… know the core part, that what is the API. Now, if someone is going to ask me that, how to create an API in a Flask.

00:43:42.000 --> 00:43:49.000
I will be able to do it in 2 minutes. Django, again, 2 minutes, right? Fast API, again, 2 minutes.

00:43:49.000 --> 00:43:55.000
Because there are, like, so many technology and so many things out there in a market.

00:43:55.000 --> 00:44:06.000
So, fine, guys, just open up our VS Code. And, uh, let's try to build an API. So I'll try to do one thing. So I'll try to create one simple file over here. So, test.py file.

00:44:06.000 --> 00:44:12.000
So this is the Python file I have created, yeah? A very simple file inside this one.py file I have created.

00:44:12.000 --> 00:44:31.000
Not a .ipuenly file. And, uh, here, so what I will do, so I'll try to basically, uh, like, uh, create an API, and then I'll try to even test an API. Again, so when I'm going to create an API, there is something called as get method, there is something called as post method, there is something called as put method.

00:44:31.000 --> 00:44:42.000
There is something called as delete method. So, all of these methods will come into a picture, and one by one, I'll try to explain you that, okay, so what is the meaning of a get, what is the meaning of a post, what is the difference between get and post.

00:44:42.000 --> 00:44:49.000
What is technically a delete, what is technically a put. All of these things we'll try to understand. One by one, one by one.

00:44:49.000 --> 00:44:57.000
So far, our objective was to understand our API theoretically. I believe most of us are able to understand it.

00:44:57.000 --> 00:45:05.000
Theoretically, only theoretically, right? Only in a theoretical way, and by doing a practical, so we'll try to see that whatever we have, like, learned.

00:45:05.000 --> 00:45:12.000
During this theory is correct or not, right? So we'll try to validate, we'll try to verify that one.

00:45:12.000 --> 00:45:27.000
Okay, let's do it. So here, uh, to execute this API, or to create this API, so I'm going to use a framework called as, or you can say a library called as FastAPI Library. You can use Flask, that's completely fine. Use Django, that's completely fine.

00:45:27.000 --> 00:45:39.000
Right? So, fast API. Now here, first of all, you will have to install. So just open up your terminal. So, to open up your terminal, you can try to, you know, uh, like, click on view, and then you can click on Terminal.

00:45:39.000 --> 00:45:50.000
Or, the shorthand is basically CTRL-Tilde. Right? Control, tilt, by which you will be able to open up your terminal. Ctrl-tild. So that is a shorthand. So generally, I use a shorthand, but yeah.

00:45:50.000 --> 00:45:59.000
So if you're not able to remember certain, then go to View, and then go to a terminal. You will be able to open up. And there are many other ways as well. You can even go and search over here, and then open up the terminal.

00:45:59.000 --> 00:46:04.000
So, multiple ways. Now, so first of all, we have to install a.

00:46:04.000 --> 00:46:08.000
Framework. So, Python, core Python is already installed, we have already done that in my previous class.

00:46:08.000 --> 00:46:15.000
And we have already done this, like, entire things. So here, to install a fast API, so pip install.

00:46:15.000 --> 00:46:24.000
Pip install and fast API. So this is something that you have to install, so that it will be available inside your system, and you will be able to do whatever you.

00:46:24.000 --> 00:46:32.000
Want, yeah? So, pip install FastAPI. Hit enter, and uh… in no time, it will be able to install it.

00:46:32.000 --> 00:46:37.000
In my system, it is telling me requirement already satisfied, because in this environment, it's already available.

00:46:37.000 --> 00:46:45.000
Yeah, FastPay is already available, but for you. It will not be… it may be not the same case, yeah? It will start downloading, it will start installing it.

00:46:45.000 --> 00:46:54.000
For done days, just everyone pip install. Pip. Install past API. Simple.

00:46:54.000 --> 00:47:17.000
Everyone. Yeah, so pip install FastAPI. Now, along with this pip install FastAPI, so you have to execute a Fast API, and it needs, basically, CLER clear. Yeah. So, you have to install one more thing. So, pip install uvcon, E-N-I-N-S-T-A double L, install UV.

00:47:17.000 --> 00:47:28.000
God. Uv column, basically. So that you will be able to execute a fast API. So, just do these things. In my system, it's already available, I have already pinged you inside your chat box.

00:47:28.000 --> 00:47:37.000
Yeah. So people install UVicom, guys, and pip install FastAPI. Done. Everyone?

00:47:37.000 --> 00:47:55.000
Yeah? Done? Yes? Okay, people are saying yes, done, fine. Why is Uicon? Because it needs a support of the UVicon library to execute or make any API, like, available to the entire world.

00:47:55.000 --> 00:48:01.000
It's not a UV, UVIE, I have already pinged you, just look into that. It's a UVI.

00:48:01.000 --> 00:48:11.000
Uv corn. Just see my spelling, you are doing a spelling mistake.

00:48:11.000 --> 00:48:22.000
Okay, now people are asking, what is Fast API? Guys, just a simple advice, uh, try to focus inside the class, you will be able to understand, and if you're sleeping in between, and if you are, like, you know.

00:48:22.000 --> 00:48:29.000
Uh, like, uh, not sitting in front of your system, maybe if you're roaming here and there, and maybe if you are trying to do some of your.

00:48:29.000 --> 00:48:33.000
Uh, work. I know it's a morning, you all are at home.

00:48:33.000 --> 00:48:42.000
But yeah, so when you're trying to learn. Focus is the most important part. I believe this is something which I told you in my class number 1, class number two, both.

00:48:42.000 --> 00:48:47.000
Otherwise, no one will be able to teach you, believe me, no one will be… things are not difficult, but yeah.

00:48:47.000 --> 00:48:56.000
All… everything requires an attention. So, stop roaming around, and then sit in front of your, like, uh, system.

00:48:56.000 --> 00:49:06.000
Okay, good. Now… Uh, we are able to do this installation, so this two installations was required. Going forward, I'm going to teach you that how you will be able to create an environment.

00:49:06.000 --> 00:49:15.000
Different, different environment on a project basis, and then how you will be able to keep your requirement.txt, all these things will come into a picture, but as of now, we are just, like, trying to start ahead with.

00:49:15.000 --> 00:49:21.000
So, let's go in a basic mode. Now here, so what you have to do, so you have to.

00:49:21.000 --> 00:49:29.000
Import a fast API, so from… from fast…

00:49:29.000 --> 00:49:38.000
Api, just try to import. Fast API. So, Fast API Capital. So, just try to import this, Fast API. Just a first line.

00:49:38.000 --> 00:49:43.000
Second line is coming from the autocompletion. So just import this one, guys.

00:49:43.000 --> 00:49:50.000
So, from Fast API, import FastAPI. Now, once you are able to import this one.

00:49:50.000 --> 00:49:55.000
Then, you have to create an object of FastAPI. Forget about it. We are not going to create as of now.

00:49:55.000 --> 00:50:04.000
Let's suppose I'm going to create a function, yeah? I'm going to create a function called as addition function. Now, this addition function is going to do what?

00:50:04.000 --> 00:50:09.000
So, it is going to take two input, A comma B. I'm going to create a very simple function, add a function, right?

00:50:09.000 --> 00:50:18.000
And, uh, it is going to take two inputs, technically. And, uh, this 2 input is A and B, it is going to take, and then it is going to return A plus B.

00:50:18.000 --> 00:50:33.000
Yes? So, our very simple function, right? A very, very simple function, I believe, uh… we all will be able to understand this function, so this function is taking two inputs, A and B, and it is going to give me A plus B, as simple as that. Okay, that's well and good.

00:50:33.000 --> 00:50:44.000
Now, if I have to call this function in this program itself, so what I do, so I'm going to write add, and then I'm going to pass this value of A and B.

00:50:44.000 --> 00:50:53.000
And, uh, done, done, right? And then done. So, maybe I can try to execute this entire thing. So, here, I can try to execute it.

00:50:53.000 --> 00:51:15.000
And I will be able to maybe get the no module name FastFAST API. Why no module in fast API?

00:51:15.000 --> 00:51:29.000
I have already done the installation. So, maybe it is considering a different environment, I'll check, and I'll try to change it then.

00:51:29.000 --> 00:51:35.000
Okay, so that is taking a different environment. Let me execute in this way, so that you can consider the same environment.

00:51:35.000 --> 00:51:39.000
So Python test.py file. Now it will consider the same environment.

00:51:39.000 --> 00:51:53.000
So basically, it is trying to execute my function, and as we can see, that there is no output, because I have not written the print over here. So let's try to write a print, and then… it will try to print whatever I'm trying to execute. So here, Python test.py.

00:51:53.000 --> 00:51:57.000
And, uh, 3 plus 4 is equal to 7. Simple function, right?

00:51:57.000 --> 00:52:08.000
A simple function. So, this is the add function that we have written, and yes, I'm able to call this function in the same program. Yes, I'm able to call this function in the same program.

00:52:08.000 --> 00:52:12.000
And, uh, I'm able to see the output. Now, there is no issue with this.

00:52:12.000 --> 00:52:24.000
Now, someone has asked me that expose this function, right? Expose this function to the outer world, so that not just from Python, because we all know that, yes, this is the Python program, and from Python program itself.

00:52:24.000 --> 00:52:30.000
I'm trying to access it, and it's working well, right? I'm able to access it, I'm able to execute it.

00:52:30.000 --> 00:52:35.000
Uh, that's cool, that's completely fine, but someone has asked me that, no.

00:52:35.000 --> 00:52:41.000
Expose this function to the outer world, so that anyone will be able to access this function.

00:52:41.000 --> 00:52:50.000
Anyone means literally anyone will be able to access this function from any framework, or maybe from any program, or maybe from a URL.

00:52:50.000 --> 00:53:00.000
Right? Maybe from a URL, maybe from a Google, like, uh… Chrome, someone will be able to access it, right? And they should be able to get the output.

00:53:00.000 --> 00:53:06.000
How I will be able to do it. And this is where this API concept comes into a picture. And that was the whole idea.

00:53:06.000 --> 00:53:09.000
That was a whole discussion that we have been doing, in theory, right?

00:53:09.000 --> 00:53:16.000
That we have one function, just like a function will be available inside a bank for check balance, valid user, whatever it is.

00:53:16.000 --> 00:53:26.000
Right? So someone is going to request, and it should be able to execute that function. So, maybe I have… to do that, I have to expose this function, first of all, to the outer world.

00:53:26.000 --> 00:53:34.000
How I will be able to expose, yeah? How I will be basically able to expose this particular.

00:53:34.000 --> 00:53:43.000
Function. Let's try to understand, and then you will end up creating your very first API. And technically, it's very easy, believe me, it's very, very, very, very easy.

00:53:43.000 --> 00:53:55.000
How? Okay. So, FastAPI is a framework I'm going to use, and let's suppose I'm going to create one object. Object means variable, right? Variable of what? Variable of FastAPI.

00:53:55.000 --> 00:54:03.000
So, I'm just trying to call, right? I'm just trying to call this Fast API, and this is the variable, so that I will be able to access this.

00:54:03.000 --> 00:54:09.000
Entire libraryD, yeah? So this is a variable I have created. Okay, fine.

00:54:09.000 --> 00:54:17.000
Now, what I will do with this variable, and how I'm going to expose this function to the outer world, it's very simple, at the rate. So, call the decorator.

00:54:17.000 --> 00:54:22.000
Decorator will try to give an access, or decorator will try to give a power, additional power.

00:54:22.000 --> 00:54:34.000
And then, app.get and then slash. So, this is something that we have to write. So, app.get slash. Now, only this much is required.

00:54:34.000 --> 00:54:40.000
Now, what is our meaning of this? And now I'm saying, I'm claiming, basically, right? I'm trying to claim over here.

00:54:40.000 --> 00:54:55.000
That now this function will be exposed. This function will be exposed to the entire world… not entire world, at least it's running in my local as of now, right? I will show you how I will be able to make this function available to the entire world. I'll show you that as well.

00:54:55.000 --> 00:54:59.000
Uh, right now, right? Now it's self-hyut, I'll try to show it to you. And there are multiple ways to do it.

00:54:59.000 --> 00:55:14.000
But, uh, here, technically. By writing this, just by writing this line number 6 that you are able to see over here. So, I'm trying to claim that, okay, now this function is exposed, and API has been created.

00:55:14.000 --> 00:55:29.000
Yes, API has been created. This is what I'm trying to claim. We'll see, so whether my claim is, uh… valid, or it's an invalid claim. We'll try to verify that part, but yeah, so as of now, that's a claim I'm trying to make.

00:55:29.000 --> 00:55:34.000
Okay, so if that is a claim, then how I'm going to test it? Yes, how I'm going to basically test it?

00:55:34.000 --> 00:55:38.000
So, yes guys, every one of us are able to write it.

00:55:38.000 --> 00:55:59.000
Let's say yes or no in your chat?

00:55:59.000 --> 00:56:08.000
Yes? Okay. Symbol code, right, and again, nothing fancy I have written, because at the end of the day, everything will be just a function, yes? Everything will be just a function.

00:56:08.000 --> 00:56:18.000
Okay, fine. So, if I have to execute this fast API, Ctrl-S, save it, and then…

00:56:18.000 --> 00:56:25.000
Cls. Okay, and now, if I have to execute this one, so you have to call what? Uv corn.

00:56:25.000 --> 00:56:29.000
Uvcon that you have installed, right? So, it is required for the execution.

00:56:29.000 --> 00:56:36.000
Uvcon, and then you have to basically write a file name. So what is my file name, by the way? It's a test.

00:56:36.000 --> 00:56:46.000
Right? So, UVCon, and then file name is what? Test. Colon, you have to write app by default, yes? So, test app, basically.

00:56:46.000 --> 00:56:56.000
And then you have to call hyphen hyphen reload, so that it will be able to reload automatically, uh, whenever I'm going to make any kind of a change, so that I don't have to come and execute this function, or execute this file again and again and again.

00:56:56.000 --> 00:57:03.000
So, UV call test, and it's available in the directory, same directory. If it is not available, then give a proper directory.

00:57:03.000 --> 00:57:08.000
Proper path, so it's available in my same directory. So I'm trying to call UVCon.

00:57:08.000 --> 00:57:19.000
Test… test is what? Test is my file name. So, whatever file name that you have given, maybe you have given some different file name, so give that file name. Otherwise, it will not work. I have given, as you can see, a test file name.

00:57:19.000 --> 00:57:24.000
So, I'm giving a test over here, and then app reload. As simple as that.

00:57:24.000 --> 00:57:31.000
Now, if I'm going to hit Enter. Right? Now, if I'm going to hit enter. So, if all works well.

00:57:31.000 --> 00:57:42.000
Now it is telling me what? You will watch our changes of this directory, so whatever changes which I'm going to do automatically will be reloaded. Uvcorm running on this particular URL.

00:57:42.000 --> 00:57:48.000
Right? This particular URL. So where we have our IP address, and where we have our port number.

00:57:48.000 --> 00:57:56.000
Yeah? So, what is this IP address, by the way? So, this IP address is technically an IP address of my local system.

00:57:56.000 --> 00:58:09.000
If I'm going to host it on some server, then there will be a public IP address of that server. So, IP address is nothing but an address, address for any system. This is what we understand, right? And port number is nothing but we are running one program.

00:58:09.000 --> 00:58:20.000
Right? We are running, for example, this test.py file. So now, in our system, so we have a series of the port, right? Port starting from a zero maybe till million, we have a port.

00:58:20.000 --> 00:58:26.000
Inside our system. So, this program is basically exposed to that particular tunnel, that particular port.

00:58:26.000 --> 00:58:46.000
So, here, with the help of this URL, let's suppose if I'm going to hit this URL, right, if I'm going to hit this URL and a port number, what will happen to… and see, it's running, right? It's running. It's not like it has given you the output, and then it will be, like, gone. No. It will keep on running. If it is not running, then you will not be able to hit this URL, as simple as that.

00:58:46.000 --> 00:59:06.000
Right? So, should we keep on running? It should be up and running all the time. Now, if I'm going to hit this URL, what is our meaning? Our meaning is very simple. If I'm going to hit this URL, with the help of this IP address, with the help of this IP address, 127.0.0.1.

00:59:06.000 --> 00:59:12.000
Right? I'm reaching out to my local system, this system, right, where I have executed this program, and inside the system.

00:59:12.000 --> 00:59:21.000
At this port number, this program is up and running, and this method, right, this method is actually live. This method is actually live.

00:59:21.000 --> 00:59:31.000
Now, I have written app.get. Yeah, I have written app.git, and then I have written, basically, slash. What is our meaning of this slash, by the way?

00:59:31.000 --> 00:59:49.000
Yes, what is the meaning of the slash? I'll explain you, don't worry. I'll even change the route, and then what is the meaning of a route, I'll try to explain you, but step by step, let's try to move it step by step, so that, uh… Every one of us will be able to understand technical meaning of an API, yeah. So now, my program is live. I'll copy this one. Yes, I'll copy this one.

00:59:49.000 --> 00:59:56.000
And, uh, I'll go to a browser. I'll go to a browser. Simple, right? Hit enter.

00:59:56.000 --> 01:00:01.000
Are you able to see something? Let's go ahead with a pretty print, yeah? So, are you able to see something?

01:00:01.000 --> 01:00:10.000
Maybe, yes, we are able to see something over here. Right? We are able to see something over here. Now, just do one thing, slash.

01:00:10.000 --> 01:00:20.000
Right? Slash, and then… call a DOCS, Docs, basically. Slash what? Slash? Docs, D-O-C-S docs. I'll tell you what is this, what is the meaning of this one.

01:00:20.000 --> 01:00:33.000
Yeah? Now you will be able to see a beautiful UI. This UI is called as Swather UI, S-W-A-G-E-R. Swagger UI, basically. So, FastAPI provides you UI as well.

01:00:33.000 --> 01:00:43.000
Right? Phosphine provides you UI as well. Now, once you will come to this… so basically, this UI will help you out in terms of doing a testing. I'll show you a multiple way of doing a testing, don't worry.

01:00:43.000 --> 01:00:51.000
So, if you will click on this UI, are you able to see a get over here, and are you able to see your own function name? This is the function which I have written, right?

01:00:51.000 --> 01:00:56.000
This is technically a function which I have written, right? This is the function.

01:00:56.000 --> 01:01:08.000
And at this root, this function is available, where it is taking two inputs, A and B, right? It is taking two inputs, A and B, and if I'm going to click on try this out.

01:01:08.000 --> 01:01:17.000
If I'm going to click on this Try This Out, right? So, here, I'm going to give a value of A4, value of B is equal to 5, execute.

01:01:17.000 --> 01:01:30.000
Now, once I'm going to click on this Execute, execute, execute, execute, maybe multiple times, maybe one time, that's completely fine, right? So once I'm going to click on this execute, execute, execute over here.

01:01:30.000 --> 01:01:38.000
So, you will be able to see. What? You will be able to see some sort of a output.

01:01:38.000 --> 01:01:43.000
You will be able to see some sort of a output over here, right? You will be able to see some sort of output.

01:01:43.000 --> 01:01:53.000
So, it is giving me 45, by the way. Why? What is the reason? It is giving me output as of 45, because if I'm trying to enter something over here, it is trying to consider it as a.

01:01:53.000 --> 01:02:03.000
String, I have used plus, so it is trying to perform concatenation operation. That's again the problem. Yes? So it is trying to perform the append operation, by the way.

01:02:03.000 --> 01:02:09.000
Yes, it is trying to… so how I'm going to mitigate this kind of a situation?

01:02:09.000 --> 01:02:24.000
See, so when I have executed my method, in the console, it was giving me a 3 plus 5, or whatever I have written, so it was trying to do an addition operation. But when I'm trying to send a data, right, through this URL, through this URL when I'm trying to send this data.

01:02:24.000 --> 01:02:37.000
So now it is trying to consider, because here, any, right? So, it is trying to understand type of A and B is equal to NE, and by default, it is going to consider that as a string. So, I'm able to get 45 as an output. I'm getting an output.

01:02:37.000 --> 01:02:48.000
Right? It's not like I'm not getting output, I'm able to get the output, but uh… how I'm going to… Uh, make sure that it should consider integer. It should not consider.

01:02:48.000 --> 01:02:53.000
Right? It should not consider. Basically, this A and B.

01:02:53.000 --> 01:02:59.000
Right? It should not consider A and B. As?

01:02:59.000 --> 01:03:05.000
Any. So simple, I can try to write colon INT, right? Colon INT, so that.

01:03:05.000 --> 01:03:14.000
It'll be able to understand that, okay, fine. Even from outside, if I'm going to call. So, colon INT, Ctrl-S, right? Ctrl-s.

01:03:14.000 --> 01:03:24.000
And this is the meaning of… so when I have written, uh, reload, so this is the meaning of it, so you don't have to re-execute it, it will be able to refresh automatically, right? This is the meaning of hyphen hyphen reload, which we have written.

01:03:24.000 --> 01:03:34.000
Now, let's go over here once again, right? So, here it is trying to understand that, okay, so any is not required, it's an integer. So if I'm going to pass 4, if I'm going to pass.

01:03:34.000 --> 01:03:40.000
Of try this out, right? If I'm going to pass 4, if I'm going to pass 6 over here, if I'm going to call execute.

01:03:40.000 --> 01:03:44.000
Now, 6 plus 4 is equal to 10. Are we able to get the answer?

01:03:44.000 --> 01:03:53.000
Same? Yeah? Are we able to get the answer? So here, with the help of this UI, what is technically happening? Let's try to understand that part.

01:03:53.000 --> 01:04:00.000
So, see, we… our program, our function is live at this particular location, right? This particular location.

01:04:00.000 --> 01:04:09.000
And we have written, technically, we have written what, so we have written? Okay, fine, so this function will be available at slash.

01:04:09.000 --> 01:04:16.000
This is the route that we are trying to give. Let's suppose, if I'm trying to say that, okay, this function will be available at Route Sudhonshu.

01:04:16.000 --> 01:04:22.000
This function will be available where? At route Sudhonshu. I have given just any name, my own name I have given.

01:04:22.000 --> 01:04:27.000
Now, CTRL-S, save it, yeah? Save it. Fine? Now, again, go back.

01:04:27.000 --> 01:04:42.000
Again, go back, and then try to hit enter. It will not… it will say that I'm not able to find anything. Now, slash… Sudan Shu. Now it is able to get something. Now, if I'm going to do slash DOCS, so it will be able to…

01:04:42.000 --> 01:04:49.000
Reach out, yeah? It will be, or maybe, like, uh… what has happened?

01:04:49.000 --> 01:05:00.000
Yeah, message required this, this, this? Okay. Fine. Now, so, it is showing me route is equal to what? It is showing me route is equal to slash Sudhansu.

01:05:00.000 --> 01:05:08.000
Fine. Now I'm going to write even a slash, uh, maybe KUMAR slash dhanshu slash Kumar.

01:05:08.000 --> 01:05:23.000
Slash, uh, XYG, and Ctrl-S. So again, it will be re-execute itself, right? So this is basically a route. Now, what is technically a meaning of this one? Let me execute. So now here, a meaning of this one is very simple.

01:05:23.000 --> 01:05:27.000
This add function is available. This add function is available. Where?

01:05:27.000 --> 01:05:34.000
This add function is available at which location? So, this add function is available.

01:05:34.000 --> 01:05:41.000
Add this URL, this is the IP address, which will be able to reach… which will help me out to reach out to the system.

01:05:41.000 --> 01:05:48.000
Right? Then, inside that, at this port. Now, inside that, at this route.

01:05:48.000 --> 01:05:53.000
Right? At this location. So, means directory inside, directory inside directory, consider in that way, right?

01:05:53.000 --> 01:06:00.000
So, added this allowed. So, this is technically called as route, yes? This is technically called as, basically, a route.

01:06:00.000 --> 01:06:11.000
That, okay, so what is the total route? What is the whole route? The whole route to hit this function, this add function, is technically 127.0.0.1.

01:06:11.000 --> 01:06:18.000
Column 8000 slash. So, the handsu slash…

01:06:18.000 --> 01:06:27.000
Kumar slash XYG. This is technically a route, this is technically a API, this is an API, right?

01:06:27.000 --> 01:06:33.000
This is technically an API by which you are reaching out to this function called as add.

01:06:33.000 --> 01:06:37.000
You will be able to access this function called as add.

01:06:37.000 --> 01:06:50.000
Yes? So, why docs? So, basically, uh, FastAPI provides you a UI, so that you will be able to test it, uh, with the help of UI itself. That's a leverage you will be able to get with respect to the Fast API.

01:06:50.000 --> 01:06:58.000
Simple, just for the testing purpose, it is giving you the UI, so that, you know, you will be able to see, like, what is the input, what is the output, and you will be able to basically test it.

01:06:58.000 --> 01:07:02.000
As simple as that. That is something that you will be able to access it at Docs.

01:07:02.000 --> 01:07:15.000
So wherever your API is running, just do slash docs, and you will be able to access the entire UI. And through a UI itself, you will be able to do a testing. But again, let's suppose I don't have this UI.

01:07:15.000 --> 01:07:25.000
Possible, right? I don't have this UI. My function is running at which location? So, slash dahanshu slash Kumar slash XYZ. So, this is the location where my function is running, okay? That's cool.

01:07:25.000 --> 01:07:33.000
So this is the location where my function is running. Okay, fine. So, I'll not use a docs.

01:07:33.000 --> 01:07:38.000
I'll try to use Sahanshu's, so this… because this is the total route, right? This is the total route.

01:07:38.000 --> 01:07:49.000
The highlighted one is a total route. Now, if I'm going to hit enter, yes, it is, like, giving me some sort of a details, right? It is giving me some sort of a details, and it is telling me that you have to pass a value of A.

01:07:49.000 --> 01:08:01.000
And you have to pass, basically, a value of B. Because that is something that you will pass, then only I will be able to execute. So now, if I'm going to hit again, if you'll come over here.

01:08:01.000 --> 01:08:08.000
So, it will give you this 422 unprocessable entity, means. I am trying to hit this URL.

01:08:08.000 --> 01:08:15.000
So whenever I'm… see, so whenever I'm trying to hit… as you can see the URL, right? This path.

01:08:15.000 --> 01:08:18.000
So whenever I'm trying to hit this path, it is trying to execute this function.

01:08:18.000 --> 01:08:24.000
Simple. Whenever I'm going to hit this path, it is trying to execute this add function.

01:08:24.000 --> 01:08:31.000
As simple as that, it is trying to execute this add function, but to execute this add function, I need an input A and B.

01:08:31.000 --> 01:08:50.000
Which I have not passed. Right? Technically, I am trying to hit this one. So, hit this one. Execute this one. It simply means that, that I'm trying to execute this function, because this route is been binded by this, but this function has been binded by this particular route, right? But, uh, this, to execute this function, I need to pass a value of A and B.

01:08:50.000 --> 01:08:56.000
So how I will be able to pass a value of A and B, so that I can try to execute it?

01:08:56.000 --> 01:09:02.000
Yeah, so that I will be able to execute it. So, we have seen that with the help of Swagger UI.

01:09:02.000 --> 01:09:08.000
Right? Swagger UI, so which I was able to access with the help of slash docs. So, Swagger UI, UI interface.

01:09:08.000 --> 01:09:15.000
But I can test my APIs. Now, if I have to execute it through the URL itself, how I will be able to execute it?

01:09:15.000 --> 01:09:23.000
Let's try to understand. So, here, at this path, my function is available, I know that. Someone has told me, maybe, right?

01:09:23.000 --> 01:09:31.000
So, I will try to do what? So, I will try to write, maybe, a question. So, if I have to pass data through a URL.

01:09:31.000 --> 01:09:43.000
I'll talk about that. A is equal to 4, right? A is equal to 4, and… B is equals to 5. Hit enter. Are we able to get the output?

01:09:43.000 --> 01:09:47.000
I have given age equal to 4 and B is equal to 5.

01:09:47.000 --> 01:09:52.000
I'm pinging you this, yeah? So just change your route if your route is not same.

01:09:52.000 --> 01:09:58.000
So, I'm trying to pass A is equal to 4 and B is equal to 5. Are we able to hit our function? Can I say that, that.

01:09:58.000 --> 01:10:04.000
This is the browser, right? This is the Google browser, this is the Google Chrome I'm using. Just use any browser, I don't care, right?

01:10:04.000 --> 01:10:15.000
Just go and use any browser. Can I say that through a browser, right, through a browser, I'm able to execute a Python code, 200 status is okay, right? 200 means good status.

01:10:15.000 --> 01:10:21.000
I'm able to execute it. So, can I say that through a browser, I'm able to even execute a Python code?

01:10:21.000 --> 01:10:27.000
And I believe this is what we were trying to understand, right? From a very first minute of this class.

01:10:27.000 --> 01:10:32.000
Yes? From the very first minute of this class, this is something that we were trying to understand.

01:10:32.000 --> 01:10:36.000
Right? That it should be framework independent, it should be language independent.

01:10:36.000 --> 01:10:44.000
And yes, we are able to use a browser. First of all, we have used a Swagger UI. We are able to hit… we were able to hit that, right?

01:10:44.000 --> 01:10:49.000
Then I have… I'm trying to show you with respect to our browser, I'm able to hit again.

01:10:49.000 --> 01:10:57.000
Yes, I'm able to hit again, and it's a good status, and when I say that I'm able to hit, I believe we all are able to understand.

01:10:57.000 --> 01:11:06.000
So guys, just tell me one thing. Are we able to understand that how we are able to reach out to this function?

01:11:06.000 --> 01:11:10.000
Are we able to understand that how we are able to reach out to this function?

01:11:10.000 --> 01:11:15.000
Right? And what is our meaning of this route, or the whole URL?

01:11:15.000 --> 01:11:21.000
One person is saying, like, uh, no. Uh, two unknown.

01:11:21.000 --> 01:11:26.000
So what is… what is your question, then? If you are saying no, then what is your question? What is your doubt?

01:11:26.000 --> 01:11:31.000
Yeah? Yeah, some of you will face an error, maybe, like, we'll try to solve it.

01:11:31.000 --> 01:11:38.000
But it should not give you, right? It's a very simple function, a basic function I have written. Like, nothing, nothing fancy over here, right?

01:11:38.000 --> 01:11:47.000
Yeah? So here, with the help of this, I'm able… so I'm able to reach out to this function, I'm able to execute this function, so technically, technically.

01:11:47.000 --> 01:11:59.000
This is my API, only till this point. And I'm trying to pass the data, right? So technically, this is my API, and if I'm going to expose this API now to the entire world.

01:11:59.000 --> 01:12:05.000
Shall I do it, guys? Shall I expose this to entire world, so that even you will be able to access my API?

01:12:05.000 --> 01:12:16.000
Shall I do it now? That, like, you will be able to access my add function, yeah? You will be able to access my add function now itself.

01:12:16.000 --> 01:12:28.000
Okay, let me do it then. So, basically, see. This is running in my local system, right? In my local system, basically. So, there is a, like, there is basically a software, a small tool called as NGRock.

01:12:28.000 --> 01:12:37.000
Right? There is a tool called as NGRock. Ngrock, right? So…

01:12:37.000 --> 01:12:42.000
Ngrock, and with the help of ngrock, I will be able to do that.

01:12:42.000 --> 01:12:55.000
Yeah, I will be able to basically do that. To do it, so just go to Google, and first of all, you have to download, so you can click on download, doesn't matter which system you are using, it's completely fine. It works for Windows, Mac, and, like, Linux, all of these.

01:12:55.000 --> 01:13:18.000
So, privacy policy, okay, fine, accept all. Save choices. Okay, so here you can come, and then you can try to download for Windows. We have for illness, we have for Mac as well, so it's just a simple plain file. So, download it, a very small file, so, like, 9MB of file, and with the help of this, you will be able to expose it to the ngrock. So, this URL that you are able to see, right?

01:13:18.000 --> 01:13:44.000
You will be able to expose it with the help of ng-Rock. I'll show it to you. Now, you will be able to hit my function.

01:13:44.000 --> 01:13:50.000
Yeah, so NGROG, download is done. Now, once you are able to download it, uh, right-click.

01:13:50.000 --> 01:14:01.000
And then extract it, basically. After downloading, just like any other software, and where is my extraction?

01:14:01.000 --> 01:14:07.000
Where I have extracted, it's not showing me here. Okay, here, okay, sorry, my bad.

01:14:07.000 --> 01:14:17.000
So, here, this is a small file, it's one small file. So, basically, I can try to open up, like, a CMD. This location I can try to open up into a CMD.

01:14:17.000 --> 01:14:23.000
So here, if I'm going to do DIR, so this file is available, ndrog.exe is available over here.

01:14:23.000 --> 01:14:32.000
Now. I should do what? So basically, my entire thing is running at port number 8000.

01:14:32.000 --> 01:14:36.000
And I have to make this port. And my system.

01:14:36.000 --> 01:14:43.000
Exposed towards our outer world. Outer world means over the internet, so that you will be able to test it right now.

01:14:43.000 --> 01:14:50.000
Right? You all will be able to test it now itself. While program is running in my system, so I have to make my local machine.

01:14:50.000 --> 01:14:58.000
Global, right? I have to make my local machine global. So, here, you should expose this particular port number.

01:14:58.000 --> 01:15:06.000
And this is where NGROG comes into picture. So whatever is running at this port number, you all will be able to access it by URL given by NGROG.

01:15:06.000 --> 01:15:14.000
So, just try to, like, open up your ngrock wherever you have an ngrock. Now, just type NGNGROK, ng rock.

01:15:14.000 --> 01:15:29.000
And then HTTP, so because it's running on HTTP, not on S, HTTP, and then it's running on port number 8000, right? Port number 8000. So by doing this, I'm trying to say that, okay, fine, so let's try to make it global.

01:15:29.000 --> 01:15:35.000
That whatever is running on my 8000 port, so NGRock will try to expose it over the internet.

01:15:35.000 --> 01:15:42.000
So now hit enter, and once you are going to hit Enter, this is your local host, right? 127.0.0.1.

01:15:42.000 --> 01:15:50.000
And this is the… HTTPS, as you can see, it's IS, right? S. So whatever is running on, like, HTTPS S.

01:15:50.000 --> 01:15:57.000
You will be able to access. Now, this is a global URL, guys, if I'm going to give it to you, right? You all will be able to access it.

01:15:57.000 --> 01:16:03.000
You have to give a proper route. Meaning is what? So you have to give a proper route, means.

01:16:03.000 --> 01:16:10.000
Only till this point, this URL is going to work. After that, to access my function, sudahanshu slash kumar XYZ. So, this is the.

01:16:10.000 --> 01:16:15.000
Total width input. This is the route, and if you are going to hit it.

01:16:15.000 --> 01:16:18.000
You will end up hitting My System. So click on Visit Site.

01:16:18.000 --> 01:16:28.000
Plus, for the first time, and then you can keep on hitting my system, and you will be able to get it, get the… Final result. And I'll show you live, see, people are hitting my system. I'm not doing anything, see?

01:16:28.000 --> 01:16:34.000
I'm not writing anything, I'm not doing anything, right? People are hitting my system. Some people are saying it's 404.

01:16:34.000 --> 01:16:46.000
So, after slash, you have to give a route, right? Lime juice less, so… to reach out, because that URL is only till port number. I have exposed it till port number.

01:16:46.000 --> 01:16:51.000
So, basically, I'm doing a port forwarding, yes. Got it? See, many people are trying to hit my system.

01:16:51.000 --> 01:17:04.000
You can see it live, yeah? So, technically. I have written a Python function, and I have exposed this Python function. Now, any one of you will be able to access it across the globe, right? Across the globe.

01:17:04.000 --> 01:17:09.000
And you will be able to execute your Python function. And the fun part is, you don't have to write a code in Python.

01:17:09.000 --> 01:17:13.000
Maybe if you have to, like, consume it through a Java, do it.

01:17:13.000 --> 01:17:25.000
You have the URL, right? You have the URL. If someone would like to access my function, maybe through C++, or maybe some other programming languages, you will be able to do it. Now, the URL which I have given to you.

01:17:25.000 --> 01:17:30.000
Till a route, till XYZ, right? Because after that, it's an input. That is API.

01:17:30.000 --> 01:17:38.000
4047 is trying to hit the system without giving a proper input. Give a proper input, you will be able to see 200. Otherwise.

01:17:38.000 --> 01:17:45.000
No.

01:17:45.000 --> 01:17:50.000
Give me Englog command. So it's nothing ngrocks, uh, space, HTTP, space, port number.

01:17:50.000 --> 01:17:55.000
So on whatever code you are running, you're, like, a program.

01:17:55.000 --> 01:18:01.000
So, are we able to relate now the theory and a practical.

01:18:01.000 --> 01:18:06.000
Are we able to relate now?

01:18:06.000 --> 01:18:11.000
What is port forwarding? So, basically, I have exposed my 8000 port to the entire world.

01:18:11.000 --> 01:18:15.000
That is a port forwarding. So technically, this one is called as.

01:18:15.000 --> 01:18:25.000
Board forwarding. C. So, basically. If anyone is going to hit this URL, so when you are hitting this URL, right, so you are reaching out to this location.

01:18:25.000 --> 01:18:38.000
So, it's called as forwarding.

01:18:38.000 --> 01:18:49.000
Virus detected while downloading an NGRock? I don't know, maybe you should, like, look into your system setting.

01:18:49.000 --> 01:18:59.000
Yeah, please share the expose command. I think I have already shared, uh, so… this one. It's not a command, it's just a URL, right?

01:18:59.000 --> 01:19:02.000
There is no command. Okay, exposed command, you're saying? Ngrock HTTP.

01:19:02.000 --> 01:19:08.000
And then, like, a port number, 8000.

01:19:08.000 --> 01:19:15.000
We'll talk about it in the future. As of now, without even authentication token, you will be able to push it.

01:19:15.000 --> 01:19:23.000
Authentication token will be required, so when you are hosting something on a, like, a cloud, so when you're trying to export something from a cloud server.

01:19:23.000 --> 01:19:32.000
But local authentication is not required.

01:19:32.000 --> 01:19:42.000
Fine, guys, yes?

01:19:42.000 --> 01:19:49.000
Yeah, make sure you're downloading from the official website. Exactly, NGRock has given you official website, so just go over there, download it.

01:19:49.000 --> 01:20:02.000
And if it is giving you some option, like a virus or something, switch it off your system, right?

01:20:02.000 --> 01:20:11.000
Fine, everyone? So most of you, I can see, like, you are able to do it. Some of you are stuck, maybe you got deviated here and there.

01:20:11.000 --> 01:20:25.000
Because of, uh, that, that may be the reason. Yeah. So, here, I'm able to, like, see, yeah, a lot of, like, a good hit. I'm able to get, like, 200, 200, 200, I'm able to see.

01:20:25.000 --> 01:20:30.000
Which is great. Fine. 200, 200, 200, so many people are able to.

01:20:30.000 --> 01:20:37.000
Hit my server. Now, let me… of it. So, Ctrl-JD.

01:20:37.000 --> 01:20:42.000
And now you will not be able to. Access it, yeah?

01:20:42.000 --> 01:20:49.000
So now everything is gone. Now you will not be able to hit my server. So… Technically speaking.

01:20:49.000 --> 01:20:54.000
We are able to create our very first API, yeah? We are able to create our very first API.

01:20:54.000 --> 01:21:00.000
Now, again, inside this one, while creating an API, there are multiple concepts which exist.

01:21:00.000 --> 01:21:06.000
Now, let's talk about that. So, here, we have written app.get.

01:21:06.000 --> 01:21:10.000
Yeah, we have written, basically, app.get. Now, there is something called as POST.

01:21:10.000 --> 01:21:17.000
There is something called as, like, a GET, and there is something called as post. Now, what is a difference between GET and POST?

01:21:17.000 --> 01:21:26.000
I want one more thing, right? One more thing. So, we are able to test it with the help of this URL, we are able to test it with the help of docs, or maybe Redoccs.

01:21:26.000 --> 01:21:31.000
There is another testing tool. Right? Which is called as Postman.

01:21:31.000 --> 01:21:36.000
So, you should download. Generally, ideally, I suggest people to download this postman.

01:21:36.000 --> 01:21:44.000
Even if Postman is not available, that's completely fine. I have a multiple ways of doing a testing. But yeah, Postman is one of the standard tools.

01:21:44.000 --> 01:21:56.000
That all the developer generally uses for API testing, because developer create a thousand of APIs, they have to maintain those logs and APIs, so Postman is basically a tool which will keep everything in one place.

01:21:56.000 --> 01:22:05.000
I'm not saying that Postman is the must tool, no, not at all. Like I said, so I have a multiple ways of doing that testing, or hitting my APIs.

01:22:05.000 --> 01:22:10.000
But yeah, Postman is one of the beautiful tools that people have created, so maybe you should go ahead and you should download it.

01:22:10.000 --> 01:22:23.000
Uh, it's very easy, it's available for all the systems, it's available for Mac machine, it's available for Linux, it's available for a… Windows, right? So, just go there and download a Postman. Search for the postman.

01:22:23.000 --> 01:22:30.000
It's a popular, very, very popular one, and those who do a development, so they must be aware about it. This is what I'm assuming.

01:22:30.000 --> 01:22:35.000
Right? It will just keep your things in one place. It gives you, like, multiple functionalities.

01:22:35.000 --> 01:22:43.000
Of doing a testing. So, download a postman, I believe in my system, Postman is already available. I think so, yeah.

01:22:43.000 --> 01:22:52.000
So Postman is already available. So, what Postman does… so, okay, I've already, like, done a lot of API testing.

01:22:52.000 --> 01:22:57.000
Okay, so what Postman does, by the way? So, let's suppose I'm on a home screen, right?

01:22:57.000 --> 01:23:00.000
So, with the help of this postman, you will be able to.

01:23:00.000 --> 01:23:09.000
Do a API testing, right? Do our API testing. So, how? Let me show it to you that part as well. So, let's suppose I'm going into any of my workspace.

01:23:09.000 --> 01:23:14.000
And then here there is a plus symbol, right? There is a plus symbol.

01:23:14.000 --> 01:23:20.000
Now, here you will be able to get get, post, put, uh, patch, delete, head, all of these options.

01:23:20.000 --> 01:23:28.000
So, as of now, the API which I have created, so basically, it's a GET API, right? It's technically a GET API. So, GET API.

01:23:28.000 --> 01:23:41.000
I have created, uh… Now, what is the meaning of get? I'll tell you, right? Now, here, so I can try to, like, do the same. Maybe I can try to remove A and B from here. I can try to give a key-value pair as an input.

01:23:41.000 --> 01:23:45.000
So, let's suppose if I'm… otherwise, it is already able to detect it, right?

01:23:45.000 --> 01:23:54.000
So maybe I can try to remove it from here, and key-wise, A is equal to… No, in both ways, it's completely fine. Uh, B is a key, and what is the value? I have to pass.

01:23:54.000 --> 01:23:59.000
Well, I have to pass it is equal to 7. And then I can try to click on.

01:23:59.000 --> 01:24:06.000
Ascender, but I have to change this URL, right? It's a ngrock URL, I have switched off my URL.

01:24:06.000 --> 01:24:13.000
So, HTTP colon slash slash 120, or localhost, LOCL, H-O-S-T, local, LOCL.

01:24:13.000 --> 01:24:25.000
Hust, column 8000 port number. Yeah, 8000 port number slash. So technically, it's running in my local host. I have switched off my NGRock, so now it's not global, now it's not live.

01:24:25.000 --> 01:24:34.000
And then I can try to pass these values. And, uh, okay, so A is equal to, let's suppose 7 I'm giving.

01:24:34.000 --> 01:24:41.000
And B is equal to, uh, like, uh, 9 I'm trying to give. So automatically, as you can see, it is trying to append inside the.

01:24:41.000 --> 01:24:45.000
Url, right? Automatically, it is trying to append inside the URL. Send.

01:24:45.000 --> 01:24:51.000
So, if all works well, you will be able to get the output. So, 9 plus 7 is equal to what? 9 plus 7 is equal to 16.

01:24:51.000 --> 01:25:05.000
So, even with the help of Postman, I'm able to test it, right? My GET request. So this is called as, like, I'm sending a request, and this is something called as a response. A request means I'm sending something, and then, like, response means I'm able to get some response.

01:25:05.000 --> 01:25:10.000
So even with the help of this postman, which is technically a tool.

01:25:10.000 --> 01:25:17.000
Now, I'm able to access my Python function, Pythonic function, and I'm able to execute it.

01:25:17.000 --> 01:25:22.000
So this is another way of doing a testing. Developers generally use it, use this particular postman one.

01:25:22.000 --> 01:25:28.000
It helps you out in terms of managing our multiple environments, and then, like, multiple flows, and then teams.

01:25:28.000 --> 01:25:36.000
So, it's basically make your life easy, because when it comes to creating an API, right, we actually create thousands of APIs, not just one.

01:25:36.000 --> 01:25:47.000
There'll be thousands of functions, thousands of different, different requirements, right, and we have to expose each and everything. So we end up creating a thousand… And when your number of API will keep on increasing, so it's very difficult to manage.

01:25:47.000 --> 01:25:54.000
Now, you will be having a tool. Postman, which is ideally free if you're not going with a team plan.

01:25:54.000 --> 01:26:00.000
Alright, uh, so, you will be able to use a postman.

01:26:00.000 --> 01:26:08.000
Is it necessary to pass the same key? Obviously, because how it will be able to understand that what is the value of A and B, and what is basically A?

01:26:08.000 --> 01:26:13.000
So you have to do a mapping, A and B. Then only it will be able to understand.

01:26:13.000 --> 01:26:21.000
Ngrock URL is not working in Postman. It works everywhere, but I have deactivated my NGRock.

01:26:21.000 --> 01:26:31.000
Right? So it will not work, actually. If you have your own ngrock URL, obviously it is going to work.

01:26:31.000 --> 01:26:37.000
So yes, this, technically, this entire URL, the highlighted part, right?

01:26:37.000 --> 01:26:42.000
This entire URL which I'm talking about. Uh, let me open up here.

01:26:42.000 --> 01:26:50.000
So, this entire URL, right, this entire URL is an API. Now, at this URL, at this API, right?

01:26:50.000 --> 01:26:57.000
My function is available. As you can see here, right, just see the URI API. So, it is available where?

01:26:57.000 --> 01:27:04.000
At our website, HTTPS this one. Api slash V1 slash Yuri slash chat slash completion.

01:27:04.000 --> 01:27:13.000
Why we have given this much of a route? Because we are not just having only one, right? We have multiple. So, we keep on giving a route so that, you know.

01:27:13.000 --> 01:27:26.000
Uh, anyone will be able to understand it, that, okay, fine, so at this location. So this is technically the… whole route. This is technically the whole route, right? So, it's running on this system. So, this is basically the highlighted one is a system.

01:27:26.000 --> 01:27:33.000
And then, this one is technically a route. Inside that system, at this route, at this location.

01:27:33.000 --> 01:27:43.000
Means, at this folder location, it is running. Similarly. This is basically a system, right? It will help you out to reach out to the system, and then inside our system, at this location, at this route.

01:27:43.000 --> 01:27:54.000
It is running. That is, this is what it means.

01:27:54.000 --> 01:28:09.000
Can this API access through a kernel? You can access it through anything, even through a curl, you all will be able to access the same, uh, like, uh… API. So, it doesn't matter whether you are hitting it through a curl, or maybe you are trying to hit it through anything else.

01:28:09.000 --> 01:28:16.000
For example, so, postmen, right? So, let's copy this one. Now, open up a CMD.

01:28:16.000 --> 01:28:22.000
And do curl over here. So, CURL curl.

01:28:22.000 --> 01:28:29.000
Go? This one.

01:28:29.000 --> 01:28:38.000
What is the issue, detail type missing, message failed, input null, B is, uh, operable.

01:28:38.000 --> 01:28:42.000
Is equal to 7, B is equal to this. Yeah, this is a good hit.

01:28:42.000 --> 01:28:47.000
It seems. My APIs are running right. Unprocessed entity.

01:28:47.000 --> 01:28:54.000
So, local LOCL, HOST, colon 8000 slash lanjo slash Kumar slash XYZ.

01:28:54.000 --> 01:29:01.000
Question mark is equal to 7. Yeah, it was working well in a postman.

01:29:01.000 --> 01:29:08.000
Oh, sorry. So, my bad… So I should keep it inside the…

01:29:08.000 --> 01:29:14.000
String. This is how curl works. Nausi, 16.

01:29:14.000 --> 01:29:24.000
Yeah? So even with the help of curl, right, I have given curl, and then I have given… Same thing, and I'm able to access it.

01:29:24.000 --> 01:29:29.000
So it doesn't matter, like, how you are going to hit it, you will be able to hit it, right? So, because it's an API.

01:29:29.000 --> 01:29:34.000
And it simply means I will be able to access from everywhere.

01:29:34.000 --> 01:29:43.000
Right? From any program, from any interfaces, without any kind of a restriction. So, whether it's a curl, whether it's a postman, whether it's a dock, whether it's a URL.

01:29:43.000 --> 01:29:54.000
Everywhere. Okay, now, so moving ahead, uh, here…

01:29:54.000 --> 01:30:02.000
So we have a method called as GET. Now, let's try to understand what is the meaning of a GET. So generally, uh, the common sense that we use to.

01:30:02.000 --> 01:30:08.000
Like, uh, receive from this word keyword called as GET is something we are trying to get.

01:30:08.000 --> 01:30:11.000
Right? Something we are trying to get. But there is a technical meaning to it.

01:30:11.000 --> 01:30:18.000
So, GET simply means that, in other ways, so GET simply means that, that we are trying to send a data.

01:30:18.000 --> 01:30:27.000
Right? Which will be exposed, which will be technically exposed to the wall. So, what the world will be able to see your data.

01:30:27.000 --> 01:30:33.000
This is the another meaning of a get. How and what I'm trying to say, let me prove it, right? Let me prove it.

01:30:33.000 --> 01:30:39.000
So here, let's suppose there is a Google, right? There is a Google. And if I'm trying to search over here.

01:30:39.000 --> 01:30:44.000
Uh, maybe a data… science, yeah? I'm going to search… so I went to Google.

01:30:44.000 --> 01:30:50.000
And then I'm trying to search data science. Now, you just observe this URL.

01:30:50.000 --> 01:30:59.000
So here, query is equal to data plus science. So, are you, like, can I say over here that whatever data which I'm trying to send.

01:30:59.000 --> 01:31:08.000
Right? It's visible to the entire world. Whatever data which I'm trying to send, technically, it's visible to the entire world.

01:31:08.000 --> 01:31:12.000
Yes, everyone? Technically, it's visible to the entire world.

01:31:12.000 --> 01:31:18.000
Yep. Okay. Now, at the same point of a time, let's go and do a Gmail.

01:31:18.000 --> 01:31:30.000
G-m-a-i-l dot com. Gmail.com. Now, even over here, so while signing up, so you try to pass your data, right? You try to pass your email ID, you try to pass your password.

01:31:30.000 --> 01:31:34.000
Will you be able to see that here inside this URL?

01:31:34.000 --> 01:31:40.000
No, never. Right? So, you are sending a data, basically, even in case of doing a sign-up.

01:31:40.000 --> 01:31:47.000
When you're trying to do a sign-up, so you are sending your data, sending your data means you are sending your, like, email ID, and you are sending your password.

01:31:47.000 --> 01:31:54.000
All of these things, even while you log in into a uron, you send out data. Maybe your phone number, then you receive a OTP.

01:31:54.000 --> 01:31:59.000
Or maybe you're, like, a Google login, right? So that, with the help of Google, we will be able to authorize you.

01:31:59.000 --> 01:32:05.000
So, you are sending a data in both the cases, but in one of the case.

01:32:05.000 --> 01:32:09.000
In one of the cases, your data is visible, right? In one of the cases, your dataset is visible.

01:32:09.000 --> 01:32:14.000
And in other case, data is not visible, so I can say it's a secured one.

01:32:14.000 --> 01:32:21.000
Right? It's a secured one. So here, wherever my dataset is visible, it's called as.

01:32:21.000 --> 01:32:30.000
Get a request. We are sending… let's… it's not secure. Anyone can see it. And here, so we are also sending a data, it's called as post.

01:32:30.000 --> 01:32:41.000
Means, we are attaching our data as a body. In a body, we are trying to attach a data, and then we are sending a data, so it will not be visible to the outer world, to any user.

01:32:41.000 --> 01:32:46.000
That what we are sending, like email ID and password, because this is the secure data.

01:32:46.000 --> 01:32:54.000
So, there is two differences you will be able to find out. One is a get, one is a post. Get is a non-secure. Post is basically sending a data via a body, which is technically a secure one. Now.

01:32:54.000 --> 01:32:59.000
How I will be able to create a post API. Let me show you that part as well.

01:32:59.000 --> 01:33:11.000
Are you able to understand the layman difference, guys? Just a layman difference, not much, yeah?

01:33:11.000 --> 01:33:18.000
Yep, everyone?

01:33:18.000 --> 01:33:24.000
50%. That's okay. So even 5% will be, like, a fine, because now you will be able to understand 100%.

01:33:24.000 --> 01:33:42.000
Yeah?

01:33:42.000 --> 01:33:48.000
Okay, so let's… let's try to, like, understand that how I will be able to, you know.

01:33:48.000 --> 01:33:59.000
Uh, basically send a post, and how that is going to be secure, and then eventually, uh, we'll try to understand that how we are going to even test those part via kernel.

01:33:59.000 --> 01:34:06.000
Uh, maybe via postman, and maybe, like, via XYZ things, right? How I will be able to.

01:34:06.000 --> 01:34:10.000
Uh, like, uh, do it. Let's try to understand that particular part.

01:34:10.000 --> 01:34:24.000
So, GET is nothing but… GET is an unsecured way of sending a data, as we can see. So basically, when you do a Google search, it's actually a GET. You are sending a data, you are hitting a Google server, and then Google… so, basically, that is a request, and then in a response, it will give you the list of the pages.

01:34:24.000 --> 01:34:33.000
Simple, right? So, it is executing some function, it is trying to do some sort of a search function, right? That search function is trying to search all those pages.

01:34:33.000 --> 01:34:41.000
The 11 pages based on your query, and then you will be able to get that data. This is what happens, even in terms of a Google, even in terms of any kind of a things.

01:34:41.000 --> 01:34:45.000
Now, uh, so this is GET, I'll leave it as it is.

01:34:45.000 --> 01:34:54.000
I'll try to create another function, so def. Let's suppose our subtract function I'm going to create, yeah? Subtract function I'm going to create.

01:34:54.000 --> 01:35:07.000
And then here, so function is very simple. Subtract is going to take, again, 2 data, A and B, and it is going to return A minus B. As simple as that, yeah, so this is a very simple plain function I've created, a very small one.

01:35:07.000 --> 01:35:20.000
Now, I have to convert this function. Right, as an API. I have to convert this function as an API so that, you know, it will be able to, like, uh, do something.

01:35:20.000 --> 01:35:31.000
Masking, user remains… Okay.

01:35:31.000 --> 01:35:41.000
Fine, guys, everyone? Yeah? So just do it with me. Okay, so here, we have written a very simple function, subtract.

01:35:41.000 --> 01:35:49.000
Right? We have written a very simple function called a subtract, and then it is going to do nothing, take two inputs, and then subtract it, given the output. As simple as that, give me that return.

01:35:49.000 --> 01:36:00.000
Now I have to convert that as an API, so I know this particular manner, right? I know this particular way that, okay, fine, so I can convert that as an API in this manner. But yeah, this is a GET. Get means.

01:36:00.000 --> 01:36:09.000
So, whenever I'm sending a data, it will be exposed, and we are able to see it. We are attaching our data in a URL itself, right? So, everywhere we are trying to attach our data into a URL.

01:36:09.000 --> 01:36:16.000
And then we are, like, trying to do this, uh, request, right? Then we are trying to do this kind of a request.

01:36:16.000 --> 01:36:24.000
Otherwise, we are not able to do the request. So, the secure way will be post, so I have to convert this entire thing as a post.

01:36:24.000 --> 01:36:36.000
So maybe I can call app… dot post, right? Post, and then I can give my path, whatever path I want, so maybe I'm giving slash SUBTRSCT subtract.

01:36:36.000 --> 01:36:41.000
Okay? Fine. Cool. So I have given this path called as subtract.

01:36:41.000 --> 01:36:46.000
And, uh, now, I'm assuming that, that it will be exposed. Let's go and let's try to check.

01:36:46.000 --> 01:36:54.000
So I have just saved it, and it will start automatically. Otherwise, I have to write, like, a UV core test colon app, and then reload.

01:36:54.000 --> 01:37:00.000
But yeah, so it is… it has reloaded automatically. So this is the function which I have created, guys, a very, very simple function.

01:37:00.000 --> 01:37:04.000
Right? I'll subtract, and the only changes which I have done over here is that.

01:37:04.000 --> 01:37:13.000
App.post. Last time, it was get. Now, let's go to the URL, right? Let's go to the URL, localhost.

01:37:13.000 --> 01:37:21.000
8,000, or maybe 127.0.0.1. So, 8,000. And let's try to access Swagger.

01:37:21.000 --> 01:37:26.000
Ui. So, D-O-C-S. Dogs.

01:37:26.000 --> 01:37:37.000
Let's try to access dogs. So, I have created two functions, right? So, one function is hosted at this URL, so slash Kumar slash XYG, that was a get one, and then I have a second function called as post.

01:37:37.000 --> 01:37:40.000
I can click over here, I can try to expand it.

01:37:40.000 --> 01:37:45.000
Now, so, this subtract function. Is available at slash subtract.

01:37:45.000 --> 01:38:00.000
Because this is what I have written at this route, this is available, same as before. Now here… So here, I can click on try this out, and maybe I can try to pass a value of A is equal to 5, value of B is equal to 2.

01:38:00.000 --> 01:38:08.000
And then, if I'm going to click Execute. Now, this is the curl it is trying to do. This is the curl it is trying to do, and eventually.

01:38:08.000 --> 01:38:15.000
I'm able to get this particular output. Yeah? Eventually, I'm able to get this particular output.

01:38:15.000 --> 01:38:24.000
Now, last time, let's suppose this is the GET function, and if I'm going to click on try this out, if I'm going to pass some sort of a data, and call execute.

01:38:24.000 --> 01:38:32.000
The only difference was this GET. It was calling GET last time, right? It was calling GET, I was able to get the response over here.

01:38:32.000 --> 01:38:39.000
And even this time, so when I'm trying to pass the data, so the only difference I am able to see, or I'm able to observe over here.

01:38:39.000 --> 01:38:45.000
That it's a calling post, right? In both the cases.

01:38:45.000 --> 01:38:50.000
I am able to get the data. Right? In both the cases, I'm able to get the.

01:38:50.000 --> 01:38:58.000
Data. Now. How these two things are different. So, obviously, one is GET, one is post.

01:38:58.000 --> 01:39:05.000
Now, let's do one thing. So, I'll copy the same URL, right? I'll copy the same URL, and I'll try to hit it here.

01:39:05.000 --> 01:39:12.000
Simple, right? Call, subtract, and hit it here. Now, when you are trying to hit it through this URL.

01:39:12.000 --> 01:39:18.000
It is giving you what? Method not allowed.

01:39:18.000 --> 01:39:21.000
This is the difference. This is the difference between GET and POST.

01:39:21.000 --> 01:39:26.000
So, here, I'm trying to expose my data, because I have to send the data, right?

01:39:26.000 --> 01:39:32.000
So, to execute this function, if I'm not sending a data, function will not be executed. That's a problem.

01:39:32.000 --> 01:39:37.000
Right? Now, when I'm sending a data, it is telling me that, no, it's not allowed.

01:39:37.000 --> 01:39:47.000
So, you are not supposed to expose your data into a URL. This is what it is trying to say, because you have created this subtract function.

01:39:47.000 --> 01:39:54.000
And you have exposed it via what? Post, not via GET. That's the difference between GET and POST. Are you able to get it, guys?

01:39:54.000 --> 01:39:59.000
A difference between GET and POST. So, see, in both the way, I'm trying to expose my function.

01:39:59.000 --> 01:40:09.000
Simple, right? The only difference is that, that. One is allowed in a URL, another one is not allowed. Yes, I will be able to test it in a postman, I will be able to test it into a…

01:40:09.000 --> 01:40:19.000
Curl, I will be able to call it through maybe, like, any, like a programming language, that's completely fine. In a URL, it will not be allowed.

01:40:19.000 --> 01:40:30.000
Yes? In a URL, because I have created this function, which is hosted as a sub… which is hosted at this particular URL, slash subtract URL, but it… in nature, it is basically a post.

01:40:30.000 --> 01:40:40.000
That's in nature, technically, it's a post. Which I've created. So, post means you should not pass any data as an exposed one. You should pass a data in a… as a body.

01:40:40.000 --> 01:40:46.000
Basically, as a body. So how I will be able to test it, right? How I will be able to test it.

01:40:46.000 --> 01:40:52.000
Through a postman. Let's try to understand. So, first of all, if you'll come to Postman.

01:40:52.000 --> 01:40:56.000
You can't do GET. You should select, first of all, post.

01:40:56.000 --> 01:40:59.000
Fine? You should select what? You should select, first of all, post.

01:40:59.000 --> 01:41:02.000
Are you able to look at it, guys? What I'm trying to explain to you?

01:41:02.000 --> 01:41:10.000
Yeah? So you should select, first of all, post. And then, here, the URL. So, URL till what? Url till subtract. So that you will be able to reach out to the.

01:41:10.000 --> 01:41:18.000
System, right? System, and then… a function. Simple, localhost rate000 means system, and then function.

01:41:18.000 --> 01:41:28.000
And then what you have to do, so as it's a post one, as it's a post one, so you should not pass a parameter. It is not going to work, because this parameter is basically for a.

01:41:28.000 --> 01:41:38.000
Get method. You should click on body, right? You should click on body, you should click on raw, so body, raw, and then you can try to pass as a.

01:41:38.000 --> 01:41:47.000
Json, means key-value pair. So, how? So maybe this is how you can try to write. So A, right? So, A is equal to maybe 6.

01:41:47.000 --> 01:42:01.000
This is called as body, right? This is called as body, by the way. And B is equals to what? Maybe B is equals to 2, right? So this is called as body. So, body… Raw JSON.

01:42:01.000 --> 01:42:05.000
Right? Json. So, in JSON format, you should pass this data as of now.

01:42:05.000 --> 01:42:24.000
Let me ping you this, uh… like, data pass, yeah. So this is the data that you will pass. Now, if you are going to send.

01:42:24.000 --> 01:42:32.000
What is missing? 6 and 2, I'm able to pass, so why it is telling me that it's missing. Unprocessed entity.

01:42:32.000 --> 01:42:39.000
I missed something. Http localhost 8000 slash. Subtract. Yeah, looks good.

01:42:39.000 --> 01:42:51.000
So why it is giving me 422. Like this.

01:42:51.000 --> 01:43:18.000
25, 10.

01:43:18.000 --> 01:43:25.000
Mmm… it is not able to understand why.

01:43:25.000 --> 01:43:35.000
Data tribe, yeah, so query a field, this one…

01:43:35.000 --> 01:43:45.000
It's a good pass, it seems.

01:43:45.000 --> 01:43:56.000
More dirty, raw… JSON is correct.

01:43:56.000 --> 01:44:09.000
Value of A, value of B. Yeah, everything seems to be right. I don't know why it is giving me an error. So, POST is fine, this is fine, like.

01:44:09.000 --> 01:44:22.000
So, good hit. It was all just on… Wayne.

01:44:22.000 --> 01:44:52.000
Why it is giving me this response?

01:45:05.000 --> 01:45:22.000
Let me pass A is equals 2. It should work, it should not give me this issue, by the way.

01:45:22.000 --> 01:45:40.000
Location query B is missing. No, it's not missing.

01:45:40.000 --> 01:45:56.000
And, uh, GET was…

01:45:56.000 --> 01:46:07.000
Okay, so I have a fix for this one, and I think I can try to fix it. So, it is not able to understand this data. Let me show you the curl part, and then I'll try to fix this problem.

01:46:07.000 --> 01:46:16.000
Let me fix it with respect to this one. So, all these things are… hits are good. Uh, there is no changes, because this is cool and, like, this is good.

01:46:16.000 --> 01:46:26.000
Uh, even I'm trying to do a post method, everything is okay. I'll tell you why it is not working. So there is something called a spyntic issue. Because of that, it is not working.

01:46:26.000 --> 01:46:33.000
Uh, so I'll come to that point. But yeah, so… With the help of this Swagger UI, I'm able to access it, I'm able to hit it, so that is good.

01:46:33.000 --> 01:46:39.000
Now, let's try to do a curl, and let's see that whether with the help of curl, I will be able to hit it or not.

01:46:39.000 --> 01:46:45.000
So, just try to open up a CMD, and then… just try to do a cancel, and uh…

01:46:45.000 --> 01:46:55.000
Gone… So, maybe I have to…

01:46:55.000 --> 01:47:00.000
Call this…

01:47:00.000 --> 01:47:10.000
Only till this point, we can… All of this are anyhow not required.

01:47:10.000 --> 01:47:15.000
Header and D.

01:47:15.000 --> 01:47:21.000
Yeah, so we are basically trying to do a curl over here, and in the old fashion, right? In the old fashion, so curl exposed.

01:47:21.000 --> 01:47:25.000
And as you can see, like, uh, it is not working.

01:47:25.000 --> 01:47:33.000
So, even in case of a curl, in case of a get, everything was working, but yeah, so when I have, like, started doing something called as a post.

01:47:33.000 --> 01:47:40.000
So, it has started giving me a… problem, technically, right? So, it is… it has started giving me the problem.

01:47:40.000 --> 01:47:52.000
So, here, how I will be able to fix it, right? How I will be able to fix this particular problem, because I have seen that in a postman, it is not working, even when I'm trying to do a curl.

01:47:52.000 --> 01:48:02.000
So, it is not working, right? It is not working. So, to make it up and running, and to make it work.

01:48:02.000 --> 01:48:12.000
There is something called as pyrentic. So, that I have to handle, and with the help of that, I can make it working. So what is the meaning of Pydentic, by the way?

01:48:12.000 --> 01:48:23.000
So, pairedic is, again, a set of the rule, a library which try to, like, you know, give you a set of the rule by which you will be able to set a data type.

01:48:23.000 --> 01:48:31.000
Right? You will be able to set a data type in a pyntic way. How we can do an implementation? So, do an implementation. So, you have to.

01:48:31.000 --> 01:48:40.000
Like, a call from Pydentic. Bydn TIC, pyrintic, and then you have to import a base class.

01:48:40.000 --> 01:48:49.000
And, uh, how I will be able to use this part intake. So, just try to create your own class. So, let's suppose I'm creating a class.

01:48:49.000 --> 01:48:54.000
Subtract, uh… subtract model, let's suppose, yeah?

01:48:54.000 --> 01:49:07.000
So, subtract model, I'm trying to create, and I'm trying to inherit, basically, this base model, so that this class, the my own custom class, will be having an idea about this entire rule, rules and regulations.

01:49:07.000 --> 01:49:12.000
And here, as I know that I'm going to pass, basically.

01:49:12.000 --> 01:49:18.000
A and B, and A as an integer, I'm going to pass, and B as an integer, I'm going to pass.

01:49:18.000 --> 01:49:24.000
So, what I have done, so I have just defined A is equal to integer, and B is equal to integer.

01:49:24.000 --> 01:49:35.000
And whenever you are going to send a data. It will be looking for a validation, that, okay, A should always be integer, and B should always be integer. So basically, this spyntic class, which I'm trying to create.

01:49:35.000 --> 01:49:41.000
And I'm trying to align with the parentic rule. It is just going to help me out in terms of validation.

01:49:41.000 --> 01:49:49.000
Nothing else, right? Nothing else. And which is required for the post. Forget it was not required, right? Get is but not required, but as post is our most secure one.

01:49:49.000 --> 01:49:54.000
So you have to attach, basically, a pyrentic over here, and with the help of this pydentic.

01:49:54.000 --> 01:50:02.000
Right? With the help of this Pyntic, you will be able to achieve whatever you want. How? Let me show you that part.

01:50:02.000 --> 01:50:09.000
So here, let's suppose I have created a simple plane subtract function, right? It's a simple plane subtract function.

01:50:09.000 --> 01:50:18.000
Now, how it will be able to understand that, uh, okay, so use a pyntic. So here, just try to create another function, def.

01:50:18.000 --> 01:50:26.000
Subtract number, let's suppose, right? And then here, so just try to write model subtract.

01:50:26.000 --> 01:50:33.000
Subtract function you are trying to call, which needs A and B, so you are trying to call model.a.

01:50:33.000 --> 01:50:40.000
And model.b. Just try to understand in this way, guys, yeah? So… This is my function, original function.

01:50:40.000 --> 01:50:49.000
I'm trying to call that original function over here. Now, this original function takes two inputs, A and B. So, okay, I'm trying to pass A and B, but how?

01:50:49.000 --> 01:50:54.000
Right? How? So, first of all, data will come here. Data will come here. It will validate.

01:50:54.000 --> 01:51:05.000
It will validate. So this is our parent tick. This is our parent tick implementation. So Pyntic is, again, another library, which is going to help me out in terms of a data validation. And going forward, even in LangChain, Langraph, Llama indexes.

01:51:05.000 --> 01:51:12.000
We will end up using multiple times this pyntic, right? Multiple times, not just one or two pide intake. So, you will be able to see many examples.

01:51:12.000 --> 01:51:26.000
So, data will come, first of all, here, and it is going to validate that, okay, A is equal to integer, and B is equal to integer. So whether it's an integer or not, only that validation it will do. If data someone has passed, and data is available in some different format, it will not be able to accept.

01:51:26.000 --> 01:51:34.000
And once it will be passed over here, so I'm trying to create a function, and I'm trying to give access to the model, subtract model, this one.

01:51:34.000 --> 01:51:46.000
And now, this model variable, model.A, means whatever data which came here, just try to access A out of it, and then B out of it. So, this is called as partenting implementation.

01:51:46.000 --> 01:51:57.000
Which I'm using for our data validation in the first place. Okay, now, so once this is created, now expose it as a, like, a… expose it as a, like, a UAPI.

01:51:57.000 --> 01:52:03.000
So, app.pust, and then… Slaz?

01:52:03.000 --> 01:52:14.000
Subtract, yeah? So, this is the function available at this API, at this location, and technically, this is calling my function, original function, and technically, it's using a parent equal.

01:52:14.000 --> 01:52:21.000
Now, Ctrl-S, right? Ctrl-s.

01:52:21.000 --> 01:52:28.000
Now, UVicon Test App Reload. So just try to execute it. And let me give you this piece of the code.

01:52:28.000 --> 01:52:36.000
So that, in parallel. You all will be able to do this experiment. So I've given you the code, guys. So, I have a GET as well as I have a post over here.

01:52:36.000 --> 01:52:44.000
Now, what I will do, so localhost 8000 subtract, now let's try to send. And see, my issue has fixed.

01:52:44.000 --> 01:52:49.000
That was the issue. So, basically, when I'm trying to do a post.

01:52:49.000 --> 01:52:55.000
It requires a check. Check on the data that you are trying to pass.

01:52:55.000 --> 01:53:07.000
It requires a validation. It's a secure one, right? And nowadays, almost all the framework is like a using up identity one. Nowadays, everyone has implemented the pytentic in a Python, so they say that, that, okay, fine, so first validate, and then pass.

01:53:07.000 --> 01:53:13.000
So this is what my pyrentic is trying to do, and now my same issue, same code, everything is same, I'm not saying anything.

01:53:13.000 --> 01:53:22.000
Right? It was post, it was the same URL, right? And, like, I was able to, like, send this data, same data, and now my issue is gone. I'm able to get my output.

01:53:22.000 --> 01:53:30.000
So I'm able to technically test my API. The only issue was what?

01:53:30.000 --> 01:53:39.000
So, whenever you are trying to create a post method, so you have to pass a data inside it with the help of parenthes, you have to do a data validation with a pyntic.

01:53:39.000 --> 01:53:43.000
One, and then only you will be able to pass a data.

01:53:43.000 --> 01:53:49.000
And you will be able to test it in case of post. In case of Git, it's not required, it's completely fine, you can leave it.

01:53:49.000 --> 01:53:56.000
So this is our body. Right? This is the body parameter which I'm trying to pass. So I'm trying to pass a parameter via…

01:53:56.000 --> 01:54:07.000
Body. So, body, raw, JSON. Is it making sense to all of us guys?

01:54:07.000 --> 01:54:16.000
Yep. Now, if I'm going to do a curl, see, even curl is working now.

01:54:16.000 --> 01:54:23.000
Sorry, Carl was working even for, like, before. So, here, if I'm going to do…

01:54:23.000 --> 01:54:34.000
Let me show it to you. Okay, so in this way, curl is telling me that methods are not allowed. Obviously, method will not be allowed, because.

01:54:34.000 --> 01:54:39.000
I have to send our data via body. Yeah? So, I have to send the data via body.

01:54:39.000 --> 01:54:43.000
Let me show it to you. So, is it… is it working? Are we able to test it through a postman?

01:54:43.000 --> 01:54:49.000
Everyone?

01:54:49.000 --> 01:55:03.000
Yeah?

01:55:03.000 --> 01:55:14.000
Yes? So, here, if I have to, like, test this same thing via curl, so how I can write it, or how I can do it, let me write it down, let me show it to you.

01:55:14.000 --> 01:55:26.000
Cls clear, yeah. So, first of all, I'll write curl, and then inside the string, I can try to write my URL. So this is my URL, localhost colon 8000, subtract, right? So this was technically my URL.

01:55:26.000 --> 01:55:36.000
Now, here, so I can try to give a data, so to give a data, slash D is a, like, basically this is a notation for giving a data.

01:55:36.000 --> 01:55:44.000
So, to pass a data. Now, let's try to pass our data over here. So, I will try to pass a data as a JSON, as a key-value pair, so A.

01:55:44.000 --> 01:55:48.000
And A is equal to what? So, A is equal to, let's suppose, like, a 3.

01:55:48.000 --> 01:55:55.000
And then, B, I'm going to pass. So, B and B is equals to what? So, B is equal to, let's suppose, 2 I'm going to give.

01:55:55.000 --> 01:56:02.000
Right? This one. So in this way, I can try to pass a data. Hyphen D means passing a data over here.

01:56:02.000 --> 01:56:08.000
Hit enter, sorry. I have to even write post-right.

01:56:08.000 --> 01:56:13.000
So, method type is what? So, hyphen. X, B, O.

01:56:13.000 --> 01:56:22.000
Ost, post. Input should be a validated one. What is an issue?

01:56:22.000 --> 01:56:34.000
Well, it should not give me issue, by the way. I think I have written the correct curl.

01:56:34.000 --> 01:56:39.000
Uh, I have to attach header as well, let me attach it.

01:56:39.000 --> 01:56:48.000
So, data, header, let me pass. Again, uh, issue…

01:56:48.000 --> 01:56:56.000
Let me test it.

01:56:56.000 --> 01:57:09.000
Mmm… it is not able to bypass my pyntic. That's a whole issue.

01:57:09.000 --> 01:57:17.000
This one… And this one…

01:57:17.000 --> 01:57:26.000
Plus… slash…

01:57:26.000 --> 01:57:35.000
Hmm, now it's working. So, basically, there was an issue with the Pyntic, uh, I have to pass a data so that it will be able to parse my entire, like.

01:57:35.000 --> 01:57:42.000
Data set as an integer. So basically, our new line. So I've written, like, new line, new line, new line, new line, something like this I have written.

01:57:42.000 --> 01:57:49.000
So this is a curl command, guys, to… Test this one. Test this entire thing, yeah?

01:57:49.000 --> 01:57:56.000
This is the call command. But again, not very different, so I'm able to, like, uh…

01:57:56.000 --> 01:58:05.000
Best as a curl, I'm able to even test from the postman. So, Postman is one of the neat and clean and the simple one, by the way. So, whenever you're testing it, something, some APIs with the Postman.

01:58:05.000 --> 01:58:13.000
Uh, if… your API is good, then Postman is the easiest possible way by which you can test it.

01:58:13.000 --> 01:58:21.000
But now, I believe we all are able to understand that what is the difference between POST and GET, and whenever we are trying to create a POST API.

01:58:21.000 --> 01:58:28.000
So, what we are supposed to do, and whenever we are trying to create a GET API, what we are supposed to do?

01:58:28.000 --> 01:58:36.000
So both is done. Now, the… another one is called as put and delete. So, maybe it's a time now. Uh, we'll try to talk about this put and delete.

01:58:36.000 --> 01:58:43.000
Tomorrow, uh, the whole idea and intention was to explain you and to teach you that, uh, what is an API.

01:58:43.000 --> 01:58:49.000
And hope, after today's class, all of you are able to understand, and where we are going to use it.

01:58:49.000 --> 01:59:01.000
So technically, everywhere, right? Technically, everywhere we are going to use an API. Now, if you will go to, right, now, if you will go to Euron.

01:59:01.000 --> 01:59:03.000
If you will go to Euron, and if you'll go to Yuri API.

01:59:03.000 --> 01:59:08.000
And then, if you will look into this one, like, uh, endpoints, right?

01:59:08.000 --> 01:59:17.000
You all will be able to understand. That, what is the meaning of this one, right? What is the meaning of this URL? What, technically, this URL is trying to do?

01:59:17.000 --> 01:59:22.000
Where we are trying to do a curl over here, right? I can just copy the same codebase, I can ask that, that, okay, convert that into a Pyth.

01:59:22.000 --> 01:59:37.000
We know that, that we just need a URL, right? And if it is a secured one, then token, and then… A body, where we can try to pass our input. That's it. And we all understand now that what is the… ideally, what is the meaning of it, right?

01:59:37.000 --> 01:59:40.000
Again, for embedding, right? So, what is the meaning of it? We know.

01:59:40.000 --> 01:59:47.000
So, we are trying to hit our function with this URL, right? We are trying to hit a function with this URL.

01:59:47.000 --> 01:59:54.000
Uh, we are trying to pass our password over here, right, inside a header, and then as a data slash hyphen demands data.

01:59:54.000 --> 01:59:59.000
Right? It's a post method, it's a post method, right? So, as a data, we are trying to pass these two data.

01:59:59.000 --> 02:00:09.000
Very simple, right? Very simple. This is what it means. Yeah? Now, if I look into this speech API, right, we have given you a, like, a text-to-speech as well.

02:00:09.000 --> 02:00:20.000
So, speech, uh, function is available at this location. Yes, speech function is available at this location. We are trying to pass our header. Header means we are trying to pass our, basically, token, password, basically, and then.

02:00:20.000 --> 02:00:30.000
We are trying to pass our input data, hyphen d. Hyphen D means input data we are trying to pass. So, these are the key and values we are trying to pass. So, we will be able to understand even this one.

02:00:30.000 --> 02:00:35.000
If I have to call this one as a Python code, as a Java code, not an issue at all.

02:00:35.000 --> 02:00:42.000
Yes, I will be able to call it. Now, if I'll come to this image API, which is going to generate an image for me.

02:00:42.000 --> 02:00:49.000
Technically, this image API is going to generate an image for me, right? So my image generation function is available at this location.

02:00:49.000 --> 02:00:54.000
This is the API which I'm trying to pass, this is… the API key, and this is the data.

02:00:54.000 --> 02:01:05.000
Right? So, model, and then number of images, size, quality, responses, and then eventually this is going to generate an image for me. Now, if I have to call it as a Python function, not an issue at all.

02:01:05.000 --> 02:01:09.000
I will be able to call it as a Python function, right? Now, if you will come even inside the code example.

02:01:09.000 --> 02:01:14.000
So here we have given you, uh, like, a Python, JavaScript, and curl.

02:01:14.000 --> 02:01:23.000
Right? So, I've given you three, let's suppose, but yeah, doesn't matter which programming language you are going to use, you all will be able to use it.

02:01:23.000 --> 02:01:34.000
Yes? And even without using a programming language, let's suppose I have to hit it through a postman. I can hit it through a postman, I can try to test it through a postman.

02:01:34.000 --> 02:01:39.000
Are we able to understand it, guys? Overall, like, what is the concept behind an API?

02:01:39.000 --> 02:01:46.000
And how does API actually work in a backend? Are we able to understand, are we able to get that point?

02:01:46.000 --> 02:01:51.000
Yes? So any no, any no inside the class, I can say all, yes, yes, yes, yes, yes.

02:01:51.000 --> 02:01:59.000
Yeah? So we are able to create our own API, we are able to test our own API, so two kinds of API, one is a GET, one is a POST we have created.

02:01:59.000 --> 02:02:04.000
Yeah? Tomorrow, I'll be discussing about put and, uh, sorry, I'll try to… yeah, put and delete.

02:02:04.000 --> 02:02:12.000
Support is nothing but update, and delete means delete. But I'll show you, like, how to do it.

02:02:12.000 --> 02:02:23.000
Yes? Yes, but needs some simple docs or node 2. Why do you need a… are you sitting in a school or college class? Where do you need, like, where you need a doc, like…

02:02:23.000 --> 02:02:28.000
Uh, you know, notes of each and every, like, uh, things that I'm going to teach.

02:02:28.000 --> 02:02:36.000
Wherever notes will be required, I'll upload the nodes. But again, don't keep this kind of expectation, at least in my class. I don't teach in that way.

02:02:36.000 --> 02:02:46.000
Then I'll teach you how… I'll give you a lecture for 2 hours, then I'll prepare the notes for you, I'll give you even a note which you will dump inside some of XYZ directories, which you will never look into.

02:02:46.000 --> 02:03:01.000
Right? It's a practical thing which I'm trying to teach you, and if you have this kind of a mindset that, okay, you will try to take a note of each and everything, and that too, even for, like, a practical thing which I'm going to teach you, believe me, you will never be able to learn.

02:03:01.000 --> 02:03:07.000
You're not going to give some UPSC exam, or maybe it's your 10th and 12th exam. You are going to build a product, right?

02:03:07.000 --> 02:03:18.000
Now, to build a product, you need a practical. Yeah, so leave that mindset. If you have that kind of a mindset, the old mindset, the rote learning kind of a mindset.

02:03:18.000 --> 02:03:21.000
With this, you will never be able to survive in a tech industry, at least.

02:03:21.000 --> 02:03:51.000
Never. Okay, so…

02:04:02.000 --> 02:04:13.000
Okay, so now it's assignment time, guys, so I'm giving you assignments so that, you know, you will be able to create an API, and then you will be able to, like, test each and everything on your own.

02:04:13.000 --> 02:04:30.000
And that assignment that you have to do. So let's just wait for some time.

02:04:30.000 --> 02:04:36.000
And just do this assignment, after this, you will be able to understand. So, if you are not able to understand, maybe 1 or 2%.

02:04:36.000 --> 02:05:06.000
You will be able to understand it in an easiest possible way.

02:05:17.000 --> 02:05:25.000
So, let me give you an assignment. So this is a question number one.

02:05:25.000 --> 02:05:32.000
That you have to do?

02:05:32.000 --> 02:05:41.000
This is, uh, question number 2. That you have to do?

02:05:41.000 --> 02:05:50.000
And this is basically a kosher number 3. Yeah, these are question number 3.

02:05:50.000 --> 02:05:57.000
So, it's very simple. The very first one that, uh, the very first assignment question that we have given to you is create a FastAP application that exposes a post endpoint.

02:05:57.000 --> 02:06:19.000
To multiply two numbers. So, already we have done for subtraction and addition, get and post. So, just have to do a multiplication, and then the route is going to be slash multiply, and you have to test it via the post curl and Python. So, just, like, do this part. Then, second one is basically a calculator API. So, in a calculator, you have to create an addition, subtraction, multiplication, division, or any n number of other functions.

02:06:19.000 --> 02:06:25.000
And then all of those functions you should be able to access it through an API, fine? So, all this detail is given over here.

02:06:25.000 --> 02:06:32.000
Then third one is basically a user registration. So, whenever you go to any website and register yourself for the very first time.

02:06:32.000 --> 02:06:48.000
So, basically, you will try to enter your detail, maybe a username and mobile number, or maybe a location, each and everything, we try to enter, and that goes into a databases, right? So, it is going to hit some APIs, and then we send our data into our databases, so that it will be able to store it into our databases.

02:06:48.000 --> 02:06:56.000
Now, here, so you just have to create, like, a POST function, because you are sending a user email ID and password, so that should be a post, that should not be GET.

02:06:56.000 --> 02:07:04.000
By the way, because now we understand what is the difference between get and post, so you have to create, basically, a post where you are sending a data, email ID, password, and a user name, and.

02:07:04.000 --> 02:07:11.000
Uh, technically, like, uh, from other ends, so you are able to get some sort of a message saying that, okay, fine, so it's the correct user ID, phone number.

02:07:11.000 --> 02:07:24.000
And whatever it is. So, just try to, like, create an API, and then… API.

02:07:24.000 --> 02:07:33.000
Assignment. Question.

02:07:33.000 --> 02:07:40.000
So after that, I don't think that any one of you will face any kind of an issue.

02:07:40.000 --> 02:07:51.000
So, where is the file? Ctrl-s…

02:07:51.000 --> 02:07:59.000
D-type downloads, okay. C, D…

02:07:59.000 --> 02:08:10.000
Download… API…

02:08:10.000 --> 02:08:25.000
Yeah.

02:08:25.000 --> 02:08:30.000
Okay, so I have just given you the assignment question inside your group. That's the first part.

02:08:30.000 --> 02:08:38.000
Now, it will be… your assignment will be uploaded even inside your dashboard. So, once we are going to upload a.

02:08:38.000 --> 02:08:49.000
Recorded. So I think we all know that recording will take some time, maybe 2 to 3 hours of time, and I don't want you to wait for that long. Maybe you can start completing your assignment now itself.

02:08:49.000 --> 02:09:03.000
So that's the reason, so I'm pinging you the entire assignment question. Even… Here, so that you all will be able to download it. So, let me ping you inside a Zoom. I have already pinged you even inside your.

02:09:03.000 --> 02:09:33.000
Group.

02:09:39.000 --> 02:09:43.000
Yeah, so it's available inside of Zoom, so now you can download.

02:09:43.000 --> 02:09:51.000
I think it's showing me network, disconnected, click to retry.

02:09:51.000 --> 02:10:06.000
There is some issue with the Zoom upload. I can just copy it and paste it.

02:10:06.000 --> 02:10:15.000
Zoom, unable to find assignment. Yeah, I'm just trying to copy and paste it, and it's very long, so it's not allowing me, it seems.

02:10:15.000 --> 02:10:22.000
So, here is a question number 1. I can't paste all of these messages together, so here is a question number 2.

02:10:22.000 --> 02:10:35.000
And here's a question number 3. Now, whenever I'm going to upload the recording, which will take eventually, like, a… 2, 3, 4 hours. The last time, Saturday it was quick, but yeah, on Sunday, so it was giving…

02:10:35.000 --> 02:10:44.000
Has some issue with respect to a DRM system. But yeah, it will be available by evening, so along with that, I will be uploading this one. Plus, I will be uploading.

02:10:44.000 --> 02:10:54.000
This one as well, this material. So whatever I am going to dis… whatever I have discussed, so I'll be uploading even a codebase. Code base will be uploaded.

02:10:54.000 --> 02:11:00.000
Inside your recording. So, here, API…

02:11:00.000 --> 02:11:07.000
Theory. Bye.

02:11:07.000 --> 02:11:14.000
So, API theory, your assignment and this particular code will be available inside your dashboard, along with the recording.

02:11:14.000 --> 02:11:19.000
But yeah, it will take some time. So, not quick, as we all know.

02:11:19.000 --> 02:11:25.000
Can you please attach in the resources? I think I'm speaking in English, right? And we all understand the English language.

02:11:25.000 --> 02:11:32.000
Yeah? So why people keep on asking the same thing again and again? I don't understand. Even in group, I can see.

02:11:32.000 --> 02:11:40.000
That there were some misadventure which was going on, and uh… I think, guys, we all are mature enough, right? So please, uh…

02:11:40.000 --> 02:11:50.000
Maintain a distance from such activities. I think that will be… And I'm telling you in the beginning of the class, and I'll keep on telling you these things again and again and again in every classes.

02:11:50.000 --> 02:11:57.000
So that we all can learn in as smooth as possible way.

02:11:57.000 --> 02:12:01.000
You are technically a roaster. Yeah, I do a lot, I love it, basically. I do a lot.

02:12:01.000 --> 02:12:19.000
I love roasting people. Okay, fine, so those who is having any kind of a question, please be here. Those who don't have any kind of a caution, you can drop from this class. Your class is over. I'm not going to discuss anything new now. So, yeah.

02:12:19.000 --> 02:12:22.000
Thank you so much, and hope all of you have liked the class.

02:12:22.000 --> 02:12:28.000
If you have any kind of feedback, so you have a group which is open for all kind of a conversation.

02:12:28.000 --> 02:12:34.000
The productive one, obviously, right. So, you can give me a feedback over there, you can give me a feedback even over here.

02:12:34.000 --> 02:12:42.000
So are you able to understand your API guys? Most of you, maybe, like, 60-70%, not 100%, maybe 60-70%.

02:12:42.000 --> 02:12:56.000
Yes? Okay, then I'm happy. We all are happy, yeah? 90%. 80%, 70% is also fine. Because, again and again, we'll keep on using these things.

02:12:56.000 --> 02:13:01.000
Yeah, so, Pajandrah is saying, I don't understand how to use ngrog.

02:13:01.000 --> 02:13:07.000
Okay. Ng log is nothing but ngroc, and then, like, uh, your HTTP, and then port number.

02:13:07.000 --> 02:13:12.000
Symbol, and we'll expose. So whatever is running on that particular port number, it will expose that.

02:13:12.000 --> 02:13:18.000
To the outer world. By when should we finish the assignment? So, see guys, I'm not a school teacher.

02:13:18.000 --> 02:13:24.000
Right? I'm not a schoolteacher at all, so I'm not going to check your assignment, and you are neither, like, a school student.

02:13:24.000 --> 02:13:30.000
Right? Or a college student. And, uh, even if I'm going to give you a marks for the assignment, that is not going to help me or help.

02:13:30.000 --> 02:13:43.000
You out, right? Again, it will try to create a friction. So, I'm giving you assignment as of now, and very soon, within 2-3 weeks, you will be able to see that I will start giving you challenges, a lot of challenges, right? A lot of challenges.

02:13:43.000 --> 02:13:52.000
And I will be expecting that, that with honesty. All of you are going to work on those assignment and unchallenges.

02:13:52.000 --> 02:14:16.000
You have an AI, validate with it, I have already given you a group, maybe you can try to, like, uh… pick your learning partner if you want. Right, let's suppose you would like to learn with maybe two people, three people, and then maybe create your own separate group and do all kind of a discussion in your own group, own private group, right? My responsibility was to create a community. Yes, we have a community, and that community will keep on growing.

02:14:16.000 --> 02:14:20.000
So that that community will be able to help you out, not in just the terms of learning, because that is a stage number one, right?

02:14:20.000 --> 02:14:24.000
The major part is, like, a transition. So that community will be able to help you out.

02:14:24.000 --> 02:14:34.000
And, uh, yeah, so whatever assignment I'm giving you. Try to solve it. Try to solve it, try to validate it, try to discuss with your groups, your mini group, basically, three to four people are, uh.

02:14:34.000 --> 02:14:44.000
Try to validate it with the AI. Uh, so we are not going to behave like a school child, because that is not going to help any one of us, and that is not my style of taking the classes.

02:14:44.000 --> 02:14:53.000
Right? So don't think that I'll give you assignment, then I'll ask you to submit the assignment, then I'll check it, uh, check it for you, and then I'll give you a marks out of 10 out of 100.

02:14:53.000 --> 02:14:59.000
Right? What you will do with that marks? At the end of the day, we all have to write the code. We have to build a system.

02:14:59.000 --> 02:15:06.000
Right? So whenever I'm giving you challenges, build it, do it, and show it to everyone, that I have built this particular system.

02:15:06.000 --> 02:15:11.000
As of now, it's just assignment, but in 2-3 weeks, we'll start building a system as well.

02:15:11.000 --> 02:15:19.000
In 2-3 weeks only. Yes, I believe this approach is good, and all of you are okay with it.

02:15:19.000 --> 02:15:26.000
Yes, everyone? Yeah? So, we'll not behave like a school and college. We are not in a school and college. It's a professional…

02:15:26.000 --> 02:15:34.000
Things that we are trying to learn, and here, we'll try to learn less, we'll try to build more.

02:15:34.000 --> 02:15:40.000
Because that is the only way. Because, see, I'm into this teaching profession since last 8-9 year.

02:15:40.000 --> 02:15:49.000
Uh, so, uh, and many people not just one, two, maybe more than 10,000 people have done the transition, uh, and.

02:15:49.000 --> 02:15:59.000
Because of this philosophy. So it's a proven one, by the way.

02:15:59.000 --> 02:16:05.000
Would you teach Flask also? No, not at all. So, if you have to, like, learn Flask, come to my Python classes.

02:16:05.000 --> 02:16:16.000
Over there, I used to teach Flask. So I have, like, a separate class for separate, separate things, because I can't, like, teach everything in one single class. Just practically, that is not possible, and again, people will…

02:16:16.000 --> 02:16:38.000
Like, uh, get bored by those things. Okay, fine, guys, uh, so, uh, now, let's start a doubt clearing. So, I think we all know that drill. So, to do a doubt clearing, you can even share your screen, right? So, doubt clearing-wise, you can share your screen, you can chat, and all those things can be done. So, just raise your hand.

02:16:38.000 --> 02:16:44.000
You must be able to see a raise hand option, uh, the icon, right? So raise your hand, one by one, I'm going to call out your name.

02:16:44.000 --> 02:16:58.000
And, uh, yeah, if you would like to share the screen, share your screen. If you would like to, like, ask some doubt, do it. I don't have any issue. I'm open for all discussion. Yeah, so Karthik, go ahead, Mukesh, go ahead, Jabir, go ahead.

02:16:58.000 --> 02:17:04.000
Uh, Abhinas. So first, Karthik, then Mukesh, then Jabir, and then, like, uh, Avinaz, yeah.

02:17:04.000 --> 02:17:05.000
Yeah. Yeah. Thank you.

02:17:05.000 --> 02:17:13.000
Thank you for that class, Mr. Fall. Um, so I am just trying… I'm just trying to run, uh, the API with Yubicon, uh, from.

02:17:13.000 --> 02:17:20.000
Outside the directory. So when I'm just trying to give it a full path, it is not taking… it is giving me an error that, um.

02:17:20.000 --> 02:17:25.000
In a Windows, so basically it will be like, uh, you have to give a backslash. So, in a Windows, if you're trying to run it.

02:17:25.000 --> 02:17:31.000
Perfect. Yeah, I did that, but I'm still not able to do it. Can I share my screen quickly?

02:17:31.000 --> 02:17:36.000
Yeah, you can share the screen, but go into a directory, then try to, I mean, like.

02:17:36.000 --> 02:17:37.000
The only thing is fine.

02:17:37.000 --> 02:17:46.000
Yeah, actually, I've tried 3 for combinations, nothing was working out, so I was like… Um, if I'm doing something, or should I escape it or not, like…

02:17:46.000 --> 02:17:47.000
Serious screen, share your screen. Next question, please, in between.

02:17:47.000 --> 02:17:52.000
Um, uh, I'm… I'm not getting an option to share it.

02:17:52.000 --> 02:18:00.000
Uh, no, I have added you as a panelist, so you will join again as a panelist.

02:18:00.000 --> 02:18:01.000
Yeah, in between, so, uh, next one, Mugesh, what is your question?

02:18:01.000 --> 02:18:04.000
Okay, got it.

02:18:04.000 --> 02:18:13.000
Yes, it's a recorded session, so if possible, can you minimize, uh, like, live videos, uh, so that I will get the full skin?

02:18:13.000 --> 02:18:23.000
Because in the corner, uh, right top corner, uh, there's some, like, no… a block is coming, and a few of the options were low whenever we are going to…

02:18:23.000 --> 02:18:24.000
I was not able to follow up, so…

02:18:24.000 --> 02:18:29.000
That is a default, like, a recording, and in a corner, so obviously there will be.

02:18:29.000 --> 02:18:34.000
My photo, right?

02:18:34.000 --> 02:18:35.000
But yeah, there is no option in Zoom. By default, Zoom records a session in that way.

02:18:35.000 --> 02:18:38.000
Yeah, I mean, it should be minimized, I'm not much, uh, bigger, uh…

02:18:38.000 --> 02:18:39.000
Okay. Okay.

02:18:39.000 --> 02:18:51.000
In live, so I can… I can remove that part. But, uh, in a recording, so it's a default recording with Jones repair. We are not doing a… Like, uh, anything extra from, like, our side, basically.

02:18:51.000 --> 02:18:52.000
Yeah.

02:18:52.000 --> 02:18:59.000
Got it. Yeah, because… and a few pays, like, whenever I was trying to, like, NS Rock and all, I was not able to follow up, and.

02:18:59.000 --> 02:19:07.000
By, like, no, uh, by the time, I was trying to… figure it out my issue, uh, like, no, some… something was missed, like, no, the…

02:19:07.000 --> 02:19:13.000
Capturing. So, just to give, like, uh. One or two minutes pause, so that, uh, like, everyone, uh, maybe if someone is also facing the same issues.

02:19:13.000 --> 02:19:21.000
No, any… any… don't worry, anyhow, I used to repeat same thing multiple times. See, whatever content I have discussed, so what I have done today.

02:19:21.000 --> 02:19:27.000
If you will observe carefully, right, the content that I have discussed, only, uh.

02:19:27.000 --> 02:19:33.000
Like, uh, 15 or 12 line of code? In two hours?

02:19:33.000 --> 02:19:35.000
That's true. Yeah.

02:19:35.000 --> 02:19:46.000
So, in 2 hours, just imagine, right? In 2 hours. So, I keep on repeating, uh, things multiple times, and if you have any question after that, so we have a doubt clearing.

02:19:46.000 --> 02:19:48.000
As we are doing it now. Right?

02:19:48.000 --> 02:19:51.000
That's all I'm having. Yeah, thank you.

02:19:51.000 --> 02:20:02.000
Yeah, yeah, thanks. Okay, so Jabeer, Jabir, uh, yeah, so in between, uh, Kartik, you can share your screen, I think you have permission to share your screen.

02:20:02.000 --> 02:20:03.000
Yeah, I can hear you.

02:20:03.000 --> 02:20:08.000
Can you hear me? Oh, yeah, thank you. My question is that, too. One is the…

02:20:08.000 --> 02:20:20.000
We need to learn of the API testing and, like, Postman, and uh… Or you see in the Fast API and of the curve. We need to… all three of them need to learn, or only one?

02:20:20.000 --> 02:20:28.000
You don't… see, I don't think that it's called as learning, by the way. It's a simple utility that you are going to use it all the time.

02:20:28.000 --> 02:20:32.000
I mean, like, what is learning in this one? There is nothing called as learning in this one, right?

02:20:32.000 --> 02:20:33.000
No.

02:20:33.000 --> 02:20:43.000
It's a utility, right? So you have to basically create an API, you have to test it. So maybe test it through a post map, test it through a call it inside, uh, like, a code, that's completely fine.

02:20:43.000 --> 02:20:47.000
Yeah, but it's just a utility. I don't call these things as a learning.

02:20:47.000 --> 02:20:54.000
Oh, okay, okay, that's fine, that's why I want to run this beautiful. And also, I've faced the problem, I cannot run the, like.

02:20:54.000 --> 02:20:55.000
You can share a screen if you want, yeah, you can share your screen, I'm promoting you as a panelist, you will be rejoining.

02:20:55.000 --> 02:20:59.000
Python code. Thank you.

02:20:59.000 --> 02:21:01.000
Yeah, kind of thing. So what is… I can see your screen. So, show me, like, what you're writing?

02:21:01.000 --> 02:21:06.000
So yeah, this is, uh, this is the one, uh, like, this is the one of the comments…

02:21:06.000 --> 02:21:12.000
Uv corn, and then what is your file name? So, your file name is basically.

02:21:12.000 --> 02:21:18.000
So, inside our Gen AI, there is an API. Just do one thing, right-click on a test.py, right-click.

02:21:18.000 --> 02:21:20.000
Oh, good idea. Yep.

02:21:20.000 --> 02:21:31.000
Yeah, copy the path, copy path. Okay, fine, now come over here. Uh, UVCon, paste it, paste that path.

02:21:31.000 --> 02:21:37.000
Okay, so test.py, remove.py? Column.

02:21:37.000 --> 02:21:46.000
Yeah, app. Reload, you can write it, you can escape it, that's completely fine, yeah.

02:21:46.000 --> 02:21:47.000
I'm just so dream.

02:21:47.000 --> 02:21:54.000
It'll hit now. Now it's working. Could not import the module called as C. Okay, so it's basically a Windows issue, I can say.

02:21:54.000 --> 02:22:03.000
Fine. Like, uh, terminate it, Ctrl-X? Terminate. Now, like, uh, arrow up.

02:22:03.000 --> 02:22:04.000
Okay?

02:22:04.000 --> 02:22:09.000
Yeah, and do double slares. C drive, double slash. Personal, double slash, GenAI, uh, yeah.

02:22:09.000 --> 02:22:10.000
No, no, no, yeah, remove that. Double slash here, double slash everywhere.

02:22:10.000 --> 02:22:15.000
Right. Yeah, yeah, yeah.

02:22:15.000 --> 02:22:21.000
Doubles less, then doubles last once again, then doubles last once again.

02:22:21.000 --> 02:22:22.000
I'd still use…

02:22:22.000 --> 02:22:27.000
Fine, hit now. Another loading Asia could not import Module C drive, it is not able to.

02:22:27.000 --> 02:22:30.000
Just taking this, uh, like… It is, I think, try to take it as a module rather than the directory structure.

02:22:30.000 --> 02:22:37.000
You…

02:22:37.000 --> 02:22:47.000
Uh, it should… it should work, stop reloading the process, uh, okay, so… Uh, C drive…

02:22:47.000 --> 02:22:48.000
No, no, no, no, no, no. It just… It's a string, right? It never understands the string part.

02:22:48.000 --> 02:22:50.000
Something like this will work or not.

02:22:50.000 --> 02:22:59.000
We'd never understand that. So, here, API, gen AI, fine, and the absolute path is fine.

02:22:59.000 --> 02:23:03.000
Now, just do one thing, do a backwards slash. Remove double slash, do a backwards slash.

02:23:03.000 --> 02:23:09.000
It's a Windows issue. If you're running the same thing in a Linux and in a Mac machine, it will never give you an issue. It will take the absolute path.

02:23:09.000 --> 02:23:16.000
But with Windows, this is the issue.

02:23:16.000 --> 02:23:22.000
Just, just hit it, uh, error loading AGI app could not, uh.

02:23:22.000 --> 02:23:30.000
No, no, no, just run it, and then test it as a, uh, this one, URL.

02:23:30.000 --> 02:23:36.000
Copy the URL, test it.

02:23:36.000 --> 02:23:45.000
Going inside a folder is one of the ways, that's fine, can't reach, no, it's not running is… Yay? Fine, go inside the folder and then do it.

02:23:45.000 --> 02:23:48.000
Because it's not able to identify you. It's a Windows issue. In other systems, it will not give you the issue.

02:23:48.000 --> 02:23:53.000
Great. Okay. But, like, we can give different parts, right, and try to do it.

02:23:53.000 --> 02:24:04.000
We can give a path. See, it's just a file, it will try to detect. It is not detecting anything else, just a file, right? So, wherever file is available, we always give that path, but with Windows, there will be this issue.

02:24:04.000 --> 02:24:14.000
Uh, where it will not be able to identify or, uh, C drive you are trying to give. So maybe it is not having admin permission or something like that. In other systems, it never gives an issue.

02:24:14.000 --> 02:24:16.000
Got it.

02:24:16.000 --> 02:24:17.000
Yep.

02:24:17.000 --> 02:24:25.000
Uh, can I say something, sir? Manishi. I'm also trying the same, and I am using D drive, but uh… that is happening the same.

02:24:25.000 --> 02:24:26.000
Yeah, so with Windows machine, right?

02:24:26.000 --> 02:24:31.000
So, it is saying… Yeah, Windows machine could not import module D, so yeah. Can I share?

02:24:31.000 --> 02:24:39.000
Go with the absolute path. Simple. Means go inside the directory and then execute.

02:24:39.000 --> 02:24:40.000
Yes, that is working, that is working. Yep.

02:24:40.000 --> 02:24:47.000
That must be working, right? That will… that will always work. See, path, it works with the path, but there is an issue with the windows, so…

02:24:47.000 --> 02:24:48.000
It, like, gets confused.

02:24:48.000 --> 02:24:55.000
Garter. Got it. And, uh, I have one another very basic question.

02:24:55.000 --> 02:25:01.000
Can we touch base a bit on, like, what is the difference between an LLM and a GPT?

02:25:01.000 --> 02:25:02.000
Like…

02:25:02.000 --> 02:25:09.000
Uh, so technically, GPT is a LLM. So, GPT is one kind of a LLM. So, LLMs, full form is Large Language Model.

02:25:09.000 --> 02:25:17.000
So, whichever is going to give you, uh, output based on your input, and if that architecture is a transformer architecture, it's called as.

02:25:17.000 --> 02:25:27.000
Llms, technically, large language models, so which can generate, like, a 128K token, or maybe 4K token, or 10K token at a time, based on your input.

02:25:27.000 --> 02:25:31.000
So, in a generic way, it's LLMs. Gpt is one of the LLMs.

02:25:31.000 --> 02:25:45.000
Like, we have other LLMs, for example, we have Cloud Sonet, we have Gemini, we have, uh, Llama, we have Maverick, maybe we have a Quen. Basically, we have our DeepSeek.

02:25:45.000 --> 02:25:46.000
Okay, so, like, they can be… these terms can be used interchangeably.

02:25:46.000 --> 02:25:48.000
So, all of these things are technically LLMs.

02:25:48.000 --> 02:25:53.000
Like, we can say that GPT is an LLM, or LLM can be… anything can be a transformer.

02:25:53.000 --> 02:26:03.000
Yeah, so anything which is going to, like, take an input and which is going to generate a huge amount of the data, a text for you, or any kind of a data, a huge amount, obviously, that is called as LLM.

02:26:03.000 --> 02:26:05.000
Got it. Got it. Yep.

02:26:05.000 --> 02:26:22.000
Yep. And again, so it will be having a transformer architecture, and again, so transformer architecture-wise, it will be having many layers, so 96 layers, or maybe a hundred and… like, a 20-something layer, or maybe 500 layer of the transformer is tagged upon each and every one. So, it's called as technically a large language model.

02:26:22.000 --> 02:26:27.000
Got it, got it. Thank you.

02:26:27.000 --> 02:26:28.000
Hello?

02:26:28.000 --> 02:26:34.000
Yeah. Yeah. Yeah, try with the command prompt. So even Karthik, right? So, try this out with a command prompt. You must be trying, I think, with the PowerCell.

02:26:34.000 --> 02:26:35.000
Determinant. Okay.

02:26:35.000 --> 02:26:43.000
See how the screen, once again? Yeah. So now, just try to change it to the, uh, this one.

02:26:43.000 --> 02:26:52.000
Uh, yeah, go with the PowerCell.

02:26:52.000 --> 02:26:54.000
You want me to go to the partial?

02:26:54.000 --> 02:27:03.000
Yes. So from here, you can switch.

02:27:03.000 --> 02:27:04.000
Uh, early on the.

02:27:04.000 --> 02:27:11.000
From your… So, yeah, from your terminal itself, so on your right-hand side, uh, you will be able to see a button plus right.

02:27:11.000 --> 02:27:12.000
So just click over there, click, yeah. Now you can select from here.

02:27:12.000 --> 02:27:16.000
Got it.

02:27:16.000 --> 02:27:21.000
So, one with two…

02:27:21.000 --> 02:27:27.000
Nah, I'm trying using the PowerShell, but whenever I got the result with the PI file, but whenever I'm trying with the UVCon.

02:27:27.000 --> 02:27:28.000
It is showing the same error. Mm-hmm.

02:27:28.000 --> 02:27:35.000
Hmm. Same area, right? So, better to go inside the directory and then, like, do H.

02:27:35.000 --> 02:27:36.000
Regardless.

02:27:36.000 --> 02:27:45.000
Okay, so from here, if you're trying to execute, then you should write dot slash API.

02:27:45.000 --> 02:27:46.000
No, so Karthik, I think you have stopped sharing your screen.

02:27:46.000 --> 02:27:49.000
Slash APD. Yes.

02:27:49.000 --> 02:28:03.000
So if you're trying this… if you're trying this out from this, uh, folder, right? So, where you are as of now, which is a GenAI folder, which I was able to see. So, from there, dot slash API, so that it will go to the home directory, means this local one.

02:28:03.000 --> 02:28:07.000
And then it will be able to cross the API directory, and then it will go inside the file.

02:28:07.000 --> 02:28:08.000
Sorry, how…

02:28:08.000 --> 02:28:16.000
So this one is .slash. Yeah. God slice, and then API underscore example.

02:28:16.000 --> 02:28:22.000
Then slash, or test.

02:28:22.000 --> 02:28:23.000
Mpp?

02:28:23.000 --> 02:28:31.000
The backslash, basically. Not a forward one.

02:28:31.000 --> 02:28:37.000
Yeah, so dot slash API example test app, and then hit.

02:28:37.000 --> 02:28:43.000
Mmm, package augment is required before… what happened? Ue, only have written, right?

02:28:43.000 --> 02:28:44.000
Yes.

02:28:44.000 --> 02:28:48.000
Type error… it is not able to identify. Leave it inside the directory and then execute.

02:28:48.000 --> 02:28:52.000
Yep. Got, yep. Yep.

02:28:52.000 --> 02:28:54.000
It's facing an issue with, like, a location. Yeah, Javir, go ahead, yeah. So, what is your issue?

02:28:54.000 --> 02:28:59.000
Hello?

02:28:59.000 --> 02:29:04.000
Uh, my issue is that I cannot run this one, see?

02:29:04.000 --> 02:29:15.000
You… it's a UV corn, UVIE. You have written UV. Yeah, it's an IE.

02:29:15.000 --> 02:29:16.000
Yes. Yes. And then, like, I do it, like, a test.

02:29:16.000 --> 02:29:20.000
Right?

02:29:20.000 --> 02:29:26.000
Column Pi. Reload is fine, if you are going to leave it, it's not an issue at all.

02:29:26.000 --> 02:29:27.000
Okay, when are, like. Uh, cup, uh, coffee, this one.

02:29:27.000 --> 02:29:32.000
Not tonight.

02:29:32.000 --> 02:29:45.000
After that, I think some issue. Like, give me a second…

02:29:45.000 --> 02:29:47.000
It's gonna show up this message, uh, checking the file.

02:29:47.000 --> 02:29:55.000
I can't be raised. Hmm. Just so many, show me the command once again. What you have written.

02:29:55.000 --> 02:29:58.000
Just go to a terminal, terminal, terminal. You'll use VS Code. Go back to VS Code.

02:29:58.000 --> 02:30:03.000
I don't know. Of base code.

02:30:03.000 --> 02:30:14.000
Yeah. What do you have written? Uh… Where is the command? Uv column TST? Okay, so colon app, it's not a Pi, basically, it's an app.

02:30:14.000 --> 02:30:15.000
Oh, bye.

02:30:15.000 --> 02:30:25.000
Best colon app. That's a command, right? So, test is your file name, app is a syntax by which it will be able to understand. Terminate it, terminate. Ctrl-c.

02:30:25.000 --> 02:30:26.000
Ctrl-x. Enter.

02:30:26.000 --> 02:30:33.000
Ctrl-x. Yeah. Ctrl-c, Ctrl-C?

02:30:33.000 --> 02:30:34.000
Yeah.

02:30:34.000 --> 02:30:41.000
Yeah, now, uh, yeah, write it again, up arrow. Just do up arrow, it will be able to show you the same command.

02:30:41.000 --> 02:30:42.000
Uh, like, test.

02:30:42.000 --> 02:30:47.000
Uvcon? Yes, UVIs, UN test, colon, app, AWP app. Test is your file name, app is a command.

02:30:47.000 --> 02:30:49.000
I'll go test.

02:30:49.000 --> 02:30:55.000
Colon after. Yeah, hit enter. Enter, enter, enter. Hmm.

02:30:55.000 --> 02:31:01.000
Now go and test, it will work.

02:31:01.000 --> 02:31:06.000
You can even write, like, local host. No, no, no, it's been terminated.

02:31:06.000 --> 02:31:07.000
Run again, run again. Yeah.

02:31:07.000 --> 02:31:12.000
Hold on again.

02:31:12.000 --> 02:31:19.000
Now leave it. Go to the browser. Leave it as it is, it's running. So now hit it.

02:31:19.000 --> 02:31:24.000
Hmm, it's running. Now call slash docs? It'll show you the Swagger UI.

02:31:24.000 --> 02:31:25.000
Flash? No, no, no, with that, with the same thing. 12,700.1, 8000 slash.

02:31:25.000 --> 02:31:32.000
Okay.

02:31:32.000 --> 02:31:34.000
Okay, slash, right?

02:31:34.000 --> 02:31:38.000
Yeah, slash DOCS, yes. No, no, no, slash DOC, yes, docs, docs.

02:31:38.000 --> 02:31:42.000
Enter. Not DOC, okay.

02:31:42.000 --> 02:31:47.000
So I gotta do right here. Docss. Dogs, yeah, internal?

02:31:47.000 --> 02:31:51.000
Now, here is the survey. You can see your API, right? Slash add.

02:31:51.000 --> 02:31:52.000
Oh, yeah. Okay, okay. Thank you.

02:31:52.000 --> 02:31:53.000
You can click it, you can… Yeah, just a minute, I'll allow you.

02:31:53.000 --> 02:31:57.000
Can I share my screen?

02:31:57.000 --> 02:32:04.000
Yeah, so anyone who would like to share their screen, guys, so please let me know. I'll make you as a panelist so that you can share your screen.

02:32:04.000 --> 02:32:05.000
Yeah.

02:32:05.000 --> 02:32:07.000
Yes, I also.

02:32:07.000 --> 02:32:08.000
Thank you.

02:32:08.000 --> 02:32:10.000
Yeah, so money's done, so you will… Okay, Rajiv, one by one, just tell me, like, yes, yes, I'll…

02:32:10.000 --> 02:32:11.000
Sir, sir, sir.

02:32:11.000 --> 02:32:16.000
Hated on the…

02:32:16.000 --> 02:32:17.000
Yes, sir, yes, sir.

02:32:17.000 --> 02:32:18.000
Okay, so Avinas, you would like to share? Okay, fine. Rajiv, okay, I'm making you as a panelist, and then Ramesh Kumar would like to share?

02:32:18.000 --> 02:32:19.000
I can.

02:32:19.000 --> 02:32:27.000
Yes.

02:32:27.000 --> 02:32:34.000
Okay, so I think these are the people who would like to share. Jamir, I think your issue is fixed, right?

02:32:34.000 --> 02:32:35.000
Yeah. Okay, I can… I can…

02:32:35.000 --> 02:32:40.000
Yeah, okay, great. You can, again, like, yeah, join as a… yeah, you can, you can move yourself from, uh… balance to attendees, yeah.

02:32:40.000 --> 02:32:43.000
Yep. Yep. That's good.

02:32:43.000 --> 02:32:44.000
Okay, fine. So, next one… Mani, share your screen, please.

02:32:44.000 --> 02:32:49.000
My turn. My turn. Yeah. Uh…

02:32:49.000 --> 02:33:00.000
Yeah. In between, I can take some questions. So, Arman, what is your question? Uh, Prashanth, what is your question?

02:33:00.000 --> 02:33:01.000
Hmm. What is your question, Bashan?

02:33:01.000 --> 02:33:03.000
Yes, sir, I have a question.

02:33:03.000 --> 02:33:12.000
Said that for hosting into the… our website, into, uh, what are called, into the world.

02:33:12.000 --> 02:33:16.000
Hmm? Hmm?

02:33:16.000 --> 02:33:17.000
Ngrock, NGRock.

02:33:17.000 --> 02:33:28.000
As a public, you mentioned someone's website, NGCon, right? So, NGCON… And, you know, so… and Jiram, basically, like, because I was… when I was running the flow, I faced somewhere else, so I skipped the NGO part. So, can you explain one more time, so that, like, how…

02:33:28.000 --> 02:33:33.000
Hmm. Share of the screen, share the screen will, like, run it in your screen itself. Share screen.

02:33:33.000 --> 02:33:37.000
Yeah, Ramesh, what is your question? If you can ask me?

02:33:37.000 --> 02:33:38.000
Yeah, yeah, yeah. Hey. How should it?

02:33:38.000 --> 02:33:39.000
Uh, he already shared my screen, so I'm sure.

02:33:39.000 --> 02:33:45.000
No, no, so this… we have… We have a Ramesh… yeah, Ramesh Kumar, please go ahead, yeah.

02:33:45.000 --> 02:33:46.000
Yeah, yeah, yeah, actually, then sure. Thank you, sir, for the outs session. It is a wonderful session.

02:33:46.000 --> 02:33:49.000
Yeah. Thank you. Thank you.

02:33:49.000 --> 02:33:53.000
I said, well, basically, uh, some question. So, in my projects, we are extracting the data from the web application.

02:33:53.000 --> 02:34:01.000
Mm-hmm. Okay.

02:34:01.000 --> 02:34:02.000
Mm-hmm.

02:34:02.000 --> 02:34:10.000
Twitter or something, uh, Twitter and Facebook, Instagram. So basically, uh, what happened over there? Uh, so we are, um, we are, uh, invoking the API call with a sequential patient.

02:34:10.000 --> 02:34:11.000
Hmm, hmm. Hmm.

02:34:11.000 --> 02:34:16.000
Uh, so iterating one by one. So is there any easiest way to get the API and the asynchronous way?

02:34:16.000 --> 02:34:19.000
There are a certain expression that… Because, well, yeah, we're good.

02:34:19.000 --> 02:34:24.000
So… No, no, no, please, please, go ahead. Complete your question, please.

02:34:24.000 --> 02:34:29.000
Yes. Yeah, right. So, we have the one intermediate platform over there, so Springlr platform.

02:34:29.000 --> 02:34:31.000
Okay. Mm-hmm.

02:34:31.000 --> 02:34:36.000
So we can get the platform under… it can, uh, extend the data. So, what is the problem I'm facing?

02:34:36.000 --> 02:34:37.000
Now, sometime we are facing some connection out, uh, timeout issue.

02:34:37.000 --> 02:34:40.000
Okay.

02:34:40.000 --> 02:34:41.000
Mm-hmm, hmm, hmm. Mm-hmm.

02:34:41.000 --> 02:34:50.000
The API connection time of this shoe. But in our Python code, just, we are using… we are using iteration approach to…

02:34:50.000 --> 02:34:51.000
Hmm. Hmm.

02:34:51.000 --> 02:34:57.000
For every hundred, every thousand rows. But we are extracting the data from website to generate some page performance data, no? Something…

02:34:57.000 --> 02:34:58.000
Mm-hmm, mm.

02:34:58.000 --> 02:35:02.000
We have the 10K rows are 20K rows. So about every iteration, we are extracting the 100,000 rows.

02:35:02.000 --> 02:35:07.000
Hmm. Okay, okay.

02:35:07.000 --> 02:35:12.000
So, how can we… is there any easiest approach to follow the asynchronous?

02:35:12.000 --> 02:35:23.000
Uh, synchronous, you can try to run, but as you are trying… So, just go ahead with one thing, no? So, just go ahead with the pagination. Don't try to, like, you know.

02:35:23.000 --> 02:35:36.000
Describe all the data, uh, at a time, because you are facing a timeout issue, right? So by the time, it will try to give a request, and it will get a response, so… Basically, the connection will be, like, timed out. So, I will say, simply go ahead with the pagination over here.

02:35:36.000 --> 02:35:38.000
There's a concept of pagination even with respect to the API.

02:35:38.000 --> 02:35:41.000
Now, what is a page… what is a page duration, sir? Can you give me some idea about it?

02:35:41.000 --> 02:35:48.000
Pregenation means, like, a layer-by-layer, page-by-page, page by page, it will be able to access the things. It will not try to access everything at a time.

02:35:48.000 --> 02:35:49.000
So that you will not face a timeout issue, basically.

02:35:49.000 --> 02:35:59.000
Mm-hmm. So… And also, I'm curious to know that, uh, so right now, we are hitting the thousand rows, right? For every address in…

02:35:59.000 --> 02:36:00.000
Hmm. Hmm.

02:36:00.000 --> 02:36:05.000
It is exciting, the $1000 from API, but how does it understand sequential.

02:36:05.000 --> 02:36:09.000
The first time when we hit the API, it is starting the 1000 from topic.

02:36:09.000 --> 02:36:10.000
Basically, whoever has written a function, yeah, so whoever has written a function, right? Someone has written a function, and with the help of API.

02:36:10.000 --> 02:36:16.000
Then, again, we… hmm…

02:36:16.000 --> 02:36:18.000
You are hitting that function. So, over there, person has already mentioned that, okay, fine, so maximum number of record, or maybe a minimum record, or minimum number of records should be 1000.

02:36:18.000 --> 02:36:24.000
Mm-hmm.

02:36:24.000 --> 02:36:31.000
In that function, someone has written that.

02:36:31.000 --> 02:36:32.000
If a person… if… if person has exposed it, right, see.

02:36:32.000 --> 02:36:37.000
Okay, those values we are passing, right, from our client side. So, 1 to 1 host of…

02:36:37.000 --> 02:36:38.000
Mm-hmm.

02:36:38.000 --> 02:36:50.000
Let's suppose I have written a function, right? So, parameter will be under my control. So, maybe I will expose some of the parameters, and some of the parameters I will not expose. So, if person has already exposed that parameter that you can pass number of records. Like.

02:36:50.000 --> 02:36:51.000
Then, you can pass through an API, and it will be able to act accordingly. If person has not exposed that parameter.

02:36:51.000 --> 02:36:56.000
Mm-hmm.

02:36:56.000 --> 02:37:00.000
Uh, so in that case, you won't be able to do anything.

02:37:00.000 --> 02:37:07.000
Okay, and one more question, I got at your point, sir. Actually, we have the 10K record of 20K records, right?

02:37:07.000 --> 02:37:12.000
Maybe, uh, how many pagination over there, over the website, overall?

02:37:12.000 --> 02:37:13.000
So, is there any party pages added?

02:37:13.000 --> 02:37:19.000
Okay. So basically, you should check the… you should… you should… you should basically check that, uh, at, uh, like, how many seconds, basically, you are getting this timeout issue.

02:37:19.000 --> 02:37:30.000
And in that time frame, so how much you record you are able to access. So basically, when you are doing a pagination, you should put that particular values over there.

02:37:30.000 --> 02:37:31.000
Mm-hmm, okay.

02:37:31.000 --> 02:37:41.000
Because everyone will give a different, different timeouts, right? So, timeout is, again, under my control. So, let's suppose if I have designed my system, so I can mention that, okay, fine, so on, 5 millisecond, just do a timeout, or maybe on a 5000 millisecond or microsecond.

02:37:41.000 --> 02:37:47.000
Just go with the timeouts, yes? So, if there is no data, or if someone is trying to extract something, or someone is trying to hit my system.

02:37:47.000 --> 02:38:00.000
So, again, it's your… so let's suppose you are trying to hit some APIs, so just try to observe that, okay, so in this particular part of the second, how much record I'm able to get, and after how many seconds, it's going for the timeout. You can do the calculation, right?

02:38:00.000 --> 02:38:03.000
So basically, you can just try to call the time function before calling the API and after calling the API, and then find out the subtraction of it.

02:38:03.000 --> 02:38:06.000
Mm-hmm.

02:38:06.000 --> 02:38:16.000
So it will give you the total second, basically. So, okay, fine, so in this many seconds, this is the total number of records, which it was able to fetch, and this is, uh, like, going for the timeout after this, this particular values.

02:38:16.000 --> 02:38:20.000
Try to do a pagination accordingly. So that will become a parameter for your presentation.

02:38:20.000 --> 02:38:27.000
Okay, but, yeah… Yeah, I agree with your point, but the responses depends on that locality.

02:38:27.000 --> 02:38:30.000
And the server location, uh, we have various parameters, right?

02:38:30.000 --> 02:38:36.000
Obviously, obviously, obviously, response depends upon the server location, so this is the reason I'm telling you that observe that.

02:38:36.000 --> 02:38:42.000
Honestly, you are not going to observe, right? You will not be able to set these parameters.

02:38:42.000 --> 02:38:47.000
Okay. And is there anything said the API call trial limit from the tool level?

02:38:47.000 --> 02:38:53.000
Maybe on the server side, uh, would they set up any code, the API try limit, and… Now, for example, let us… yeah, yeah.

02:38:53.000 --> 02:38:57.000
Yes, obviously, obviously, even, obviously, even, even we have done that, so whenever you are going to hit URI API, right?

02:38:57.000 --> 02:39:07.000
We are giving you only one lactokan per day. 365 lakh in a year. So if you'll check the URE, so you will be able to even see the track of those APIs, that, okay, fine, so in this.

02:39:07.000 --> 02:39:13.000
Hit, this is the total number of eBay consumption. In this hit, this is the total number of API consumption, and even we have given you the limit.

02:39:13.000 --> 02:39:17.000
So, every system will give you a limit, similar kind of a limit.

02:39:17.000 --> 02:39:21.000
Okay, have you tried the… have you updated the logic on the server side, right? Based on that only, uh, is…

02:39:21.000 --> 02:39:26.000
Yes, exactly. So let me, let me share my screen. I'll show it to you. So, if you have not…

02:39:26.000 --> 02:39:27.000
I just submitted number, please.

02:39:27.000 --> 02:39:33.000
Yeah.

02:39:33.000 --> 02:39:38.000
Now, I have one short question. Uh, can I use the UD for voice chat?

02:39:38.000 --> 02:39:50.000
Uh, you can use, basically, Yuri for text-to-speech, but, uh. Inside UniRide was chat. Yeah, yeah, you can use it. I was wondering that Uri API. Yeah, so Ramesh, basically, I was trying to explain you this part. So, here we have users, right?

02:39:50.000 --> 02:39:51.000
Yeah. Yeah, yeah, sure.

02:39:51.000 --> 02:40:00.000
Today, I have shown you one example, right? So, where I was using an API. So, see, my today's conjunction. So, we are tracking each and everything. So, delimit is basically 1 lag.

02:40:00.000 --> 02:40:09.000
And for 335 days, you have basically, like, access of this entire portal, entire system, in one single payment. So, even we are tracking it.

02:40:09.000 --> 02:40:10.000
Mm-hmm.

02:40:10.000 --> 02:40:20.000
And then, if you come to logs, right, so you will be able to check that, okay, fine, so in one API hit, so what was the total number of token which was consumed, what was the hit, everything, everything we are observing and we are counting.

02:40:20.000 --> 02:40:21.000
Okay, good, good.

02:40:21.000 --> 02:40:32.000
So, whoever designed the API system, right, this is a system that we have designed. Now, let's suppose you are using an API from someone else. So, for sure, even those organizations or that person will do the same thing.

02:40:32.000 --> 02:40:39.000
And again, so here we can see, like, what is the total, like, second, or what is the total amount of time which it took.

02:40:39.000 --> 02:40:40.000
Yeah? Duration. To, like, to face this result. So we all, we all does that.

02:40:40.000 --> 02:40:46.000
Okay, okay, yeah, yeah. But, yeah, but…

02:40:46.000 --> 02:40:47.000
Sorry, where you can see?

02:40:47.000 --> 02:40:51.000
Survey… where I can see there are token consumption. Where I can see that one hint, how many tokens they consume, like, they can monitor.

02:40:51.000 --> 02:40:54.000
Here, maximum token you have set right over here. So, this is the total number of, uh… So, technically, this is an input token, and this is the output token.

02:40:54.000 --> 02:40:59.000
This is…

02:40:59.000 --> 02:41:01.000
So, 1,000 token consumed for this request, right? That's what it means.

02:41:01.000 --> 02:41:04.000
This one, this one, this one, yeah. So here is a total, like, number of tokens.

02:41:04.000 --> 02:41:13.000
So, actually, it is the… Sir, reduce the usage 600, but where the code is controlled, maybe they have updated the logic in the code level as well, right?

02:41:13.000 --> 02:41:14.000
How many tokens is downloaded per day, or something? Mm-hmm.

02:41:14.000 --> 02:41:21.000
Yes, yes, we have updated the logic in our code. Exactly, we have updated the logic in our code where you are hitting the API.

02:41:21.000 --> 02:41:28.000
Yeah. And one more question, right? Suppose we are passing… we passed in Karukaman the maximum token is 1000, right?

02:41:28.000 --> 02:41:35.000
So, uh, would, uh, actually, will it go to transfer the data at your time, or otherwise it can transfer the packet by packet?

02:41:35.000 --> 02:41:37.000
In between the server and the client and server.

02:41:37.000 --> 02:41:46.000
No, so technically… Technically, what happens is that we are… you are trying to hit our API, and you are trying to call our model, right?

02:41:46.000 --> 02:41:53.000
By the way, you're trying to call a model. Now, how model gives a response? A model gives a response in a chunks, right? So, maybe, like, 100 tokens, then 100 tokens, then 100 tokens, then 100 tokens.

02:41:53.000 --> 02:41:56.000
Mm-hmm.

02:41:56.000 --> 02:42:06.000
So in a chunks model will give a response. Now, the response that you are able to see, so we are trying to accumulate, or you can say we are trying to concatenate the entire chunk, and then we are giving you the response.

02:42:06.000 --> 02:42:16.000
But behind the scene, when you try to hit the API, so technically you are hitting my function, and that function is calling the model, right? It is trying to pass the input, and the model is going to give the response.

02:42:16.000 --> 02:42:20.000
So model always gives us a response in a chunks. Based on the modern, like, model.

02:42:20.000 --> 02:42:21.000
Yeah, on the chunks only.

02:42:21.000 --> 02:42:26.000
Those junks are… you know, where is the chunking limit, actually, in the software level, or I think, in the server level, that channel?

02:42:26.000 --> 02:42:35.000
No, no, no, so that depends upon my model as well, right? That depends upon my model, plus I can try to control it even with the function that I have written.

02:42:35.000 --> 02:42:42.000
Okay, okay. And is there any idea what is the limit, uh, of the volume of data to send from source to server?

02:42:42.000 --> 02:42:43.000
There is no limit at all. No, no, no, there is no limit at all.

02:42:43.000 --> 02:42:49.000
Is there any… which is the best mechanism? Is there any waste mechanism?

02:42:49.000 --> 02:42:51.000
Okay. No limit.

02:42:51.000 --> 02:42:52.000
Give me… Out of… out of learning?

02:42:52.000 --> 02:42:58.000
No, no, no, no, no, there is nothing called as Western boss, and there is no limit at all, technically. It depends upon… Right? How I'm writing my system.

02:42:58.000 --> 02:43:01.000
Okay, yeah, but there you go, the data has been transferred chunk by chunk, right? Okay.

02:43:01.000 --> 02:43:02.000
Okay. Orcav… yeah, OK said…

02:43:02.000 --> 02:43:12.000
Yes, yes, yeah. Yeah. But again, what will be the chunk size? That is a variable. What is the chunk size? That depends upon me, that I can control.

02:43:12.000 --> 02:43:13.000
Yep.

02:43:13.000 --> 02:43:19.000
And one more question, right, and actually, we have heard there's some different mechanism, right, other than.

02:43:19.000 --> 02:43:23.000
Http mechanism, either any other mechanism. Websocket or something, uh, empty, you know, MCP something.

02:43:23.000 --> 02:43:30.000
Yeah, so basically the chat… the chat solution that you are able to see, while, uh, even on Zoom, right, so we have a chat.

02:43:30.000 --> 02:43:38.000
So technically, these are the example of a, like, a biv socket, or maybe a GPRC call.

02:43:38.000 --> 02:43:39.000
Uh-huh, okay. These are the eviction mechanism.

02:43:39.000 --> 02:43:46.000
Grpc goals, sorry. So, there are multiple mechanisms. So basically, it's a socket.

02:43:46.000 --> 02:43:47.000
Mm-hmm. Okay, okay, okay, okay.

02:43:47.000 --> 02:43:53.000
That we are using in our webinar chat. So again, this is one of the way by which we can transfer the data.

02:43:53.000 --> 02:43:54.000
And also, MCP as well is kind of the similar one, right? It can handle the heavy volume of the…

02:43:54.000 --> 02:44:05.000
Yeah. No, MCP is not the similar. No, MCP is not the similar one. Mcp is basically, it's a kind of an agent, so which will be able to take an access of some of your system.

02:44:05.000 --> 02:44:12.000
And then it will try to, like, take a decision automatically. That is technically a MCP. Mcp is not the same.

02:44:12.000 --> 02:44:13.000
Work is not the protocol location. Okay, thank you, sir. Thank you so much.

02:44:13.000 --> 02:44:18.000
Mcp is a protocol. Mcp is a protocol, but used… not just for data transfer, it has been used to take the full control of the particular system itself.

02:44:18.000 --> 02:44:21.000
Mm-hmm.

02:44:21.000 --> 02:44:23.000
It's also a protocol. Yep.

02:44:23.000 --> 02:44:28.000
Okay, okay. It can take that any number of multiple machines, right? It can take the control of multiple machines.

02:44:28.000 --> 02:44:40.000
It can take the multiple machines, or you can say multiple processes, or maybe you can try to give a multiple tool access to that MCP. Depends what you are creating.

02:44:40.000 --> 02:44:42.000
Okay, thanks. Okay, fine, Manis, please share your screen.

02:44:42.000 --> 02:44:48.000
The…

02:44:48.000 --> 02:44:49.000
But then you might be internal.

02:44:49.000 --> 02:44:52.000
Sharing. Yeah, sharing immediately.

02:44:52.000 --> 02:44:54.000
Yeah. So Moniz, please share here.

02:44:54.000 --> 02:44:59.000
Yeah, so this is the one which I'm facing. So, if I'm running this… Yeah, I'm facing this issue, and what to do here, I don't know exactly.

02:44:59.000 --> 02:45:04.000
Okay.

02:45:04.000 --> 02:45:16.000
Don't worry, we'll fix it. Yeah, so what you are running… Uh, we probably test, okay, fine, remove, like, terminate it, terminate this one. It's a location issue, so just go into the.

02:45:16.000 --> 02:45:23.000
Yeah, dominate? Yeah, so basically your test.py file is available inside the API example, right?

02:45:23.000 --> 02:45:24.000
Mm-hmm. Okay.

02:45:24.000 --> 02:45:29.000
Just do DIR, DIR. Yeah, so…

02:45:29.000 --> 02:45:38.000
Hit enter. Yes. So basically, you have a folder called as AP underscore example. Now, do CD. Cd AP underscore example.

02:45:38.000 --> 02:45:39.000
You have testified this? Yeah. Just do auto-type completion, press tab.

02:45:39.000 --> 02:45:47.000
Okay.

02:45:47.000 --> 02:45:48.000
Obviously, yeah, that was the issue. Now do our DIR once again.

02:45:48.000 --> 02:45:49.000
Oh, that's what Zaisu, I think.

02:45:49.000 --> 02:45:59.000
You will see the file test file. Yeah, now we have a test file here, right, in this location. Now run the same thing, it will work.

02:45:59.000 --> 02:46:01.000
Yeah, it'll work. See? It's working.

02:46:01.000 --> 02:46:10.000
Sorry, sir.

02:46:10.000 --> 02:46:18.000
Galtinita. Actually, Galti nita, hot?

02:46:18.000 --> 02:46:19.000
Meh.

02:46:19.000 --> 02:46:21.000
Kuchi show.

02:46:21.000 --> 02:46:25.000
House mein. I love… Huh.

02:46:25.000 --> 02:46:28.000
I got that. Actually, what I… what I did in the morning.

02:46:28.000 --> 02:46:29.000
Hmm.

02:46:29.000 --> 02:46:43.000
I created a simple insurance small project for… to do the enrollment and create the claim. Just, I'm working in a… means I'm working in U.S. Now, so working in the same project. So I thought, let's create with this, uh, uh…

02:46:43.000 --> 02:46:48.000
Ahi.

02:46:48.000 --> 02:46:52.000
May still practice. I'm… first time I'm joining 8th grade class, and when a friend go people like you.

02:46:52.000 --> 02:47:02.000
Ik simple.

02:47:02.000 --> 02:47:03.000
Just jokeda, joked up. Yes.

02:47:03.000 --> 02:47:08.000
That is why, I mean, myself. That's fine, now it's working. Thank you so much. Now I'll handle everything, yeah.

02:47:08.000 --> 02:47:20.000
Okay, great. Fine. Next, Prasanth, you can share your screen. In… Ah, yeah.

02:47:20.000 --> 02:47:21.000
Uh-huh.

02:47:21.000 --> 02:47:25.000
Follow-up questions, Ta. Uh… API ka, toh wo open source yan, ko y aapka yuri hitne kiana, matlab… I mean to say ki koi, aapka API.

02:47:25.000 --> 02:47:30.000
Girl.

02:47:30.000 --> 02:47:35.000
But… But Juwabi, uh, additional ka johobi kiya, to go to open.

02:47:35.000 --> 02:47:38.000
What do normal subordin, eh? Huh?

02:47:38.000 --> 02:47:45.000
Gotcha. Openap. So then, uh, we can also access from Office debug karate. Joby agar host kar amatlapkar dah.

02:47:45.000 --> 02:47:46.000
Okay. If firewall has restrictions in Nicaraga.

02:47:46.000 --> 02:47:55.000
Cohesively, ha ha ha, exactly, exactly. External aaphit kariyo.

02:47:55.000 --> 02:48:02.000
In the external agar heat kartne ito, us case memo, rather.

02:48:02.000 --> 02:48:03.000
Okay, okay. Thank you, sir.

02:48:03.000 --> 02:48:04.000
Hmm.

02:48:04.000 --> 02:48:08.000
So, several other publicly… rocks, ng rocks. And you're okay.

02:48:08.000 --> 02:48:15.000
Ng log, NGROG. Roxnay, rocks, on the rocks while the Roxnay, NG rocks.

02:48:15.000 --> 02:48:22.000
And Elok. And Yurok.

02:48:22.000 --> 02:48:29.000
My skin's skin circle. Say, share screen. You have a permission. Take care.

02:48:29.000 --> 02:48:31.000
Practically na? Yeah, Jabir, you have a question? Please go ahead.

02:48:31.000 --> 02:48:32.000
Hello.

02:48:32.000 --> 02:48:40.000
Appreciate it. Yeah, I want to know the how to, like, voice chat of the Euro.

02:48:40.000 --> 02:48:41.000
Newly, yeah.

02:48:41.000 --> 02:48:47.000
So, voice chat with, uh, Yuri, right? Okay, so voice chat-wise, if you will go inside a URI, uh, so…

02:48:47.000 --> 02:49:00.000
Uh, let me share my screen. Prashant. I don't know. So, basically, if you will go here, so you can try to click, and then you can speak.

02:49:00.000 --> 02:49:01.000
And then you can try to sell it. So, sorry?

02:49:01.000 --> 02:49:08.000
This is the text-generated space. Now, it is only for sure, the text, and then send it for… then come the return.

02:49:08.000 --> 02:49:19.000
Exactly, yeah, yeah, yeah. So it's not for a real-time conversation, for real-time conversation, we have Avni. See, we have Avni. So, where you can upload your resume, and then you can do a real-time conversation.

02:49:19.000 --> 02:49:27.000
Oh, yeah, yeah, I saw your video, uh, today.

02:49:27.000 --> 02:49:28.000
Yeah.

02:49:28.000 --> 02:49:35.000
Exactly. So, Avni is for a real-time conversation, and it is… will try to take the interview multiple rounds. Even it will ask you to, like, open up the prompt, and then open up the window, and it will ask you to write a code. So this is where Avani comes into picture, and Avani is.

02:49:35.000 --> 02:49:48.000
Pure conversational AI, speech-to-speech, and you can speak in any languages. Even in a, like, English, Hindi, Tamil, Telugu, and then Arabic, multiple languages Avni can understand. So, Avni will give you always an output in English.

02:49:48.000 --> 02:49:51.000
But you can give an input in any languages. Simple. Just like HR, right? So, generally, HR speaks in English, but the candidate can speak in any languages.

02:49:51.000 --> 02:49:57.000
Oh, okay, okay.

02:49:57.000 --> 02:49:58.000
Yeah. Is this your own created, or are you gonna… is that someone API?

02:49:58.000 --> 02:50:04.000
Just like that. So we have built an abni.

02:50:04.000 --> 02:50:07.000
No, no, no, it's our… like, we are using our models, we are using API, we have done the… Yeah, so we have done a lot of engineering behind this one, right?

02:50:07.000 --> 02:50:13.000
No, I'm just curious. Yeah.

02:50:13.000 --> 02:50:15.000
And then we have created the Avni. The realm conversation one.

02:50:15.000 --> 02:50:17.000
This is the grate I saw. Thank you.

02:50:17.000 --> 02:50:24.000
Yeah, so you can experience it, it will be amazing, like, uh, it'll be amazing.

02:50:24.000 --> 02:50:38.000
Okay, sure, sure, thanks. Yeah, thanks. Okay, so, uh, Prasan, how is circular scene in Europe now?

02:50:38.000 --> 02:50:44.000
Anyone else, guys, who would like to share their screen? I can make you as a panelist first. So, Arman, Supree.

02:50:44.000 --> 02:50:47.000
Yes, that's a…

02:50:47.000 --> 02:50:48.000
I'll go findies. Those who would like to share… just a minute, just a minute.

02:50:48.000 --> 02:50:51.000
And also, I have a question without sharing my screen.

02:50:51.000 --> 02:50:56.000
So again, those who would like to share a screen, please, like, write in the chat. I'll allow you to share the screen.

02:50:56.000 --> 02:51:04.000
So, Haparshand, please go ahead.

02:51:04.000 --> 02:51:05.000
Not a login, yeah, just click on Downloads. Click on Downloads.

02:51:05.000 --> 02:51:09.000
Services.

02:51:09.000 --> 02:51:16.000
Click on Get NGRock. Login to authentication, last one option, last option, last tab.

02:51:16.000 --> 02:51:17.000
Last step. Get for free.

02:51:17.000 --> 02:51:26.000
Get angry up, okay?

02:51:26.000 --> 02:51:30.000
Set download call, and…

02:51:30.000 --> 02:51:35.000
A question A, simple, uber, uber, uber, uber, uber. Click on download, last option, and out last tab.

02:51:35.000 --> 02:51:42.000
Girly. Oh, yeah.

02:51:42.000 --> 02:51:43.000
You deserve it.

02:51:43.000 --> 02:51:47.000
Uh, so get the ABM class, man.

02:51:47.000 --> 02:51:48.000
It's okay. Okay, so download over here, take it. Open it up.

02:51:48.000 --> 02:51:54.000
We can…

02:51:54.000 --> 02:52:06.000
Anjib?

02:52:06.000 --> 02:52:11.000
Absolutely. Rightly, right click, right click, and then extract.

02:52:11.000 --> 02:52:15.000
So… We…

02:52:15.000 --> 02:52:22.000
Extract it, huh?

02:52:22.000 --> 02:52:35.000
Hmm. Well, yeah, nichadiqa extract ho, niche. I'm just Usman jake, download wo per me browser mein jaake, file browser me jake, CMD marade nahs.

02:52:35.000 --> 02:52:36.000
Uber, uber, uber, the PC, Windows user per second to download the grain hamaha pajagi ha.

02:52:36.000 --> 02:52:40.000
File the…

02:52:40.000 --> 02:52:42.000
Type CMD, type CMD. Though command prompt hold legar is location giuper.

02:52:42.000 --> 02:52:46.000
Senior Mundi.

02:52:46.000 --> 02:52:53.000
Cmd. Take a hit, hit.

02:52:53.000 --> 02:53:08.000
Cmd.

02:53:08.000 --> 02:53:17.000
Amazing. Cmd, huh?

02:53:17.000 --> 02:53:27.000
Hmm, cool to get some downloads, huh? Multiple throttle systems, PCIe.

02:53:27.000 --> 02:53:35.000
Ngrock, NGROK? Are okay, take a space?

02:53:35.000 --> 02:53:40.000
Http? Uh, auto space?

02:53:40.000 --> 02:53:46.000
Port number.

02:53:46.000 --> 02:53:47.000
They go up and running at Tiger, Tiga, up and running, yeah.

02:53:47.000 --> 02:53:51.000
I was like, yeah…

02:53:51.000 --> 02:54:00.000
Okay. Ah, leave it… no, no, no, Ari Bandho, Yapir.

02:54:00.000 --> 02:54:09.000
Simple up arrow, and then hit enter. Up arrow, hit enter.

02:54:09.000 --> 02:54:15.000
Uh, control. Arrow hit enter.

02:54:15.000 --> 02:54:16.000
Okay.

02:54:16.000 --> 02:54:19.000
Command Madlav, UV corn test app. Take a… close it, and uh…

02:54:19.000 --> 02:54:23.000
Go to command prompt, CMD. Go to CMD? Hmm.

02:54:23.000 --> 02:54:28.000
Okay.

02:54:28.000 --> 02:54:34.000
Uh, board number 8000. Hmm, hate.

02:54:34.000 --> 02:54:38.000
Oh, yeah, Ab Global, oh, yeah. Authentication failed using required a verified account and auth token.

02:54:38.000 --> 02:54:44.000
Or kill escort…

02:54:44.000 --> 02:55:01.000
But generally, local valem. Uh… Okay, then sign up KG authentication token lagai or ke aapke system kusto issue aura aapke network mein issue, actually.

02:55:01.000 --> 02:55:15.000
Ng… NG ragma sign up kanaklega, wo auth tokan dita hai, line number 1 mein.

02:55:15.000 --> 02:55:23.000
Generally, but I think upper network is the issue hai. Maybe BPN vagar, like, okay?

02:55:23.000 --> 02:55:47.000
Girls and love. Google sign up, huh?

02:55:47.000 --> 02:56:05.000
Accept, create, trigger.

02:56:05.000 --> 02:56:25.000
Oh, it's System yanked, eh.

02:56:25.000 --> 02:56:35.000
Just fill, fill anything, fill anything?

02:56:35.000 --> 02:56:44.000
Continue. Second, second option.

02:56:44.000 --> 02:56:49.000
Left-hand side, second option. Your odd token, huh? Yeah, but the copy, personal option.

02:56:49.000 --> 02:57:03.000
Token. Huh.

02:57:03.000 --> 02:57:11.000
A upper paste, but to remove for a glass wala, hot tokanda, huh? You remove, last wala part.

02:57:11.000 --> 02:57:20.000
Ah, yepura… And then you autogan was generated aapar.

02:57:20.000 --> 02:57:27.000
Hmm, hinter? So you get auto and say, okay, up, like, ngrock, per se.

02:57:27.000 --> 02:57:28.000
So, bus entity? Okay?

02:57:28.000 --> 02:57:42.000
Are okay. Space, HTTP, space port number.

02:57:42.000 --> 02:57:43.000
Oh, yeah. You wanna…?

02:57:43.000 --> 02:57:48.000
So, abiska use karke apan… agarisk.

02:57:48.000 --> 02:57:58.000
No, no, no. Localhosting, localhost, localhost system, app nahatag.

02:57:58.000 --> 02:57:59.000
Yellow portion, huh? Only that portion. Tps, you know, whoa?

02:57:59.000 --> 02:58:08.000
Yellow portion.

02:58:08.000 --> 02:58:12.000
No matter who URL access karke apanisa, madlab.

02:58:12.000 --> 02:58:16.000
Can you say? Exactly, huh? Well, globally, you are logged? Okay.

02:58:16.000 --> 02:58:18.000
Let's go and dig…

02:58:18.000 --> 02:58:23.000
So, next, uh, Rajiv can share, uh, Rajiv, and after that, Abhjay can share the screen.

02:58:23.000 --> 02:58:28.000
Yeah, so Rajee, please share your screen.

02:58:28.000 --> 02:58:29.000
Yeah, Arman, in between, please go over the question. Yeah, what is the question, Arman?

02:58:29.000 --> 02:58:35.000
No filibust me. So, we can hook the database also from the API, right?

02:58:35.000 --> 02:58:36.000
We can, we can… You can hit anything, anything is literally anything.

02:58:36.000 --> 02:58:42.000
Again, databases from eBay, right? You know, using…

02:58:42.000 --> 02:58:50.000
See, whatever you can do in terms of programming, right? So, technically, you are just trying to expose it via an API, that's it.

02:58:50.000 --> 02:58:54.000
Means you can do literally anything. Api is not having any set of a rule that you can't do this, you can't do that.

02:58:54.000 --> 02:59:00.000
Whatever you can do in programming, simple, with the help of API, you are exposing it to the outer world.

02:59:00.000 --> 02:59:12.000
Whether it's data that you are trying to fetch, whether it's a store that… data storage you are trying to do, whether it's a streaming that you are trying to do, whether it's a execution of the model or execution of the simple function that you're trying to do, everything means everything.

02:59:12.000 --> 02:59:17.000
My pleasure, this is right. For example, I have a database on my local system.

02:59:17.000 --> 02:59:18.000
Hmm. Hmm. Hmm.

02:59:18.000 --> 02:59:25.000
And I want to export some of my data. To, uh, to other users. So, by using this fast API, can we do that?

02:59:25.000 --> 02:59:30.000
You can do it, obviously, you should write one function, right? Just write one function. The way we have written add function, right?

02:59:30.000 --> 02:59:38.000
So let's suppose you are writing one function. Now, what that function will do, so that function will try to extract a data from your database.

02:59:38.000 --> 02:59:43.000
So, a kind of a data or amount of the data that you would like to expose.

02:59:43.000 --> 02:59:49.000
Symbol. So there is a function. So let's suppose I have an employee table. Now, inside the employee table, I have a multiple column.

02:59:49.000 --> 03:00:02.000
I don't want to showcase, like, all the columns or all the data to, uh, maybe, like, other person. So what I will do, I'll just try to write select column name, and then maybe I can try to put the limit over there that only this many records, and only two columns, not 10 columns.

03:00:02.000 --> 03:00:08.000
So, that function will try to, like, fetch that many number of columns, only two columns.

03:00:08.000 --> 03:00:14.000
And you are exposing that function with the API. Simple. So that whoever will hit the API, they will be able to see only those two columns.

03:00:14.000 --> 03:00:18.000
Literally no function, we have to define the column under a value.

03:00:18.000 --> 03:00:19.000
Obviously, yes, yeah, yeah, so function will return that.

03:00:19.000 --> 03:00:27.000
Directly… My next question is possible. So, for example, I have an API code written in .NET systems, right?

03:00:27.000 --> 03:00:28.000
Mm-hmm. Hmm.

03:00:28.000 --> 03:00:37.000
So that I have workers that we host the API. Only… by using the IIS. So, for example, if I want to expose that data to other users, not locally the client side.

03:00:37.000 --> 03:00:39.000
Haha, okay.

03:00:39.000 --> 03:00:44.000
So, that code, I have to convert into Firestore API, and then using engine log, I have to expose it, or is there any other way?

03:00:44.000 --> 03:00:49.000
If it is running in your local machine, if something is running in your local machine, then.

03:00:49.000 --> 03:00:59.000
We try to use a ngrock so that I can expose it to anyone out there, right? Let's suppose same database, same codebase that you are talking about, it's running on cloud.

03:00:59.000 --> 03:01:05.000
So, if something is running on cloud, so can I say that it's already available over the internet?

03:01:05.000 --> 03:01:22.000
Your system is not available over the internet, right? But if something is running on cloud, cloud is already available over the internet. So, in that way, you don't have to even use NGROG, you can just share the public IP address, or whatever endpoint that you are going to create, and people will be able to access it the way we are doing it for Yuri.

03:01:22.000 --> 03:01:27.000
So first, I have to convert that .NET code into the Fast API Python code, right?

03:01:27.000 --> 03:01:30.000
No, no, no, so for Dorton… see, no, no, no, no, no.

03:01:30.000 --> 03:01:41.000
Net is another programming language, right? A different programming language. Fastapi is a framework, not a programming language. Fastapi is written in which language?

03:01:41.000 --> 03:01:49.000
Python, right? So, for .NET, let me tell you the framework, even I don't know, like, what is the framework, I never put it in a .NET.

03:01:49.000 --> 03:01:55.000
I know Java, and so.

03:01:55.000 --> 03:02:02.000
Well, API creation, yeah? So, in .NET, let me see, uh, how to create the API.

03:02:02.000 --> 03:02:06.000
Yeah, so I think ASP.NET Core is by default giving you API creation.

03:02:06.000 --> 03:02:20.000
Yeah, by default, it is giving you the API creation, so you will be able to create the API without any kind of framework. You don't have to use… So, Flask is… sorry, this fast API, or Flask, that I'm trying to say. So, basically, this is a…

03:02:20.000 --> 03:02:24.000
Framework where you can convert your Python code as an API.

03:02:24.000 --> 03:02:38.000
Only for Python code. Let's suppose if you're writing into a .NET, right? So, obviously, you have to write your function into a .NET, and then you have to use a .NET framework, a .NET library to convert something into an API. If you're writing something into a Java, so Java, so that.

03:02:38.000 --> 03:02:46.000
See, API is a neutral entity, right? So, whatever native language that you're trying to use, you have to use a framework for that native language.

03:02:46.000 --> 03:02:49.000
I don't mind. I'm still confused.

03:02:49.000 --> 03:02:55.000
Was recorded, basically, different frameworks or different languages. I was wondering that when we are using.

03:02:55.000 --> 03:03:01.000
Uh.net framework host that API. I want to expose that using Python, so that was my concern.

03:03:01.000 --> 03:03:10.000
No, in .NET SO, I can see over here, so as per my search, so there is something called system.bib.http, which will help you out to get the API. So it's by default inbuilt inside the .NET Core.

03:03:10.000 --> 03:03:21.000
If my database is whatever language, for example, MSSQL or SPL Server, so if I want to expose that data using PastEP, then I can directly call that.

03:03:21.000 --> 03:03:24.000
Column names, or whatever it I want, right? Okay.

03:03:24.000 --> 03:03:28.000
You have to write a function in Python, technically, right? That function is calling your database.

03:03:28.000 --> 03:03:33.000
So, I believe you know that how we can establish our connectivity with the databases, right? Let's suppose if you have.

03:03:33.000 --> 03:03:43.000
Mysql. So, obviously, I have to install a SQL driver, and maybe pip install MySQL driver I have to install, and then I have to establish the connection by giving a user ID and password.

03:03:43.000 --> 03:03:48.000
So, that will be the core function which will be calling your databases.

03:03:48.000 --> 03:03:49.000
Now, you are exposing that function as an API, right? So, simple, add function example I have given to you.

03:03:49.000 --> 03:03:53.000
Okay.

03:03:53.000 --> 03:03:57.000
Now, here you are trying to pass two inputs, A and B. It is trying to give you some return.

03:03:57.000 --> 03:04:03.000
Yeah? And you are trying to explore that add a function as an API, so that anyone can use my add function. Similarly.

03:04:03.000 --> 03:04:10.000
You will write a function. Function is calling you databases, and that whole function you are exposing to the outer world with the API.

03:04:10.000 --> 03:04:16.000
So, one last thing. Can I explain a difference between the endpoint and that API key.

03:04:16.000 --> 03:04:27.000
So, endpoint is basically the URL. For example, I was running something, right? Local host and port number, and then slash dahansu.

03:04:27.000 --> 03:04:28.000
Okay, mhm.

03:04:28.000 --> 03:04:35.000
Slash XYZ, right? Now, that URL is called as endpoint. Fine? Now, so today, the API that we have created, so it was a exposed one. Exposed one means there was no authentication.

03:04:35.000 --> 03:04:48.000
Means anyone can access it. Yeah? But what I will do tomorrow, when I will show you the example, so what I will do, so I'll try to apply the authentication. Means, without a password, you will not be able to access it, and that is called as API key.

03:04:48.000 --> 03:04:50.000
Okay, fair, whoop.

03:04:50.000 --> 03:05:04.000
Got it. Today, I have created the URL, right? So, I have exposed it with the help of ngrock, and all of you were able to use it directly, right? But same in case of Yuri API, you will not be able to… even though you have an endpoint, but without API key, you will not be able to use it.

03:05:04.000 --> 03:05:07.000
So, basically, those APIs are the secured one. So, basically, your password, simple. Api key is nothing but password.

03:05:07.000 --> 03:05:11.000
Oh, good one.

03:05:11.000 --> 03:05:19.000
As simple as that. That you are trying to access my function with the help of API, like, that endpoint, you're trying to access my function, right?

03:05:19.000 --> 03:05:23.000
But, to access my function, you have to give me a password. Otherwise, I will not allow you.

03:05:23.000 --> 03:05:26.000
That is called as authentication, or key. Notice? Okay. Yeah.

03:05:26.000 --> 03:05:31.000
Thank you.

03:05:31.000 --> 03:05:37.000
Okay, so just wait, uh, uh, yeah, so Rajiv, share your screen, please, and then… Mughes is also saying… saying he would like to share his screen. Pain Mukesh, you will… you can share.

03:05:37.000 --> 03:05:42.000
Uh, yet…

03:05:42.000 --> 03:05:45.000
Yeah, as you go ahead. Share screen.

03:05:45.000 --> 03:05:48.000
As soon as… Hello?

03:05:48.000 --> 03:05:56.000
In between, just a minute, Mukesh, join as a panelist, so that you can share your screen.

03:05:56.000 --> 03:05:57.000
Uh, yes, yeah, I can see your screen.

03:05:57.000 --> 03:06:01.000
Are able to see my screens? That's it, sir?

03:06:01.000 --> 03:06:09.000
Um, but the year… hai.

03:06:09.000 --> 03:06:20.000
I'll talk about Putin?

03:06:20.000 --> 03:06:29.000
Host me palli hamne. Lecture upload kiya vata. Toh egbar, kam…

03:06:29.000 --> 03:06:44.000
Last week bhi aapko yehi bohata. Danar.

03:06:44.000 --> 03:06:53.000
Se bhi.

03:06:53.000 --> 03:06:54.000
Teague? Is it T.

03:06:54.000 --> 03:07:00.000
Aka.

03:07:00.000 --> 03:07:07.000
And they, honestly speaking, many Python installed together, but I am not sure if he will…

03:07:07.000 --> 03:07:09.000
Hmm. Hmm, hmm.

03:07:09.000 --> 03:07:18.000
Who are working this is who, uh… Or automatic videos are paid.

03:07:18.000 --> 03:07:19.000
Gotcha.

03:07:19.000 --> 03:07:33.000
Preloaded hain. Believe me, you will be comfortable. Otherwise, we struggle johana, we struggle barbar attire.

03:07:33.000 --> 03:07:34.000
Period. Okay.

03:07:34.000 --> 03:07:41.000
To go bottom of a puzzle go up. Okay, so, uh…

03:07:41.000 --> 03:07:42.000
Does other… Ah, how are you getting ridiculous.

03:07:42.000 --> 03:07:45.000
So, may I… Abhishek this same thing.

03:07:45.000 --> 03:07:53.000
Ignorant, ignorant. So, who is going to share their screen? Rajiv Nav, he has already shared. So, Abhishek can share their screen, and in between.

03:07:53.000 --> 03:07:54.000
Let me take some doubt. So, Supreme, what is your doubt?

03:07:54.000 --> 03:07:55.000
Thank you, sir.

03:07:55.000 --> 03:07:56.000
Uh…

03:07:56.000 --> 03:07:58.000
Am I audible? Hello? Thank you, sir. Thank you for the amazing class.

03:07:58.000 --> 03:08:02.000
Yes, it'll be your auditable. Yes, yeah. Thank you.

03:08:02.000 --> 03:08:09.000
Yeah, uh, so I've subscribed for, uh, the… bootcamp class of, uh, which started on…

03:08:09.000 --> 03:08:10.000
Okay.

03:08:10.000 --> 03:08:20.000
August 2nd. On the previous class, I was able to access the link in the dashboard itself, but today it is asking to subscribe again. So I wanted to move into Euron+, but.

03:08:20.000 --> 03:08:21.000
I wanted to schedule.

03:08:21.000 --> 03:08:27.000
Subscribe, link subscribe, then that is a Zoom link, that is not called as, uh, like, a plus subscription or something.

03:08:27.000 --> 03:08:31.000
Which one you're talking about? Like, Zoom link you were saying, or what? Because…

03:08:31.000 --> 03:08:37.000
No, it was asking me to… for subscribing, so, like, uh… One sec. I'll just take a Zoom thing.

03:08:37.000 --> 03:08:49.000
No, no, no, no, no, but I'm not able to get this point. Uh, so basically, you are trying to… you are able to see your class, right? You are able to basically see the dashboard, and inside that link, and, like.

03:08:49.000 --> 03:08:50.000
No, no, it is asking me to buy again. So, by this course, that's 3,300 today.

03:08:50.000 --> 03:08:55.000
Uh, the material… no.

03:08:55.000 --> 03:08:56.000
Hi, you've said you have already, like, uh…

03:08:56.000 --> 03:09:06.000
Or unlock… Yeah, I bought this. That is how I've joined this class, right? I have got the meeting ID from the previous class, like.

03:09:06.000 --> 03:09:07.000
Hmm, hmm.

03:09:07.000 --> 03:09:13.000
I was able to join, uh, the previous class because I was able to access the link from the dashboard itself. But today, it is asking me to buy this course again.

03:09:13.000 --> 03:09:17.000
So, since I had the meeting ID, I was able to join this class today, but also it will have been difficult for me.

03:09:17.000 --> 03:09:27.000
No, if you have already bought something, then why it is asking? It should not ask. Maybe just do one thing. So, uh, connect with Divyanshu, or maybe drop a mail.

03:09:27.000 --> 03:09:33.000
Uh, by, uh, maybe you, on your mail, right? So we have sent you the, uh, invoices, right?

03:09:33.000 --> 03:09:34.000
Yeah.

03:09:34.000 --> 03:09:39.000
So, the invoice will check from the backend, but that is not an issue, that is a very rare case. I mean, like, no one is facing such kind of problem.

03:09:39.000 --> 03:09:43.000
There may be some issues, no? Uh, he's trying to log in with different, uh, phone number.

03:09:43.000 --> 03:09:45.000
Uh, that is the issue, exactly. Hmm.

03:09:45.000 --> 03:09:50.000
Because, yeah, because even in my case, I had issues. I already enrolled.

03:09:50.000 --> 03:09:51.000
Like, four or five, uh, like, months back, when you have launched that.

03:09:51.000 --> 03:09:54.000
Hmm. Hmm.

03:09:54.000 --> 03:10:01.000
And then I was trying, and then it says, uh, no, no, you, uh, you need to, again, re-log in and all, so…

03:10:01.000 --> 03:10:02.000
No, but this is the… this is the mail ID that I've registered to, and this is the only account I have.

03:10:02.000 --> 03:10:20.000
Uh, so, Subrim, you're, you're… So, yeah, with whatever, with whatever mail ID, or maybe phone number, right? Maybe you have used a phone number at that point of a time, uh, while purchasing the batches. Just use the exact same ID, then, uh, like, it will work. Otherwise, if you have, like, log in through a mail ID and then.

03:10:20.000 --> 03:10:23.000
Accessing it through a phone number, then… there might be a conflict.

03:10:23.000 --> 03:10:28.000
This is the only mail ID I have, this is the only…

03:10:28.000 --> 03:10:30.000
Not an issue. So you must have received the invoices, please send that invoice to the Gansu, or maybe over the mail, from our backend, they will check.

03:10:30.000 --> 03:10:33.000
Yeah. Sure, sure, definitely, so thank you so much. So, eventually, should I drop it on the same mail thread, or which I got the invoice, or is it the same?

03:10:33.000 --> 03:10:39.000
Yep. Yeah. From backup development.

03:10:39.000 --> 03:10:44.000
Ping him, ping him personally, he's already a part of your, like, group.

03:10:44.000 --> 03:10:45.000
Oh, no, I'm sorry, I didn't join the group as well. What's WhatsApp group?

03:10:45.000 --> 03:10:53.000
He's another admin. Okay, not an issue. So, just drop a mail… CC me, CC me, just dahanshu at the rate euron.1.

03:10:53.000 --> 03:10:56.000
Right, with your invoices. Just send me an email, I'll forward it to the team.

03:10:56.000 --> 03:10:58.000
I'm sure it in your own.com.

03:10:58.000 --> 03:11:09.000
Yeah. Sounds to SUDH, NSHU at the rate, you round out 1. That is my official mail ID. Uh, so, uh… Yeah, so I think Suprit… yeah, Supree, that is the one. No, no, no, S-U-D-H.

03:11:09.000 --> 03:11:16.000
Let me type. So, my official mail ID is SUDHNSHU at the rate uron.1.

03:11:16.000 --> 03:11:19.000
Uh, we'll check from the backend. But yeah, ideally, that should be the issue. I mean, like.

03:11:19.000 --> 03:11:22.000
Thank you so much.

03:11:22.000 --> 03:11:25.000
Otherwise, I don't see any issue in your system so far, yeah?

03:11:25.000 --> 03:11:26.000
Sure, sure. Thanks, yeah.

03:11:26.000 --> 03:11:27.000
Okay, okay.

03:11:27.000 --> 03:11:34.000
Best way to see the invoices, and there you can able to see, like, till what date you're access is there, like, till.

03:11:34.000 --> 03:11:35.000
2026 and all, so use that mail ID, yeah.

03:11:35.000 --> 03:11:41.000
Uh… hmm, yeah. Yeah, thanks. Just, just, just, just, just…

03:11:41.000 --> 03:11:42.000
My, uh, issues is… I'm setting my screen.

03:11:42.000 --> 03:11:43.000
So, good afternoon, sir. Bishek this side.

03:11:43.000 --> 03:11:49.000
Yeah, so just a minute, Mukesh is sharing his screen. I'm sorry, Abhisakh is sharing his screen.

03:11:49.000 --> 03:11:50.000
Yeah, look… No, it is mine. It's mine.

03:11:50.000 --> 03:11:51.000
Yeah. Yeah, it's my spin.

03:11:51.000 --> 03:12:01.000
Okay. Okay, fine. I… just a minute. So I can see Mukesh's screen, I can see I'm saying both's screen. Uh, we have a donor screen. Okay, yeah, I'm okay, so first of all, yours, and then, uh, Visay X.

03:12:01.000 --> 03:12:02.000
Yeah. Just, just do one thing. Switch off, switch off your virus, switch off your, like, virus protection.

03:12:02.000 --> 03:12:12.000
So, I'm trying to download this one, but it says wireless detected. I think someone has just…

03:12:12.000 --> 03:12:16.000
A former setting, go to Windows, and then search for protection.

03:12:16.000 --> 03:12:23.000
Or setting… No, no, no, I think you are typing something random.

03:12:23.000 --> 03:12:35.000
So, uh, protection… yes, just go into that setting. Now, on this one, privacy and security. Go to that one.

03:12:35.000 --> 03:12:41.000
Division security. Yeah, so window security, top, the very first one.

03:12:41.000 --> 03:12:50.000
Click over there. Yeah. Now, so, just, uh, come down, and then…

03:12:50.000 --> 03:12:54.000
No, go up, go up, go up. Yeah, open window security.

03:12:54.000 --> 03:13:04.000
Click on Open. Security. And now, virus and threat protection, click over there.

03:13:04.000 --> 03:13:11.000
Now, go up… somewhere you will get an option for…

03:13:11.000 --> 03:13:16.000
Like, uh, disabling it. If you… can you please cross the… yeah, above one, okay.

03:13:16.000 --> 03:13:23.000
Now, go to the previous screen. Previous, previous screen? Yeah, minimize this. Go to the settings screen.

03:13:23.000 --> 03:13:28.000
Setting, setting screen. That's the previous one, the behind screen. Yeah, this one. The behind one that was open, right?

03:13:28.000 --> 03:13:34.000
Okay.

03:13:34.000 --> 03:13:46.000
The setting one, yeah, setting screen. And virus and threat protection, account protection, firewall network protection.

03:13:46.000 --> 03:13:47.000
Wider than would…

03:13:47.000 --> 03:13:52.000
Virus and thread, click over there. Even, uh, just a minute, in my system also, I can check…

03:13:52.000 --> 03:13:58.000
So, privacy and security, window security. Virus and threat protection.

03:13:58.000 --> 03:14:05.000
And, uh… Yeah, so just, just go to virus and threat protection, simple.

03:14:05.000 --> 03:14:12.000
Hmm. Now, quick scan, uh, you can come down. Allow thread, allow threads. Click on allow threads.

03:14:12.000 --> 03:14:25.000
This one, this one, quicker scan, uh, yeah, allow thread. Protection, history, privacy…

03:14:25.000 --> 03:14:36.000
Just a minute…

03:14:36.000 --> 03:14:51.000
Openos, update, and security, window security.

03:14:51.000 --> 03:14:58.000
Update…

03:14:58.000 --> 03:15:08.000
Update and security… fine.

03:15:08.000 --> 03:15:13.000
Yeah, just do one thing. So, directly try to, uh, call.

03:15:13.000 --> 03:15:17.000
But it will go to the same location, even in my system going to the same location.

03:15:17.000 --> 03:15:24.000
And virus and threat protection. Manage setting. Okay, fine, got it.

03:15:24.000 --> 03:15:29.000
So, go to Wireless Network Protection. Tim? First one, first option, first option. Yeah. Now, go to Manage Setting.

03:15:29.000 --> 03:15:32.000
Yeah, yeah.

03:15:32.000 --> 03:15:38.000
Manage setting, manage setting, the below one. Yeah, manage setting. Now, from here, turn off. Yeah, real-time protection, off.

03:15:38.000 --> 03:15:46.000
Good reputation of.

03:15:46.000 --> 03:15:57.000
Yeah, so… switch off. So it's off, now try download.

03:15:57.000 --> 03:16:00.000
Not only, right? That was the only issue. Your Windows system.

03:16:00.000 --> 03:16:03.000
It was downloaded also, uh, the last time, I mean, last minute, it says, uh.

03:16:03.000 --> 03:16:08.000
Okay, so after download, it is giving you the issue. Okay, just wait, just wait.

03:16:08.000 --> 03:16:10.000
We'll see. Now it's none. Yeah, yeah.

03:16:10.000 --> 03:16:15.000
Downloaded. Okay, and uh… from here, we need to, uh, type CMD there directly.

03:16:15.000 --> 03:16:20.000
You know. Yeah, Goins has the same directory.

03:16:20.000 --> 03:16:22.000
It's inside JIP, so you have to ungyp it, by the way.

03:16:22.000 --> 03:16:24.000
That's already here.

03:16:24.000 --> 03:16:29.000
So, yeah.

03:16:29.000 --> 03:16:38.000
Extract all. Down, down, down, down, down, yeah, extract all, yes.

03:16:38.000 --> 03:16:49.000
Yeah, now from here, you have to go to CMD.

03:16:49.000 --> 03:16:55.000
Yeah, now from here, so NGRock space HTTP steps, port number.

03:16:55.000 --> 03:16:57.000
If your program is running.

03:16:57.000 --> 03:17:04.000
Yeah, program is running.

03:17:04.000 --> 03:17:11.000
Hmm, it's up and running again. So…

03:17:11.000 --> 03:17:20.000
Not be fun.

03:17:20.000 --> 03:17:28.000
Go again inside the directory, not an issue, wherever you have unzipped it.

03:17:28.000 --> 03:17:29.000
And, you know, ROK? Space, HTTP.

03:17:29.000 --> 03:17:34.000
Nd, a rock. Yeah, good.

03:17:34.000 --> 03:17:39.000
Http space 8000 port number. Not column, not column space. Space. Space, space, yeah. Space, 8,000, point number.

03:17:39.000 --> 03:17:44.000
Http space.

03:17:44.000 --> 03:17:49.000
Wherever your application is running. Yeah, enter. Hmm.

03:17:49.000 --> 03:18:09.000
So, you have to add the authentication token. Again, there is a network issue. So go to ngrock, log in, and then add…

03:18:09.000 --> 03:18:17.000
It's below, yeah, yeah. Hmm, add it.

03:18:17.000 --> 03:18:26.000
Enter. Added, now execute the same thing.

03:18:26.000 --> 03:18:31.000
It's working now. You are able to see the URL, right? Https URL, yeah, that one.

03:18:31.000 --> 03:18:37.000
Hmm, this one. So now, this URL is equivalent to your localhost 8000.

03:18:37.000 --> 03:18:42.000
It will activate.

03:18:42.000 --> 03:18:51.000
Yeah. Visit side? Hmm, now it's working. Slash docs?

03:18:51.000 --> 03:18:56.000
So that you can… See the Swagger UI? Do you see us? Yeah.

03:18:56.000 --> 03:18:57.000
It's available, right? Hmm. Okay, yeah. Now, Abhishek, your screen, I can see.

03:18:57.000 --> 03:19:04.000
Thank you. Yeah, yeah, thank you.

03:19:04.000 --> 03:19:05.000
Mm-hmm.

03:19:05.000 --> 03:19:13.000
Yeah, hi, good afternoon, sir. We should decide this side. So, I'm from non-tech background. Unfortunately, I'm unable to run this fork. I have installed past API and, uh.

03:19:13.000 --> 03:19:16.000
Uvcon, but still… the error is occurring.

03:19:16.000 --> 03:19:23.000
Okay, so terminal, I think you have opened up the Python terminal directly. Just do CTRL-C, Ctrl-C?

03:19:23.000 --> 03:19:25.000
Ctrl-c, Ctrl-C. Well, it's not working.

03:19:25.000 --> 03:19:30.000
Yeah, yeah.

03:19:30.000 --> 03:19:37.000
No, no, it will… just a minute.

03:19:37.000 --> 03:19:39.000
Give me control. I can take control from here. Gimme Gonzul.

03:19:39.000 --> 03:19:43.000
Yeah. Okay.

03:19:43.000 --> 03:19:52.000
Yeah, so I have a control of your screen. So, just delete this one, delete this one, delete this one.

03:19:52.000 --> 03:19:58.000
Deliver to this one, let me… make it bigger for me.

03:19:58.000 --> 03:20:06.000
Yeah. And, uh, here, so basically, you have from FastAPI, FastAPI add.run.

03:20:06.000 --> 03:20:15.000
Okay, fine. So, it's available, AI, BIR… Inside that, you have a folder called as API.

03:20:15.000 --> 03:20:17.000
So, basically, here you have a… pilots. So, let me do…

03:20:17.000 --> 03:20:22.000
Mm-hmm. Okay.

03:20:22.000 --> 03:20:26.000
Let me do DIR. So, see, here you have API.py file, right? So, inside this, if I have to execute this Python file, just as a Python file, so Python.

03:20:26.000 --> 03:20:31.000
Yes.

03:20:31.000 --> 03:20:39.000
Api.py, and it will be executed as a Python file. So basically, uh, you have not saved it, so CTRL-S all the time you have to do.

03:20:39.000 --> 03:20:40.000
And now, you will see the output, 7, right? So, 3 plus 4 is equal to 7.

03:20:40.000 --> 03:20:44.000
Okay. Yes.

03:20:44.000 --> 03:20:49.000
Now, if you have to convert this as an API, so at the rate app.get.

03:20:49.000 --> 03:20:50.000
To get… yes.

03:20:50.000 --> 03:20:56.000
Yep, and then you can try to pass the route over here. So maybe your name is Abhishek, right? So I'm giving a name, H-I-S-H-E-K, Abhishek.

03:20:56.000 --> 03:20:58.000
Correct.

03:20:58.000 --> 03:21:03.000
As a route. I will say it's class, let's suppose Iv6, add a method as a route.

03:21:03.000 --> 03:21:04.000
Okay.

03:21:04.000 --> 03:21:10.000
I'm going to give. Now, if I have to execute this one, so how I can execute it? So, for that, UV corn. You have already installed the UV corn, right?

03:21:10.000 --> 03:21:11.000
I'll go find then. So, UVCon, and then what is the file name? So, file name is API.

03:21:11.000 --> 03:21:15.000
Yes, yes.

03:21:15.000 --> 03:21:20.000
Apa.

03:21:20.000 --> 03:21:21.000
Yes.

03:21:21.000 --> 03:21:28.000
So, API, so, and hyphen, uh, sorry, hyphen app. Yep. And I can try to hit enter, so now it will become the API, and it will up and running. See, my API is up, 127.0.0.1.

03:21:28.000 --> 03:21:29.000
Yes.

03:21:29.000 --> 03:21:38.000
8000 board. Now you can open up your Google Chrome, and then, like, the way we were trying to do a testing, we can do a testing in the same way. But yeah, now it's exposed.

03:21:38.000 --> 03:21:39.000
Would it? Yeah, and if you get stuck, let me know. I can, like, do things.

03:21:39.000 --> 03:21:43.000
Okay, thank you so much. I'll do the remaining things. Sure, sure. Thank you so much, sir.

03:21:43.000 --> 03:21:45.000
Again, thanks, yeah. Yeah, but a lot, you can share their screen in between, so… Yeah.

03:21:45.000 --> 03:21:49.000
Yeah. Uh, sudanbestoin, I can ask, I'm Naresh. Uh, Yazidan. So, basically, I have a question on Euro platform.

03:21:49.000 --> 03:21:55.000
Are you honest, please go ahead.

03:21:55.000 --> 03:21:56.000
Okay.

03:21:56.000 --> 03:22:03.000
So, uh, the one, uh, uh, Euro API you are giving, and as well as Euro chart interface you are giving.

03:22:03.000 --> 03:22:04.000
Yes, yeah, yeah, yeah.

03:22:04.000 --> 03:22:11.000
So, a chart interface, if I do anything, it won't deduct my API token count, right?

03:22:11.000 --> 03:22:12.000
So it is completely independent.

03:22:12.000 --> 03:22:18.000
No, not at all, not at all. So, token… Yeah, completely independent. That's the reason, so we have kept both the system, like, separate, right? So…

03:22:18.000 --> 03:22:30.000
Your API token we use to showcase, and for chat, you have a different quota. So that 1 lakh token limit that we are saying, right? So that, you will not consume in a chat.

03:22:30.000 --> 03:22:31.000
Hmm.

03:22:31.000 --> 03:22:37.000
Got it, okay. And my second question… Uh, see, I… I have, uh, I am from, actually, a different Node.js programming background.

03:22:37.000 --> 03:22:42.000
Okay, okay.

03:22:42.000 --> 03:22:43.000
Okay.

03:22:43.000 --> 03:22:48.000
Uh, so I'm trying to build a Y system. So, uh… Basically, I have done the voice system using, you know, browser speech recognition and browser, uh.

03:22:48.000 --> 03:22:50.000
Hmm, hmm.

03:22:50.000 --> 03:23:02.000
Text-to-speech. So, which is working fine, only problem I am facing, it is not real-time, because when you are speaking, you were text-to-speech, you have to, you know, stop all this configurations I am not able to do.

03:23:02.000 --> 03:23:03.000
Uh, because basically it is not a full duplex OS integration, right?

03:23:03.000 --> 03:23:07.000
Hmm. Hmm, hmm, hmm.

03:23:07.000 --> 03:23:15.000
So I'm wondering, now, Avani, what is the tech stack you have been using to achieve this? And, you know, stream the audio chunks and all?

03:23:15.000 --> 03:23:29.000
Yeah, so basically, see, what we are doing, so chunk by chunk, it looks like that it's streaming, right? But what we have done from our backend, so we have basically broken down each and every chunk, and then we are trying to concatenate it in a real time.

03:23:29.000 --> 03:23:38.000
Then we are sending it to the model, then model is giving us back, then again, we are trying to convert it, and we are doing it so, like, a fast and a smooth way that it was, like, real time.

03:23:38.000 --> 03:23:41.000
And it is able to even understand 1 hour of chat.

03:23:41.000 --> 03:23:51.000
So, it's like a core engineering that we have done. Ticket stack-wise, it's just a simple Node.js that we are using. Uh, text-to-speech, like, uh, models we are trying to use, and, uh.

03:23:51.000 --> 03:23:56.000
Couple of APIs we are trying to use it. But it's some core engineering that we have done from our side.

03:23:56.000 --> 03:24:06.000
So, let me correct if I'm not wrong. You are not using any frameworks like LiveKit or PipeCat.

03:24:06.000 --> 03:24:07.000
No.

03:24:07.000 --> 03:24:19.000
No, no, no. We are trying to, like, take your input, we are trying to break it down into a smaller, small pieces, with technically small, small chunks, we are sending those input to the model, so that the model will be able to understand the syntax sentiment, uh, that you are trying to showcase inside that one.

03:24:19.000 --> 03:24:24.000
And, uh, again, accordingly, like, it is giving us a response. So again, it is giving us a response into a text, we are converting into a speech.

03:24:24.000 --> 03:24:36.000
Yeah. Okay. And my last question. So, this is, like, coming to a pricing pattern of, you know, real-time voices, and so I have tried…

03:24:36.000 --> 03:24:43.000
A live kit with, you know, deep Chrome, uh, DeepGrum API, or Google text-to-speech, or speech-to-text.

03:24:43.000 --> 03:24:44.000
Yeah, everything is like a burning money. If you calculate.

03:24:44.000 --> 03:25:03.000
Hmm. Exactly, that's the reason, so… and again, we are, like, giving it something for a very, very affordable price, right? So, people like us can't integrate those direct APIs. It will create an overhead, because again, API is fine, but you have to host a system on your platform, on your server, right?

03:25:03.000 --> 03:25:10.000
So again, server cost, API cost, DB cost, a lot of things, uh, falls into a picture. That's the reason, so we have designed our own optimized solution.

03:25:10.000 --> 03:25:12.000
Yeah, uh, that's what I understand. Thank you.

03:25:12.000 --> 03:25:17.000
Yeah, yeah, thanks. Okay, so, uh, Prabhat, you are sharing your screen?

03:25:17.000 --> 03:25:21.000
No, I don't think so. Ramesh, you have a question? Please go ahead.

03:25:21.000 --> 03:25:22.000
Hi, students, I have a question.

03:25:22.000 --> 03:25:23.000
Yep. Yeah, uh, sir, I heard the comp… yeah, I heard a couple of questions, sir. In my process.

03:25:23.000 --> 03:25:28.000
Yeah, please go ahead.

03:25:28.000 --> 03:25:32.000
Uh, we have the 10K records from the multiple page, right?

03:25:32.000 --> 03:25:38.000
Uh, so we used the Python code to get the APA one by one.

03:25:38.000 --> 03:25:45.000
So, in this case, when the message, right, when we extract the 4,000 rows, every time it extracts the 1000 rows.

03:25:45.000 --> 03:25:51.000
But it is coming in our Python memory, I think, when we run the… when we process the Python code, it is flowing on the… Yeah, it is, I'm the Python memory.

03:25:51.000 --> 03:25:57.000
A realtor, Ram, yes, yeah. Mm-hmm, hmm. Hmm.

03:25:57.000 --> 03:26:07.000
Uh, but Optra 10 call, right? After 10 call, it can concatenate all the pro… response, then finally we can store the data into storage location.

03:26:07.000 --> 03:26:08.000
Yes?

03:26:08.000 --> 03:26:14.000
So, yeah, so my question is that, is there any efficient way to avoid this sequence process?

03:26:14.000 --> 03:26:17.000
According to your experience?

03:26:17.000 --> 03:26:27.000
So basically, you are trying to say that you don't want to, like, hold something into a memory, uh, basically RAM, right? So you are trying to reduce the conjunction of your RAM. This is what you're trying to say?

03:26:27.000 --> 03:26:34.000
No, no, what is my expectation right now? Uh, we have the 10K rows, right, but on the API.

03:26:34.000 --> 03:26:35.000
It is starting, uh, for every API call, it is extracting the 1000 rows.

03:26:35.000 --> 03:26:39.000
Hmm. Hmm.

03:26:39.000 --> 03:26:40.000
Hmm. Hmm. Hmm, hmm.

03:26:40.000 --> 03:26:48.000
1k ruse. So, overall, it is taking the 10 calls. So, but right now, it runs in the sequential patient.

03:26:48.000 --> 03:26:49.000
Hmm.

03:26:49.000 --> 03:26:59.000
But is there any way, will there be any way to run in parallel, and we can consume as soon as possible, that's?

03:26:59.000 --> 03:27:00.000
Yeah, within the one table, within the one table, uh. Yeah.

03:27:00.000 --> 03:27:12.000
Run it in parallel, and you can consume it as soon as possible. So, in that case, you should use a… Messaging, yeah. Yeah. So, basically, if you have, like, run it in a real time, so just use some messaging system, for example, Kafka, Kinesis.

03:27:12.000 --> 03:27:17.000
So Kafka is one of the best, I would say. If you would like to consume it in a real time.

03:27:17.000 --> 03:27:18.000
So just try to use Kafka Kafka. Kafka. Kafka is one of the best solutions.

03:27:18.000 --> 03:27:25.000
Yeah, yeah, yes. Yeah, yeah, actually, yeah, they are using COPCOM only, topic only. They extract the data from web, right?

03:27:25.000 --> 03:27:28.000
Inside of Kafka, we'll be having a tropics, yes. Or maybe classes.

03:27:28.000 --> 03:27:32.000
Conversation… Yeah, topics right. So, the topic, yeah, we are meeting the topics to extract the AP only.

03:27:32.000 --> 03:27:35.000
Hmm. Hmm.

03:27:35.000 --> 03:27:43.000
So, my question is that why don't… why don't… why do we run in sequential? Is there any… Easiest way to extract the data in parallel patient.

03:27:43.000 --> 03:27:50.000
Because everything is in the one web page, for example, so let us say, uh, one Facebook, right?

03:27:50.000 --> 03:27:57.000
Facebook, the people will post a comment or something. It might be in behind there is some formulated with the APA.

03:27:57.000 --> 03:28:05.000
That other 1,000 rows or 2,000 rows, 2,000 people. Can respond to something. So when we extract the data from there, right, maybe…

03:28:05.000 --> 03:28:14.000
Uh, is there any way to hit the API in parallel manner, and we can extract the… Is it possible?

03:28:14.000 --> 03:28:18.000
Yeah, so call, like, a thread over there, then. In parallel.

03:28:18.000 --> 03:28:21.000
Yeah, the reading, yes. Ah, yeah, dreading your sorrow, but…

03:28:21.000 --> 03:28:23.000
So call… call a friend.

03:28:23.000 --> 03:28:29.000
Yeah, what is the current system in? Cpu running one by one as well, sometimes we'll get the connection timeout issue.

03:28:29.000 --> 03:28:33.000
So, are we going to proceed with the parallel process, and is the repetition.

03:28:33.000 --> 03:28:37.000
Over the panel processing, yeah, go with the parallel processing then.

03:28:37.000 --> 03:28:41.000
In a Python or maybe, you know, some other different languages.

03:28:41.000 --> 03:28:42.000
But still, I'm not able to understand the whole holistic picture that you're trying to explain, because, see, the timeout?

03:28:42.000 --> 03:28:47.000
Okay. No, no, it's nothing. Yeah, it's not…

03:28:47.000 --> 03:28:57.000
I'm obviously sure you can handle it in a multiple ways, so that is one question. Then you are saying that, like, I don't want to save into a main memory, so maybe how I can avoid that? That is a separate context.

03:28:57.000 --> 03:29:03.000
No, no, no, no, that is not my question exactly. Main memory, or that is a different story.

03:29:03.000 --> 03:29:09.000
My exact question is that we have one database for one topic. We have the 10K rows over there.

03:29:09.000 --> 03:29:16.000
Uh, right now, in our existing process, we are starting, uh, for every 1K loose.

03:29:16.000 --> 03:29:20.000
So, we are getting the 10K, 10 APA call, it will be run in sequential.

03:29:20.000 --> 03:29:21.000
So what would the expectation? Is there any best approach to.

03:29:21.000 --> 03:29:24.000
Hmm. Hmm…

03:29:24.000 --> 03:29:27.000
Extract the message in parallel and concaten it quickly.

03:29:27.000 --> 03:29:42.000
Yeah, so you can do that. So anyhow, you are storing everything into our topics, right? So, you can try to connect with the multiple connectors. So, basically, there will be 10 connectors, or maybe in a 10 parallel connectors, and 10 parallel connector will try to read from the different, different opposite.

03:29:42.000 --> 03:29:43.000
Yeah.

03:29:43.000 --> 03:29:53.000
Because inside the topic, topic is just a logical name, right? Inside the topic, technically, there will be a partitions, right? So, from a partitions, you are trying to read something, or, like, you are trying to give an object that, okay, fine, so from this, like, place to this place, read the data.

03:29:53.000 --> 03:30:01.000
Try to create the 10 connectors parallel, because Kafka supports multiple connectors at a time, even for the single topics.

03:30:01.000 --> 03:30:06.000
Right, yeah, part of the collector setup, is there anything, uh, do we need to configure from their side, or…?

03:30:06.000 --> 03:30:07.000
Connor means it's a topic, right? Different topic, right?

03:30:07.000 --> 03:30:22.000
No, nothing, nothing. Yeah, connector… basically, yeah, so we have to give a topics, and then you have to give, basically, an offset that, okay, fine, so from this to this, only try to give me the data. So one connector will read, maybe, from, like, a 0 to 100 record, then second connector, 101 to, like, 200.

03:30:22.000 --> 03:30:26.000
Third connector, 201 to 300. So, in this way, you can configure over there.

03:30:26.000 --> 03:30:32.000
So that it'll do the parallel, and it will not, like, breathe the same data. It will read the different, different data.

03:30:32.000 --> 03:30:37.000
Yeah, yeah, I agree with this approach, but where is the connective setup? Maybe there are any, uh, code level can be…

03:30:37.000 --> 03:30:44.000
Actor is basically a piece of Python. Connector is not a setup, by the way, it's a piece of Python code, right? So, where you install the Kafka driver.

03:30:44.000 --> 03:30:50.000
And then, inside a Kafka driver, you will be able to get a function called as Kafka Connector. So you just, like, call that function, that's it.

03:30:50.000 --> 03:30:54.000
This is basically, like, one line of a code.

03:30:54.000 --> 03:30:56.000
Okay, but is there any limitations, sir, for the connector, this much connection?

03:30:56.000 --> 03:31:05.000
Someone… no, no, no. Not… No, not at all. So, Kafka never, like, give that kind of limitation. Yeah, if you have… your admin has given some sort of a restriction.

03:31:05.000 --> 03:31:12.000
That's a different issue. So, whoever is managing the Kafka, because someone will be… someone must be managing your Kafka cluster, right?

03:31:12.000 --> 03:31:13.000
Mm-hmm.

03:31:13.000 --> 03:31:22.000
Someone has already done the setup of cover question, and someone must be managing that Kafa cluster, right? There must be some admin. So, if they have not given any kind of a restriction, then it will not, like, give you a restriction.

03:31:22.000 --> 03:31:23.000
We can do the number of calls, so Castle known as Mono, okay.

03:31:23.000 --> 03:31:33.000
You… exactly. You are just consuming it, right? You were just a consumer side of it. So, uh, you are not, like, controlling the Kafka. Basically, you are just consuming it, so it will not give you an issue.

03:31:33.000 --> 03:31:38.000
Yeah, yeah. Uh, my second question is that, for example, in the live application, right, Uber or something.

03:31:38.000 --> 03:31:39.000
Hmm. Mm-hmm.

03:31:39.000 --> 03:31:48.000
We are getting the multiple API call from the different region, right? So, as per my understanding, are they using some load balancer or something?

03:31:48.000 --> 03:31:53.000
They're coasting the website at the multiple server. That should be okay, but in my current use case.

03:31:53.000 --> 03:31:57.000
Uh, it is depending on the particular topic, right? The topic has the multiple data.

03:31:57.000 --> 03:31:59.000
Hmm, hmm.

03:31:59.000 --> 03:32:04.000
I wanted to make it parallel. That is a challenge. So, what is the challenges I'm facing?

03:32:04.000 --> 03:32:11.000
When we hit that one by one as well, even though sometimes we may get the connection timeout issue.

03:32:11.000 --> 03:32:12.000
Hmm.

03:32:12.000 --> 03:32:18.000
So if you go with parallel, also, it is also most possible, right, to get the connection timeout issue.

03:32:18.000 --> 03:32:19.000
So, hmm.

03:32:19.000 --> 03:32:27.000
Otherwise, otherwise, just, just do one thing. So, whenever you're trying to consume it, write it inside the spark. Basically, don't use a plain Python, write it inside the spark.

03:32:27.000 --> 03:32:28.000
And then, uh, host it on a distributed system. So basically, not a standalone system, not one single system.

03:32:28.000 --> 03:32:33.000
Mm-hmm.

03:32:33.000 --> 03:32:38.000
Hosted our distributed system. So, in that way, it will be very, very fast.

03:32:38.000 --> 03:32:41.000
So, distributed system meaning from source or JSON? Which one?

03:32:41.000 --> 03:32:47.000
No, no, distributed system is, like, your cluster, your server, your server, basically, like, the hardware that you are trying to use, right? Because… The rest of the things will be managed by Spark itself.

03:32:47.000 --> 03:32:52.000
Yeah.

03:32:52.000 --> 03:32:53.000
Yeah, yeah, I understood.

03:32:53.000 --> 03:33:01.000
The parallelism, the distribution that we're talking about, right? So that will be managed by framework itself, so you don't have to even manage anything in that way, and your process will be way more faster.

03:33:01.000 --> 03:33:06.000
Correct, sir, but anyhow, the Spark as well, it can consume the data from.

03:33:06.000 --> 03:33:07.000
Yeah, EPA, right? From different server and reporting memory and process, right?

03:33:07.000 --> 03:33:13.000
Anywhere, yeah, Spark is just a framework. Any… from anywhere, it can consume.

03:33:13.000 --> 03:33:19.000
Okay, so I think… so, okay, if you go with the… if you go with the Spark, and it can be eliminated, right? Yes, sir.

03:33:19.000 --> 03:33:20.000
So that is… that is another option that you have. Distributed, yeah, distributed system. So that is another option to make your process faster.

03:33:20.000 --> 03:33:24.000
Instead of…

03:33:24.000 --> 03:33:26.000
That is, like, a best… another best option, you can say.

03:33:26.000 --> 03:33:34.000
Okay. Okay, but that's why I know, why do we use the Python? It is running single machine.

03:33:34.000 --> 03:33:36.000
So, there are some connection out there, that might be the reason.

03:33:36.000 --> 03:33:44.000
Huh, because Python runs on a single thread, right, at a time, so… It will take its own sweet time to call the data.

03:33:44.000 --> 03:33:45.000
Yeah.

03:33:45.000 --> 03:33:51.000
Yeah. Okay, okay. And one more final question, right? We, uh, you teach, uh, you know, you taught about the Fast API.

03:33:51.000 --> 03:33:52.000
Hmm.

03:33:52.000 --> 03:33:58.000
Uh, so what is the real, uh, no, real-time environment, right? Which tool we are preferable for the API-related project?

03:33:58.000 --> 03:33:59.000
In case of Python, so it will be Fast API. Fast API is one of the best, one of the best stable.

03:33:59.000 --> 03:34:06.000
We have many tools, right? Python is just…

03:34:06.000 --> 03:34:10.000
Yeah, there are such a tool, right? Django, Flask…

03:34:10.000 --> 03:34:18.000
Django is… Django is… yeah, Django is basically a web framework, so if you have to create a front-end, back-end, all those things, you can go ahead with the Django, but again, it's too old.

03:34:18.000 --> 03:34:29.000
Flask. Flask is not a production-ready framework. Flask is just an experimental framework. The production-ready framework is technically a fast API that we are discussing now.

03:34:29.000 --> 03:34:30.000
And now, stimulant also is not a kind of use the stimulant as well, though.

03:34:30.000 --> 03:34:37.000
Yeah. Stream lead is not for API. Streamlead is for a UI, basically. Streamlead is not used for API.

03:34:37.000 --> 03:34:39.000
Can we go with the past AP? It is 100% normal?

03:34:39.000 --> 03:34:45.000
Yeah, a stream… You can go with the fast API. Streamlint I will be using, but for UI interface.

03:34:45.000 --> 03:34:52.000
Not for API creation. You can't use the stream loop for API creation.

03:34:52.000 --> 03:34:53.000
Node.js, Node.js is basically JavaScript-based framework, not a Python. It's a different framework itself.

03:34:53.000 --> 03:34:57.000
Okay, so Node.js also… Node.js is the primary application.

03:34:57.000 --> 03:34:58.000
Roku. Roku.

03:34:58.000 --> 03:35:06.000
There are different language-based, JavaScript-based framework. Yeah, thank you, thanks, thanks, yeah.

03:35:06.000 --> 03:35:07.000
Hi, students!

03:35:07.000 --> 03:35:11.000
Okay, yeah, just a minute. So, Prahat, I think you are not sharing your screen. Please share your screen so that I can see. And in between… Okay, okay, okay, yeah.

03:35:11.000 --> 03:35:18.000
No, I don't have a, like, screen sharing related issues, I just have some query related, uh, carrier. Like, it's my first class.

03:35:18.000 --> 03:35:19.000
Okay, okay.

03:35:19.000 --> 03:35:33.000
Absolutely. So, actually, my question is, uh, mostly, like, I have 8 years of experience right now. I already gone through the recording, and you already told that deep learning concepts and NLP concepts you are already teaching, uh, like.

03:35:33.000 --> 03:35:42.000
But, uh, like, in the interview perspective, I want to ask, if they, like, are going to ask, like, specifically dedicated NLP, like, more than, uh, it is taught in this.

03:35:42.000 --> 03:35:44.000
Particular bootcamp, or how it will be.

03:35:44.000 --> 03:35:53.000
In this bootcamp, first of all, I'm not teaching NLP, by the way. I have taught NLP in my previous bootcamp.

03:35:53.000 --> 03:36:02.000
In this bootcamp, please look through those celebas. There is no NLP. Yes, if someone would like to learn NLP, so for that, recorded lectures are available from the previous classes.

03:36:02.000 --> 03:36:09.000
So, you can go through it. In this entire bootcamp, so I'm dedicating just towards a core generative AI.

03:36:09.000 --> 03:36:18.000
Core, right? Obviously, like, in some of the interview, I do agree that people will ask you, even statistics, people will even ask for the machine learning question, couple of questions.

03:36:18.000 --> 03:36:24.000
Right? Uh, people will ask, like, a lot from the generative AI. Now, if you are going to prepare for such kind of an interview.

03:36:24.000 --> 03:36:31.000
Then, you have to watch my other lectures, and then come to the class. I mean, like, come to the class and watch other lecture parallel.

03:36:31.000 --> 03:36:42.000
Uh, yes, I got you, but, like, the, like, I'm completely planning to transition to generative AI, so I saw your roadmap, so it has a Python statistic, NLP.

03:36:42.000 --> 03:36:56.000
Yeah, so that roadmap which I have given, that roadmap that I have created, so basically, that is a year-long roadmap, that, okay, so if someone is trying to start from the scratch, right, let's suppose I'm completely new to the data industry, and I don't even know, like, programming or anything.

03:36:56.000 --> 03:37:12.000
So, in that case, okay, so follow the sequence. So, first I have given Python, then I have given a statistics, then I have given, basically, a NLP, then I have given, basically, a generative AI, then I have given a MCP, then I have given a RAG. All those things, I have given in a sequence over there. That, okay, so in this way, you will be pro.

03:37:12.000 --> 03:37:13.000
Look at it.

03:37:13.000 --> 03:37:22.000
But, let's suppose I know some of the Python, I know a basic of NLP, I know a little bit of machine learning as well, one or two algorithms maybe, right? I know stats.

03:37:22.000 --> 03:37:27.000
Now I have to get into a core generative industry. Now, for that, this is the bootcamp.

03:37:27.000 --> 03:37:31.000
So, for interview, it will be sufficient, or, like, if I have time, so I can go to NLP, like.

03:37:31.000 --> 03:37:35.000
If you have time, if you have time, then go through this.

03:37:35.000 --> 03:37:36.000
Okay. But throughout this also, I can attend the interviews, like, once…

03:37:36.000 --> 03:37:55.000
Nlp, yeah? Without… without that also, you can attend the interview, but in some of the interview, maybe you will get stuck, because they will ask some transformer-related question, they will ask, maybe, uh, explain the architecture of a GPT, which I am not going to discuss in this lecture, which I have already discussed in those lectures.

03:37:55.000 --> 03:37:58.000
So, okay, and deep learning is not required. Asset is not in the rule.

03:37:58.000 --> 03:38:04.000
Uh, NLP, if you're going through, so by default, deep learning is all about neural networks, so anyhow, you will be learning a neural network.

03:38:04.000 --> 03:38:05.000
Okay.

03:38:05.000 --> 03:38:14.000
But actual story starts from deep learning, you can say. The, like, whatever we do, even inside the NLP, right, whatever algorithm that we are going to learn, whether it's the RNN, LSTM, GRU, transformer.

03:38:14.000 --> 03:38:20.000
Or anything, right? It's a technically neural network, and that story starts from your deep learning.

03:38:20.000 --> 03:38:26.000
So, after doing Python, I can directly do NLP, and in that case, like, as for your roadmap.

03:38:26.000 --> 03:38:33.000
Just follow on the roadmap, because that roadmap I've given. For anyone who would like to become a pro, and they have a time.

03:38:33.000 --> 03:38:41.000
Oh, yes, I am taking a year-to-year time for transition, so mostly, so I think I'm wanting to follow all your roadmap.

03:38:41.000 --> 03:38:42.000
So I will back propagate mostly, I will do the JNI, then I will back propagate the concepts.

03:38:42.000 --> 03:38:46.000
Okay, sure. Hmm.

03:38:46.000 --> 03:38:47.000
And another thing, I already have some GenAI experience, I'm already doing, currently, projects on my current company.

03:38:47.000 --> 03:38:51.000
Sure.

03:38:51.000 --> 03:38:52.000
So, the thing is, I am wanting to learn LLM ops, uh, mostly.

03:38:52.000 --> 03:38:56.000
Mm-hmm.

03:38:56.000 --> 03:38:59.000
So, do it require Docker and Kubernetes knowledge to…

03:38:59.000 --> 03:39:04.000
Ops, wherever ops comes into a picture, Docker, Kubernetes comes into a picture, and we have a LL.

03:39:04.000 --> 03:39:11.000
Ops course as well. So if you'll go and search, so that course has been delivered by BAPI, one of the finance mentors.

03:39:11.000 --> 03:39:16.000
Right, even MLOps has been delivered by him, uh, one person, and one person I'm trying to, like, uh.

03:39:16.000 --> 03:39:24.000
I'm still planning, I have already launched it, but I was not able to do a recording. So, MLOps, LMOps, both the courses are already available, and whatever is required.

03:39:24.000 --> 03:39:25.000
It's already discussed inside that.

03:39:25.000 --> 03:39:29.000
Okay, so if I do LLM ops, it also includes Docker, Kubernetes, whatever required for LLM.

03:39:29.000 --> 03:39:36.000
Exactly. I can show you, I can show you that. So, see, uh, if you will go and, uh, I think my screen is visible, right?

03:39:36.000 --> 03:39:37.000
Oh, yes.

03:39:37.000 --> 03:39:44.000
Okay, so if I'll go and I'll try to search… Uh, you're on. So…

03:39:44.000 --> 03:40:04.000
Yeah, so C. Llm Ops Master, this one. Yeah? So everything, if you'll go through a syllabus, so starting from what is LLM or foundation, then LLM Ops Loading, Llama Index, Hyperstack, whatever it is, AWS, CICD pipeline with respect to LLM Ops, so everything is already… whatever is required for LMOps.

03:40:04.000 --> 03:40:09.000
And whatever component that we are using inside the LMOps, including AWS Bedrock.

03:40:09.000 --> 03:40:14.000
Right, Vertex AI, uh, then, like, uh, yeah. So everything, everything is discussed here.

03:40:14.000 --> 03:40:18.000
I think I checked the syllabus, but I did not find Docker and stuff, so I…

03:40:18.000 --> 03:40:24.000
Oker, I believe he must be using, even I'm not able to find out, this is where I'm a little bit surprised.

03:40:24.000 --> 03:40:37.000
Uh, but, uh, he must be using inside a project. He is not covering a Docker separately, because in MLOps.

03:40:37.000 --> 03:40:45.000
So Milov's master DVC, and then… This is selfless, right?

03:40:45.000 --> 03:40:51.000
Here, he is covering inside a MLOps, so he is covering GitHub, DVC.

03:40:51.000 --> 03:40:58.000
And the core government. Yeah, here is… he's covering Docker. So basically, LLMOps and MLOps, both you will have to do.

03:40:58.000 --> 03:41:09.000
Technically, this is something that we are doing even inside the LLM ops, just with the flavor of LLM, so… He has discussed already a Docker, so he has not discussed over there.

03:41:09.000 --> 03:41:17.000
So, for MelOps, we have any prerequisite, because Atlas, I don't have a background of machine learning, so…

03:41:17.000 --> 03:41:28.000
No, he's… he's not… so I have already gone through his lecture, so basically, he's not discussing anything with respect to a core machine learning part. Yes, he has taken an example of a model that, okay, fine, this is the model which we have built.

03:41:28.000 --> 03:41:33.000
And across that, he's showing the offs part.

03:41:33.000 --> 03:41:36.000
Okay, so we are, like, good to go if you don't have no knowledge of machine learning, right?

03:41:36.000 --> 03:41:43.000
All of these courses are technically independent of each other. If you know Python, then you can pick any of these courses.

03:41:43.000 --> 03:41:46.000
Okay, so the roadmap will be MLOps, then LLMOps, then after that.

03:41:46.000 --> 03:41:48.000
Exactly, yeah, yeah. Yeah.

03:41:48.000 --> 03:41:57.000
We got it. And the last question is, uh, for, uh, like, for NLP, do we have any prerequisites? Like, if I go to the course of the provided and you run?

03:41:57.000 --> 03:42:03.000
See if I'll tell you very simple. So, if you will look into the NLP part.

03:42:03.000 --> 03:42:13.000
Now, let's suppose if you're going through this hybrid one. There is a NLP event inside this one, generative AI with an NLP identity and fine-tuning. This was a live batch, which I have concluded 2 months back.

03:42:13.000 --> 03:42:26.000
So, which I have completed. So, even here, so I have discussed all these things in a detail. Now, here, so till this point, I think last 3 or 4 modules is not been uploaded. So, this module, I think it will be uploaded soon, within 2 weeks, you can say. This model and this model.

03:42:26.000 --> 03:42:32.000
Now, till this model, everything is uploaded, and I have recorded it, so I can tell you, like, what is required, what is not.

03:42:32.000 --> 03:42:53.000
So here, technically, I'm not trying to, like, you know, talk about a deep learning, not even here, so using a simple Python, and then I'm trying to use, uh, libraries over here, so NLT can, like, a spaCy, and based out of that, I'm trying to showcase the example. Similarly, so over here, so theory, practical, again, in a plain Python.

03:42:53.000 --> 03:42:58.000
Now, even over here, so theory practical with the plain Python, and then model building I'm trying to do.

03:42:58.000 --> 03:43:09.000
And, uh, again, in this particular section, which will be uploaded very soon, so it will be theory practical, but here you will be able to see a little bit of a.

03:43:09.000 --> 03:43:15.000
Concept of a deep learning. So, because I'm going to teach a RNN-LSTM. Now, inside RNN LSTM, whenever I'm teaching, so obviously I have to.

03:43:15.000 --> 03:43:25.000
Show you the practical example, and the practical example will be based out of neural network. But yeah, in that example, whatever component which I'm going to use, I'll be explaining to you.

03:43:25.000 --> 03:43:31.000
As simple as that. So, as such, there is only a Python, which is a prerequisite for this particular one.

03:43:31.000 --> 03:43:40.000
Now, there is another version, uh, generative AI with NLP, Agent TKI, and fine-tuning. Now, over here, so this is already a very, very long batch, it was a live one.

03:43:40.000 --> 03:43:45.000
Uh, so here I have discussed everything in sequence. Whatever, like, sequence that I have given.

03:43:45.000 --> 03:43:50.000
But yeah, if you're going through this part of NLP, then I don't think that much will be required.

03:43:50.000 --> 03:43:56.000
Susio, thank you for clarifying. The only reason I ask, because I want to master end-to-end, so I think in case I.

03:43:56.000 --> 03:44:09.000
Then… then the simple approach is follow the roadmap. If you have a time, if you have time, because many people come and say that, no, they just wanted to spend 400-500 time. I say, okay, fine, go with the core.

03:44:09.000 --> 03:44:15.000
But if people are saying that, okay, fine, I would like to, like, follow the roadmap, I would like to, like, spend maybe an eight months of time over here.

03:44:15.000 --> 03:44:24.000
I say, okay, fine. So, in that case, uh, don't give a second thought, just follow the roadmap, and here I'm creating a fresh recording of each and everything.

03:44:24.000 --> 03:44:31.000
Uh, it's taking a lot of time for me, but yeah, so almost all the module will be completed within a month of time.

03:44:31.000 --> 03:44:33.000
Uh, Susan, thank you, thank you for your guidance.

03:44:33.000 --> 03:44:42.000
Yeah, thanks, take care, yeah, yeah. Okay, so now, uh, anyone, guys, please go ahead with your question. I think we have, like, a…

03:44:42.000 --> 03:44:50.000
4 people only, who have raised their hand. Yeah, so, Sarik, Arman, Avinas, Ganesh. Anyone?

03:44:50.000 --> 03:44:52.000
Sir, I have doubt regarding Yuri API. I understand First API and Postman.

03:44:52.000 --> 03:44:57.000
Yeah, please go ahead. Yeah, yeah.

03:44:57.000 --> 03:44:58.000
But I just wonder about the… how to use and how to implement your API.

03:44:58.000 --> 03:45:04.000
Mm-hmm.

03:45:04.000 --> 03:45:07.000
Mm-hmm. Okay, sorry, how to?

03:45:07.000 --> 03:45:10.000
How to use and implement Yuri API.

03:45:10.000 --> 03:45:18.000
How to use and implement a UI API. That I will be teaching you, don't worry. Like, we have to use a lot, so let's come to tomorrow's class.

03:45:18.000 --> 03:45:19.000
Yep.

03:45:19.000 --> 03:45:27.000
Because, uh, some of the… Uh, man, some of the students are regarding tokens, and I'm still confused about this there.

03:45:27.000 --> 03:45:28.000
Keywords, like, at all.

03:45:28.000 --> 03:45:35.000
Not an issue. So, come to tomorrow's class, I'll be, like, talking. Today, I have already shown you, right? So, the curl command with the URI API, but tomorrow… Tomorrow, I'll give you the more demos.

03:45:35.000 --> 03:45:40.000
If it is, that is it?

03:45:40.000 --> 03:45:44.000
Yeah, okay, okay. Next question, please. Yeah.

03:45:44.000 --> 03:45:49.000
So, my question is, like, in today's lecture, we have exposed a function to API, right?

03:45:49.000 --> 03:45:50.000
Hmm.

03:45:50.000 --> 03:45:57.000
So, what if we have classes and objects? In that case, we can host an entire class through an API?

03:45:57.000 --> 03:46:04.000
You may want to call a class, right? So, basically, classes means what inside the class will be having a function. At the end of the day, you will be executing a function.

03:46:04.000 --> 03:46:10.000
Function will be doing the task. Classes are nothing but just a skeleton.

03:46:10.000 --> 03:46:11.000
Technically, that is the class, right? You create an object, basically.

03:46:11.000 --> 03:46:17.000
Okay.

03:46:17.000 --> 03:46:26.000
Means a variable of the class, and then the variable of the class, with the help of that, you will be able to access multiple things. Now, that variable of the class, you are going to use in some function.

03:46:26.000 --> 03:46:38.000
So, in an ideal way, it's a function that we try to expose, because it's a function which will be doing the real task.

03:46:38.000 --> 03:46:40.000
Sorry, whatever, whatever? Sorry? Call… no, no, no, you didn't get that last line.

03:46:40.000 --> 03:46:47.000
The call and the past API.

03:46:47.000 --> 03:46:51.000
So, in today's, let's say you use no Fast API, then call.

03:46:51.000 --> 03:46:52.000
Hmm. Oh, good, huh. No, no, curl is a generic command for a Linux system.

03:46:52.000 --> 03:46:59.000
Yeah, let me explain the difference between these two.

03:46:59.000 --> 03:47:07.000
Or maybe you can say a command prompt. So wherever you have to hit some API or some external system, so the command is basically curl.

03:47:07.000 --> 03:47:19.000
So, it's a generic universal system. Yeah, fast API is basically a framework by which you are creating an API. Gurl is, like, uh, just hit the API, or maybe if you have to hit a GitHub even.

03:47:19.000 --> 03:47:24.000
Right? So we can curl the GitHub.

03:47:24.000 --> 03:47:32.000
Yeah. Right? Okay, next one, please. Yeah. Next one.

03:47:32.000 --> 03:47:40.000
Anyone, guys, so after that, we'll close the class, so I think, uh, I can see Ramesh, I can see Avinas, I can see Sarik, so any.

03:47:40.000 --> 03:47:41.000
Hi, sir. Hi, students. No, COVID, COVID, sorry.

03:47:41.000 --> 03:47:42.000
Things that we have to…

03:47:42.000 --> 03:47:46.000
Yeah, so… Ramesh, yeah, please go ahead.

03:47:46.000 --> 03:47:53.000
Yeah, Sarah, I had a basic question, something, right? We, uh, what is the difference between WebCook and, uh.

03:47:53.000 --> 03:47:56.000
Yeah, it'll be… does it automatically redirect? I love who… yeah.

03:47:56.000 --> 03:48:00.000
Bev hooker, webhook, webhook, actually. Bev hook, not cool. Yeah. Hmm.

03:48:00.000 --> 03:48:02.000
Diverpool, yeah.

03:48:02.000 --> 03:48:10.000
So, basically, the meaning of Behook in a layman way, if I have to explain it to you. So, let's suppose you are trying to hit my API, right? You're trying to hit my system.

03:48:10.000 --> 03:48:11.000
Now, you understand the API part, right? So, basically, API is nothing but you are executing some function, or maybe, let's suppose.

03:48:11.000 --> 03:48:15.000
Mm-hmm. This…

03:48:15.000 --> 03:48:26.000
You're not executing any function, you have logged in into my system. Now, on your login, when you have logged in into, like, you're on, let's suppose, I have to trigger one alarm.

03:48:26.000 --> 03:48:29.000
Basically, that, okay, Ramesh has logged in to your own system.

03:48:29.000 --> 03:48:30.000
Right. So, basically, that trigger can be done with the help of webhook. That is something called as webhook.

03:48:30.000 --> 03:48:35.000
Mm-hmm, mm-hmm.

03:48:35.000 --> 03:48:40.000
Okay, webcook is also beginning with the AP process in backend, something.

03:48:40.000 --> 03:48:41.000
No, no.

03:48:41.000 --> 03:48:50.000
Oh, it's a bit different, I would say. Bit different. Ultimately, under the hood, like, we have written the function, right, but the concept of Behvoo says that, that, okay, on any kind of an event, if you have to trigger something.

03:48:50.000 --> 03:48:51.000
Right? Then you can try to use… For example, you do a payment, right? So, basically, we are using a payment gateway. We don't have a payment gateway.

03:48:51.000 --> 03:48:58.000
Mm-hmm, mm-hmm.

03:48:58.000 --> 03:48:59.000
Yeah.

03:48:59.000 --> 03:49:11.000
So, we are using, technically, a payment gateway. Now, so once you do the payment, let's suppose… not on our program, on any platform in the entire world, right? Maybe Amazon, maybe Netflix, wherever, whatever, like, wherever you're doing a payment.

03:49:11.000 --> 03:49:18.000
So, payment will not be from Amazon, payment will not from Netflix, or payment is not something that Euron holds, right? We are using RoserPay, someone will use Stripe.

03:49:18.000 --> 03:49:24.000
Someone will use PayPal, basically. So, whenever you do a payment, we have to give you the access.

03:49:24.000 --> 03:49:31.000
But payment is happening in different systems, right? And access, you have to, like, get into a ROM system.

03:49:31.000 --> 03:49:32.000
Mm-hmm, mm-hmm.

03:49:32.000 --> 03:49:41.000
Course access, right? So, whenever you will do a payment, so that's on that action. So, let's suppose you have done the payment, so that is going to be one of the action. So, we call a bev hook.

03:49:41.000 --> 03:49:42.000
Okay.

03:49:42.000 --> 03:49:52.000
Right? So, that will return a data success message or failure message, that will return the success message with your detail, your login ID detail, saying that, that, okay, fine, so this person who has logged in into your system with this ID.

03:49:52.000 --> 03:49:56.000
So, basically, he has done the action. Now, on that, do the reaction. Means, give the course access.

03:49:56.000 --> 03:49:58.000
Mm-hmm.

03:49:58.000 --> 03:50:04.000
So, technically, the action, right, the call that we are trying to get, that is, that we are getting from our.

03:50:04.000 --> 03:50:05.000
Yeah, right, automated action. Correction.

03:50:05.000 --> 03:50:07.000
Exactly, automated actions. So basically, whenever your… someone is going to access your system, you have to, like, generate a reaction that is called a bev hook.

03:50:07.000 --> 03:50:13.000
Oh, yeah.

03:50:13.000 --> 03:50:21.000
Okay, so Senator Esper, your experience, what are the challenges, uh, uh, did you face in EAP-related things, sir?

03:50:21.000 --> 03:50:22.000
You need a couple of points here, eh? Challenges, no, I think.

03:50:22.000 --> 03:50:34.000
Hell a lot of challenges. I mean, like, see, understanding… See, unless you are not working in one full-scale project which has been used by 10,000 people, right?

03:50:34.000 --> 03:50:35.000
Believe me, you will never be able to experience a real challenge.

03:50:35.000 --> 03:50:38.000
Mm-hmm, mm-hmm. We'll go, got it, okay.

03:50:38.000 --> 03:50:47.000
Challenge is always scalability. Scalability, security, right. Someone is going to override your API, maybe some endpoint is exposed one.

03:50:47.000 --> 03:50:57.000
Uh, maybe you are not able to… for example, we are giving you token, right? So, initially, we have launched, and there was a glitch, for example, right? That we were not able to, like, you know, calculate a proper token.

03:50:57.000 --> 03:51:04.000
You will keep on hitting, but our system was, like, running the calculation system, right? Which was trying to calculate the token.

03:51:04.000 --> 03:51:12.000
So, it was, like, delayed. So, let's suppose you are hitting back-to-back, back-to-back, my API, and I'm not able to calculate it, so in that…

03:51:12.000 --> 03:51:17.000
I will end up giving you more tokens, which is a business loss for me.

03:51:17.000 --> 03:51:30.000
Yeah, yeah, yes, correct. That is… might be the reason, sir. Sir, and one more challenge is I am facing now, really. Uh, so basically, when we extract the payload, right, and it is a big, bigger JSON, big kind of the JSON.

03:51:30.000 --> 03:51:34.000
So, I think, how do we need to, uh, parse it and, you know, at least.

03:51:34.000 --> 03:51:40.000
How do we either any easiest way, uh, to parse the entire JSON and understand this Excel?

03:51:40.000 --> 03:51:45.000
Generally, any thumb rules for this? I understood because we got the code over there, we can parse it.

03:51:45.000 --> 03:51:53.000
But is there any easiest way to, uh, extend the payload, no? And it's not to extract the payload, to understand the JSON.

03:51:53.000 --> 03:51:54.000
Stucks here.

03:51:54.000 --> 03:52:00.000
Okay, the seller structure, just use JSON viewer, then copy-paste JSON data in a JSON viewer.

03:52:00.000 --> 03:52:05.000
Yeah, but it is coming the line by line. We have almost 10K, no, I think no 100,000K, or… to 2,000K something.

03:52:05.000 --> 03:52:19.000
See, it's just… JSON is more like a schema, right? So if someone is sending you, like, one JSON packet, you are saying it's having 10,000 lines? Only one JSON packet?

03:52:19.000 --> 03:52:20.000
Melissa, that is one data, right? One… One data, right? One data URL.

03:52:20.000 --> 03:52:24.000
You know what, yeah, one packet, one packet is almost 10,009… Yeah, one… one data. Correct, correct, you're right.

03:52:24.000 --> 03:52:34.000
Then… then you… one… if one data length is, like, thousand lines, what you can do? Nothing. You have to understand it, right? Because someone has created it.

03:52:34.000 --> 03:52:40.000
Yeah, it is a challenge is to understand the structure, right? Because when we extract the data from the web, right, especially Twitter or Facebook.

03:52:40.000 --> 03:52:44.000
I don't think that… It's not that challenging. No, no, no. It's not that challenging. I mean, like, JSON gives you a very formatted response, like.

03:52:44.000 --> 03:52:49.000
Uh, it is…

03:52:49.000 --> 03:52:52.000
Layer by layer, layer by layer, like, uh, just try to put it inside the gist.

03:52:52.000 --> 03:52:53.000
Yeah, a little bit, okay.

03:52:53.000 --> 03:53:01.000
Yeah, so just try to put it inside a… Uh, like this one. I'll say… Uh, put it inside, uh…

03:53:01.000 --> 03:53:05.000
Json viewer, and I think you will be able to understand.

03:53:05.000 --> 03:53:06.000
Yes, yes, yes.

03:53:06.000 --> 03:53:10.000
Jason Record, Jason Weaver, okay. Then, if you want to make it a table or permitted, that should be better, right? And to understand the whole thing, so… table for me.

03:53:10.000 --> 03:53:17.000
Then call Pandas, yeah, call Pandas then. You can call Pandas for that.

03:53:17.000 --> 03:53:18.000
For a tablet format. Hmm.

03:53:18.000 --> 03:53:25.000
Okay. Uh, pandas by data point. Okay, independent. Yeah, that's why, you know, we don't have any mapping documents over there.

03:53:25.000 --> 03:53:26.000
Hmm.

03:53:26.000 --> 03:53:34.000
Because when we extract the message from the Twitter or something, it, uh, it is having a lot of attributes.

03:53:34.000 --> 03:53:35.000
Hmm. Hmm.

03:53:35.000 --> 03:53:44.000
The country, jaggery, blah blah, like this. But we cannot understand the schema whole thing, because when you look at the payload pile, it contains a lot of number of lines.

03:53:44.000 --> 03:53:50.000
So, that is a difficult tool, it will take in time, it is a manual process, it is taking time to understand the whole schema.

03:53:50.000 --> 03:53:51.000
Even though we are using it…

03:53:51.000 --> 03:53:56.000
No, not at all. Just do one thing. Upload one JSON into a URE, and then ask Yuri to explain. It will explain you.

03:53:56.000 --> 03:53:57.000
Simply… That's a… that's the simplest way.

03:53:57.000 --> 03:54:07.000
Yeah, yeah, I totally agree. No, no, actually, we… how did we use main? Actually, we used to the Spark and exploding operation.

03:54:07.000 --> 03:54:14.000
And try to read the data. We did it, but also, anyhow, the schema is lengthy, and we had a lot of nested schema.

03:54:14.000 --> 03:54:24.000
Uh, so I do the parsing is something difficult to. I get it exactly that. So, a lot of, uh, no, it is a… it is contains a lot of nested schema.

03:54:24.000 --> 03:54:29.000
Okay, okay.

03:54:29.000 --> 03:54:37.000
Okay. Okay, okay. Okay, yeah, next one, Arman, you have a question?

03:54:37.000 --> 03:54:44.000
Yeah, so on that, on your first, uh… part in which you saw the theory where we are using Google Play application.

03:54:44.000 --> 03:54:55.000
And we are transferring the money, so it's related to that. Whenever we are using API, so indirectly, I think, is it… It is hitting the database, right, to extract the money and then depositing from the.

03:54:55.000 --> 03:54:59.000
Basically, it is hitting the function, function is hitting the databases.

03:54:59.000 --> 03:55:07.000
Both real good. Also, one last question, like, for example, if someone wants to get higher than Euron.

03:55:07.000 --> 03:55:14.000
Of this Gen AI code. So, what will be your criteria evaluating that, based on the challenges and assignments you have given in the course?

03:55:14.000 --> 03:55:21.000
Uh, our team takes a rigorous interview, and they take an interview not a regular way, they will give you the project.

03:55:21.000 --> 03:55:24.000
A project where you can use AI and whatever you want, you can use it.

03:55:24.000 --> 03:55:30.000
But yeah, at the end of the day, we'll be looking for the final result.

03:55:30.000 --> 03:55:35.000
Yeah. Okay, next question, Altya, you have a question? Please go ahead.

03:55:35.000 --> 03:55:36.000
Yeah. Thank you.

03:55:36.000 --> 03:55:42.000
Yeah, hi, Sudan Shu. So I've been following you from… since you're in your own days, so currently I am working as a data engineer.

03:55:42.000 --> 03:55:43.000
Hmm.

03:55:43.000 --> 03:55:50.000
So, my company is indulging into this giant AI project, so I've worked on something called Gradio for the UI part.

03:55:50.000 --> 03:55:55.000
Okay. Hmm.

03:55:55.000 --> 03:55:56.000
Okay.

03:55:56.000 --> 03:56:02.000
And a little bit of 2A. So the project is getting bigger. So, like, I, uh, I just want to know your opinion. So, in the day-to-day life, since companies forcing us to use.

03:56:02.000 --> 03:56:03.000
Ai majorly. So, what I do is I ask for the system architecture, I ask for the modules.

03:56:03.000 --> 03:56:08.000
Mm-hmm, mm-hmm.

03:56:08.000 --> 03:56:14.000
And I, uh, get the code, but I try to review each and every line before sending it to the production.

03:56:14.000 --> 03:56:25.000
I know my architecture, I know my code. Uh, the problem which I'm facing, and I want to know your opinion, is that the LLMs are generally having a context limit.

03:56:25.000 --> 03:56:33.000
Uh, so they sometimes hallucinate whenever the context gets larger, or the project gets larger. So how can I, uh, like.

03:56:33.000 --> 03:56:34.000
Get a way out of it. Like, how.

03:56:34.000 --> 03:56:40.000
Mm-hmm. Break down… break down, break down into a chunks. It's a normal issue with… which we all are facing, by the way.

03:56:40.000 --> 03:56:41.000
So, just try to, like, chunk it out, and try to call a multiple agent instead of, like, doing… or generating a response in a single sword.

03:56:41.000 --> 03:56:47.000
Okay.

03:56:47.000 --> 03:56:54.000
Even we are doing the same thing, like, in multiple cases, right? So, whenever we are trying to build… for example, the Avni that we have released.

03:56:54.000 --> 03:56:55.000
Okay.

03:56:55.000 --> 03:57:03.000
So, Avni, you can try to even chat with Avni for hours, and at that two real-time conversation is happening, right? So just imagine how long context we are able to maintain.

03:57:03.000 --> 03:57:08.000
So again, we are trying to, like, do a checking over there, and we are trying to break down the data.

03:57:08.000 --> 03:57:19.000
And then we are sending to the LLM, so that it will be able to create… understand your context, as well as it will be able to, like, generate the next question for you. It will be able to ask even a follow-up question. So if you'll chat with Avni, right?

03:57:19.000 --> 03:57:26.000
It will be able to ask even a follow-up questions. Like, just like a real, real interviewer, which asks the, like, a real follow-up question.

03:57:26.000 --> 03:57:30.000
So, checking is the only way, call up multiple agents, basically.

03:57:30.000 --> 03:57:31.000
Right? Call a multiple agent and do the checking.

03:57:31.000 --> 03:57:38.000
Okay, so… So, if my project has multiple Python packages as well as modules.

03:57:38.000 --> 03:57:39.000
So, in that case, uh, how can I basically ask for the next follow-up codes?

03:57:39.000 --> 03:57:43.000
Mm-hmm, mm-hmm.

03:57:43.000 --> 03:57:46.000
Like, without losing the context.

03:57:46.000 --> 03:57:59.000
So, yeah, so basically, you have to create the context, right? So whenever you're trying to send the next one, whenever you're trying to send the query, so for example, okay, so let me give you the very simple example, right?

03:57:59.000 --> 03:58:00.000
Right.

03:58:00.000 --> 03:58:09.000
So, in our agent, we try to give a memory. Right? Whenever we try to create, or maybe if you're not created the agent, so let's try to go ahead with that second approach. Approach number two, we're RAG.

03:58:09.000 --> 03:58:10.000
Yeah, yeah.

03:58:10.000 --> 03:58:16.000
So, I think you know the meaning of RAG? So, basically, whenever we are trying to send a query, what do we do? So, we try to send a query, first of all, to our vector databases, right? Now, based on that query, it will try to generate the top K context.

03:58:16.000 --> 03:58:19.000
Right. So that's similar to such a.

03:58:19.000 --> 03:58:26.000
Fine? And then we try to append query plus top a context, and then we send it to LLMs.

03:58:26.000 --> 03:58:27.000
Right, right, perfect.

03:58:27.000 --> 03:58:37.000
This is what we do in RAG, right? Correct? Yeah? Now, do the same thing over here, so that it will be… because, see, whenever you're trying to generate the new code, let's suppose I have already written, like, a 10,000 line of code, and maybe hundreds of modules.

03:58:37.000 --> 03:58:38.000
Agree? Yeah? But again, so to generate the next one, those hundreds of models are not required, right?

03:58:38.000 --> 03:58:43.000
I think it'll be good.

03:58:43.000 --> 03:58:44.000
Dependency will not be on hundreds of models. Maybe there will be a dependency on 5 model, 10 models, maximize.

03:58:44.000 --> 03:58:48.000
Bye.

03:58:48.000 --> 03:58:49.000
Correct, correct, correct, yeah.

03:58:49.000 --> 03:58:56.000
Yeah? Now, so when you're trying to append this context, top K, which I'm trying to say in a RAG approach, top K when you're trying to send.

03:58:56.000 --> 03:59:04.000
Obviously, it will be able to retrieve those, like, a relevant module, and then it will try to generate, and your entire, like, context length will be smaller in that way.

03:59:04.000 --> 03:59:05.000
Okay, cool, I understand now.

03:59:05.000 --> 03:59:10.000
But if we all follow the same approach, like. And this is a very normal problem nowadays for us.

03:59:10.000 --> 03:59:21.000
My second question is, I'm, uh, like, I'm working here since past 3 years, so I'm trying to switch in the data engineering domain, so is it a good combination, data engineering plus LLMs?

03:59:21.000 --> 03:59:37.000
Little, little, little. I have started my career as a HP consultant, then data engineering, and then data science. Because, see, data science maybe give you a knowledge, expertise, and experience. Uh, with respect to algorithms and all those things, application building, model building, everything.

03:59:37.000 --> 03:59:51.000
Data engineering always try to bring you a flavor where you can build a real system with a scale, with a security, and with a huge volume of traction, plus optimization. That is the capability that we get from the data engineering, and somewhere.

03:59:51.000 --> 03:59:57.000
Uh, you know, my life, so I have, like, started as a CP consultant, then moved into Itang, then moved into a data science, right?

03:59:57.000 --> 04:00:09.000
So, that was my progression into, like, a tech journey. And because of that, somewhere I think that, like, I'm able to design the system, or I understand the system, actual system, right? Even on a very, very low level.

04:00:09.000 --> 04:00:12.000
If someone is trying to learn data, big data, right, or data engineering.

04:00:12.000 --> 04:00:15.000
I always suggest, go for it.

04:00:15.000 --> 04:00:25.000
But also, like, whatever you have taught, you, you know, I use it on a daily basis, so, uh, like the REST API part, so I understood totally, although I have used Flask majorly.

04:00:25.000 --> 04:00:26.000
But it's good to learn Fast API because it is now majorly used.

04:00:26.000 --> 04:00:33.000
Yeah. No differences between flask and FastAPI. I mean, like, I don't think that you have found out any differences, major differences.

04:00:33.000 --> 04:00:38.000
Yeah, no, not major difference, but since there's something called Pyrentic, you have data validation.

04:00:38.000 --> 04:00:40.000
Uh, yeah, so in Flask, there is no identity concept, but yeah, in, like, a fast paper, there is a concept of identity, just for data validation.

04:00:40.000 --> 04:00:47.000
Yeah, yeah, yeah, yeah. Yeah. Yeah, sure, that's the only reference.

04:00:47.000 --> 04:00:48.000
So that's from my side, thank you.

04:00:48.000 --> 04:00:51.000
You know. Yeah, but Flask is not a production ID, uh, basically. So, in a production, you can't send a Flask API, but Fast API is a production ready.

04:00:51.000 --> 04:00:57.000
Yeah… Yeah, right, right. Thank you.

04:00:57.000 --> 04:01:06.000
Yeah. Okay, thanks. Uh, next one, we have two people only, Avini, uh, Avinas and Sarik. Anyone go ahead, after that, we'll close the class.

04:01:06.000 --> 04:01:08.000
I have to, like, celebrate Rakshamandan as well.

04:01:08.000 --> 04:01:10.000
I'm just… No, um, there's no query from my side. I'm just in line.

04:01:10.000 --> 04:01:17.000
Yeah, sorry, please go ahead. Okay, fine.

04:01:17.000 --> 04:01:26.000
Okay, no, no. Fine. Thank you so much, everyone. Take care, and tomorrow we have again a class, which will be the continuation of today's class itself. I have already given you the assignment, do it.

04:01:26.000 --> 04:01:36.000
And recording will be available, uh, in the next 4 to 5 hours. So whenever it will be ready, we'll upload the recording with that. Thank you so much, everyone. Happy Rakshawandan, take care, and see you again.

04:01:36.000 --> 04:01:40.000
Same time tomorrow. Best visas, thank you. Thanks, everyone. Take care.

04:01:40.000 --> 04:01:48.000
Same time, 9 AM IST. I think we all know, like, where to find the link, and hope all of you have enjoyed the class, all of you have learned a lot.

04:01:48.000 --> 04:01:52.000
And we had an amazing discussion. Let's continue the same enthusiasm for a very, very long time, at least for 3 months.

04:01:52.000 --> 04:02:01.000
Okay.

