WEBVTT

00:03:53.000 --> 00:04:03.000
Okay, everyone, so good morning. I think I'm audible and visible to all of you. Uh, so we are going to start a class in, uh, next, uh, 2-3 minutes, yeah? So it's 9.03, so maybe by 9.05, 9.06.

00:04:03.000 --> 00:04:14.000
So we are going to start with the class. So, till then, just wait. I'm looking at your chat. So… Good morning, everyone, and happy Sunday to all of you.

00:04:14.000 --> 00:04:44.000
Okay, so we'll start in 2-3 minutes, so let other people join, and then we will start with the discussion.

00:05:56.000 --> 00:06:01.000
Okay, so everyone, good morning once again. So, I think we all are ready, right, guys? Everyone?

00:06:01.000 --> 00:06:18.000
Yeah, shall we start with the class? Yes? Okay, fine. So, uh, yesterday we were talking about an API, so those who have not joined my today's class, so you can try to go through a lecture. So, lectures are already available inside your dashboard.

00:06:18.000 --> 00:06:33.000
Uh, materials are already available, assignment is also available for my today's class. So, anyone, anyone who have missed my study's class, so please go through that particular lecture, and uh, yeah, so you all are welcome in terms of asking any kind of a question with respect to.

00:06:33.000 --> 00:06:42.000
Even a previous or previous of previous class, I don't have any kind of an issue, so feel free to ask me a question in a doubt learning section, which is going to happen after.

00:06:42.000 --> 00:06:48.000
This live classes, I believe we all know the rituals, right? So, we all know how do we conduct the classes.

00:06:48.000 --> 00:06:54.000
So, to our, I'm going to discuss, and to our, we all are going to discuss, right?

00:06:54.000 --> 00:07:00.000
So, yesterday, guys, I was talking about, basically, an API, and hopefully most of us are able to understand.

00:07:00.000 --> 00:07:08.000
The core philosophy, a core logic behind an API, that what technically a meaning of an API is.

00:07:08.000 --> 00:07:18.000
And, like, uh, how API is going to work, how with the help of fast API framework, we can try to create an API, a GET API, and a POST API.

00:07:18.000 --> 00:07:32.000
Plus, we were able to even test it with respect to a curl, with respect to a browser, and with respect to our postman. So we have used Postman, we were able to test it, we have used browser, we were able to… test it, and um…

00:07:32.000 --> 00:07:49.000
We have used, basically, a curl command, and we were able to test our API. Now, today, so what we are going to do, so today we are going to extend our same lecture, and there are two more methods, a popular one. One is a put method, which has been used for update option.

00:07:49.000 --> 00:07:56.000
And another one is a delete method, which has been used to delete a data. So, we are going to talk about those two methods.

00:07:56.000 --> 00:08:04.000
And, uh, after that, uh, what we are going to do, so we are going to productionize. We are going to deploy the API.

00:08:04.000 --> 00:08:08.000
So yesterday, we were running each and everything in a local host.

00:08:08.000 --> 00:08:21.000
And then, with the help of this NGRock, so we have basically done a port forwarding. So whatever is running in my local host, let's forward it to some other port, which is a global one, on HTTPS. This is something that we have done with respect to NGRock.

00:08:21.000 --> 00:08:27.000
But today, what we can do, we can try to do a deployment over a cloud.

00:08:27.000 --> 00:08:39.000
A backend deployment, right? A backend deployment, we can try to do over the cloud, and then back-to-back, back-to-back, we are going to test it. So it's not going to be very different, so we were using a local host and colon port number.

00:08:39.000 --> 00:08:46.000
In a similar manner, I will be able to get a URL, because now we understand that what is the technically meaning of API is, so meaning of API is very simple.

00:08:46.000 --> 00:08:53.000
Like, uh, this URL is helping me out to reach out to the particular system, and then, uh, route is helping me out.

00:08:53.000 --> 00:08:59.000
To go to the particular method which is running in a particular system. This is what we understand as a layman.

00:08:59.000 --> 00:09:09.000
In terms of an API. So, this is something that we are going to do it, guys, and then I'm going to introduce a testing of Yuri API as well. So, we have so many models.

00:09:09.000 --> 00:09:19.000
And we have already exposed that models with the help of APIs, so we have a text-to-speech model, we have an image generation model, we have a chat completion model.

00:09:19.000 --> 00:09:30.000
We have a streaming model with us, we have our embedding model with us, and, like, it's a complete model-based, you will be able to find out, or you can say a complete model store.

00:09:30.000 --> 00:09:37.000
That we have already created, and all of these models are available to all of us, 24 by 7, which we are going to use it.

00:09:37.000 --> 00:09:48.000
So today, I'm going to show you even those testing, but I believe now you will be able to do it. But still, it's my responsibility to show you that how UD API ecosystem, you will be able to access.

00:09:48.000 --> 00:10:01.000
Because, again, from next class onwards, we will start using those API ecosystem. Because, uh, in the next class, so let's suppose if I'm going to talk about a vector database, so where Farsi, Pinecone, ChromaDB, Bavy.

00:10:01.000 --> 00:10:10.000
Quadrant, all of these things comes into a picture. So, at that point of a time, we will start using an embedding APIs. We'll talk about that in the next class, but yeah, in today's class, I believe.

00:10:10.000 --> 00:10:20.000
Agenda is clear. Right, guys? Everyone? Yeah, agenda is clear for today's class. What we are going to discuss, what we are going to do.

00:10:20.000 --> 00:10:26.000
Yep. Okay, guys, fine. So, open up your laptop, open up your system, and let's get started.

00:10:26.000 --> 00:10:37.000
Fine, and in case of any kind of a question, feel free to ask me a question, uh, like a now, or maybe, like, uh, after the class. It's completely okay with me. I don't have any kind of an issue.

00:10:37.000 --> 00:10:50.000
In terms of solving your problems. I missed yesterday's class, not an issue at all. If you have missed today's class, it's completely okay. Recordings are already available, so you can feel free to go through a recording.

00:10:50.000 --> 00:10:59.000
And ask me a doubt. And you can ask me a doubt, guys, from any of these classes, like, even from the previous classes, you can ask me a doubt, I don't have any issue, because I know.

00:10:59.000 --> 00:11:15.000
Some of you will go through a lecture, some of you will go through a recording, uh, maybe in a later stage. So, obviously, when you will go through a recording, then you will be having our doubts, and uh… Just ask. So, okay, let me… those who have joined for the very first time. So, guys, uh…

00:11:15.000 --> 00:11:22.000
This is your badge, technically, and uh… this is a place from where you will be able to join your lectures.

00:11:22.000 --> 00:11:31.000
Right? And, uh, here is our second August lecture, then 3rd August lecture, then this is the studies lecture, and today's lecture will be available.

00:11:31.000 --> 00:11:53.000
Uh, after completion of this entire session, maybe, like, by evening. By evening, it will be available. Not before evening, because it takes time for us to, you know, process the video and then upload the video. And all of these resources, so whatever I have discussed in a class, all of these resources are already available, so whether it's a code, or maybe it's something which I have written on my scribble ink, right?

00:11:53.000 --> 00:12:07.000
Or, uh… so anything, anything which I discuss, I keep on uploading all of those resources inside your dashboard, so… that at any point of a time, you will be able to go through it, and you will be able to download, and you will be able to use it.

00:12:07.000 --> 00:12:13.000
Everything will be in a single place, as simple as that. Okay, so that's just a recap of this lecture.

00:12:13.000 --> 00:12:23.000
Now, open up your VS Code, guys, yeah? Open up your VS Code, and let's start creating some of the APIs. So, file…

00:12:23.000 --> 00:12:30.000
Open folder… And, uh… here, so baby…

00:12:30.000 --> 00:12:36.000
I can try to create a folder called as API. Api underscore.

00:12:36.000 --> 00:12:43.000
Testing.

00:12:43.000 --> 00:12:49.000
Okay, so just create a folder, just like, uh, we have created a folder yesterday, right?

00:12:49.000 --> 00:12:57.000
So yesterday, we did the same thing, exact same thing. So here, uh, we can try to create a file called as testing.

00:12:57.000 --> 00:13:06.000
By file. Okay, so let's create one, testing.py file, and now let's start writing a code for put and for delete.

00:13:06.000 --> 00:13:15.000
Should I continue with this if I have missed this today's class? Yeah, I believe you should, but it will be better if you can, like, you know, go through the previous lecture, because.

00:13:15.000 --> 00:13:28.000
Lectures will be dependent, right? Because whatever I have discussed in today's class, obviously, I'll be using those things even in my, like, today's class.

00:13:28.000 --> 00:13:43.000
So, fine, guys. Uh… Let's start, uh, coding. So today, as I told you, that we are going to talk about, basically, put and delete, right? So, put and delete is another method. You all will be able to find out.

00:13:43.000 --> 00:13:49.000
Uh, put means, basically, update operation. So, let's suppose we have a data, we have a record.

00:13:49.000 --> 00:13:56.000
And, uh, I would like to, like, update those records. So, in that case, I can try to send a request as a.

00:13:56.000 --> 00:14:11.000
Put request. And, uh, second option is, so let's suppose if I have to basically delete some of the record. So, in that case, I will try to send a delete request, as simple as that. So, put means update, delete means.

00:14:11.000 --> 00:14:24.000
Delete. And I believe we all understand meaning of get and, like, a post, basically. So GET means getting our data in general, but yeah, uh, the difference between get and post is, so you will be able to send a GET.

00:14:24.000 --> 00:14:32.000
A request with a open data, or everyone will be able to see a data. Post means you are sending some of the data in a body.

00:14:32.000 --> 00:14:44.000
As simple as that. Okay, so now, here, so let me try to do an import. So, from fast… API, uh, import FastAPI. This is something that we have to do.

00:14:44.000 --> 00:14:49.000
And then, uh, from… Pydentic, P-Y.

00:14:49.000 --> 00:14:55.000
D-n-t-i-c, parenting. So, import base model. So, we are trying to import two things over here, guys.

00:14:55.000 --> 00:15:07.000
So, one is a fast API, and another one is a Pyntic. Why we are using a Pyntic? So, I believe we all are aware about this particular thing. Let me ping you this in a chat, these two imports.

00:15:07.000 --> 00:15:16.000
So now it's available in your chat as well. So, here we are trying to use our pydentic, because Pyntic will be used for a data validation. So, whenever we are sending a data.

00:15:16.000 --> 00:15:34.000
It will try to validate it with the help of Pyntic class. So, this is a nomenclature, this is something that we try to follow inside a fast API. And nowadays, it's very normal. Nowadays, it's very normal in all Pythonic frameworks, so whenever you will go through even a lang chain or Llama index, or.

00:15:34.000 --> 00:15:38.000
Even a crew AI, so which is going to help you out in terms of creating an agent.

00:15:38.000 --> 00:15:47.000
Almost everyone is following up Identic, right? Almost everyone is following up and tick. So, going forward also, we will be able to, like, see such kind of things a lot.

00:15:47.000 --> 00:16:01.000
Allotment is literally a lot. So here, for a data validation, we are going to use. It means whatever, like, data type that you are going to define, or whatever ranges of data you will be able to define, so Pyntic will be able to validate beforehand.

00:16:01.000 --> 00:16:12.000
Now, so we are able to import these two things. Now, let's try to create a variable of FastAPI. So, that's cool, we have done, but this is nothing but a variable, or you can say.

00:16:12.000 --> 00:16:18.000
Object of FastAPI class, we are able to create, which is going to help me out to expose anything.

00:16:18.000 --> 00:16:26.000
As an API to anyone. Okay. Now, so, I'm going to talk about, first of all, a PUT method, right? Put means?

00:16:26.000 --> 00:16:40.000
Update, yeah? Putman's update, basically. So, what we are going to update, by the way, so we need some sort of a data, right? So, if we have to update something, obviously, I need a data. Unless, suddenly, I don't have a data.

00:16:40.000 --> 00:16:56.000
What I'm going to update. So there is a possibility that data is available into our databases, right? Maybe data is available in some of the file system, or maybe I can try to create a data over here itself. So let's suppose I'm creating a user DB.

00:16:56.000 --> 00:17:07.000
Just a dummy data, I'm going to create over here. So, let's do it in this way. So, userDB, and here, so I have a record. So, maybe I have user ID 1.

00:17:07.000 --> 00:17:19.000
And for that, so maybe I have a name. So, maybe I have a name over here, and name is equals to, let's suppose, Sudhan Shu.

00:17:19.000 --> 00:17:25.000
Fine. And, uh, age is mine, age is not, like… 20, but yeah, let's keep it 30.

00:17:25.000 --> 00:17:37.000
So, is Lanzhu, a name's Lanzhu, Ace is 30, fine. Then there is a second user, and uh… I'm going to… Keep it as a second user.

00:17:37.000 --> 00:17:43.000
And let's suppose, uh, second username is? Amr Indra, and uh…

00:17:43.000 --> 00:17:52.000
Again, name is not Tamarindra, so this one. Fine. Age is this?

00:17:52.000 --> 00:17:58.000
Now, the third user, uh, I can try to pick Mustafa, I can see his name in the chat.

00:17:58.000 --> 00:18:09.000
So… name is, basically.

00:18:09.000 --> 00:18:17.000
Mustafa, fine. So, these are the records which I have created. So, let's suppose these are the sample records that we have taken.

00:18:17.000 --> 00:18:19.000
Yeah, the other sample record that we have taken over here.

00:18:19.000 --> 00:18:37.000
And we will try to update these records. Yes, we will try to update these records. So, as you can see, these records are nothing, it's just a… In a dictionary format, I'm trying to hold a data. In a key and value format, I'm trying to hold a data. Simple, right? So, we have basically a key. Let's suppose this is the ID.

00:18:37.000 --> 00:18:47.000
And then, this is our value. This entire dictionary is a value. Now, inside this dictionary, again, we have a key and a value, key and a value pair. So, this style I'm trying to keep our data.

00:18:47.000 --> 00:19:00.000
Over here. Maybe, uh, you must be having a dictionary inside a dictionary inside a dictionary, depends, right? Depends. So, it's up to you how you are keeping your data, how you are holding your data. So, you will be having a complete control over to it.

00:19:00.000 --> 00:19:05.000
But yeah, I'm just going to take this very, very simple sample data, and.

00:19:05.000 --> 00:19:13.000
Maybe I'll try to update this data with the help of this PUT request, right, with the help of this PUT request, I'll try to update the data.

00:19:13.000 --> 00:19:27.000
Fine? Why you did not use a co-pilot for an auto-completion? Uh, I'll use it, don't worry. So, in the future, I'll use it. I think it's, uh, you guys are very, very new with respect to.

00:19:27.000 --> 00:19:36.000
Like, you know, co-pilot and code autocompletion. So if I'll start using it, I can do a coding in 30 seconds, but with the same speed, you will not be able to understand.

00:19:36.000 --> 00:19:43.000
So, we'll try to, you know, uh… spend some time together, so that we will be able to learn the basics.

00:19:43.000 --> 00:19:50.000
And once we'll be able to run the basic, believe me, in a project, I'm not going to write a line-by-line code, because it will be a 10,000 line of a project.

00:19:50.000 --> 00:20:00.000
Right? Then, obviously, I will be using a complete AI. Right? So, initially, I'll go slow, don't worry.

00:20:00.000 --> 00:20:07.000
Uh, because I know, like, uh… unless and until we not… we are not coming on the same page, it will be very difficult for us to, you know.

00:20:07.000 --> 00:20:16.000
Grasp a concept. Fine? Yeah? So this is, like, this is the style I used to follow in all the classes, so nothing new.

00:20:16.000 --> 00:20:33.000
You will get used to it very soon. Okay, so here I'm able to create a data, right? For some of you, I know it will look boring, because you will say that, okay, so in two hours, we are, like, you know, covering a very small amount of a concept.

00:20:33.000 --> 00:20:46.000
That's okay, because going forward, so we are going to pick up the pace.

00:20:46.000 --> 00:20:57.000
Okay. Now, so here, we have a user, a data, right? User data that we have already created. Now, we have to update this data. So, obviously, to update this data, I'm going to use a.

00:20:57.000 --> 00:21:07.000
Put a method, yeah? I'm going to use, basically, a put method. So, obviously, I'm going to, like, create a function, and that function will update my data.

00:21:07.000 --> 00:21:16.000
And that function, I'm going to eventually open it up as an API, because this is the meaning of an API. This is something that we understand as an API.

00:21:16.000 --> 00:21:21.000
Right? So we are going to create a function over here. So let's suppose I'm going to write down that def.

00:21:21.000 --> 00:21:29.000
Uh, user, uh. User underscore update.

00:21:29.000 --> 00:21:32.000
So maybe this is a function which I'm going to create.

00:21:32.000 --> 00:21:39.000
And, uh, again, so when I'm trying to update a user, right, whenever I'm trying to update the user.

00:21:39.000 --> 00:21:47.000
So, obviously, I have to pass a value that which user I would like to update, maybe user number 1, maybe user number 2, maybe user number 3, right?

00:21:47.000 --> 00:21:57.000
So I have to pass those values that, okay, so user number 1, I would like to update. User number 2, I would like to update. And then I have to pass an updated data as well, both.

00:21:57.000 --> 00:22:03.000
Yes, both. So here, as a parameter, I can say that, that, okay, so I'm going to pass user ID.

00:22:03.000 --> 00:22:17.000
As a integer, let's suppose. And then I'm going to pass a user data. Now, so, as FastAPI is going to follow up Pydentic. Pydentic means via a Pydentic class, you have to route a data.

00:22:17.000 --> 00:22:28.000
So, before this, before this, before writing this particular function, so you have to create a class, let's suppose, so that it will be able to take a data, it will be able to do a data validation.

00:22:28.000 --> 00:22:39.000
So, I have a class, class called as user, you can try to give any other name, and then I'm trying to inherit a base model, so that it will be able to get all the property of the base model class, identity class, right?

00:22:39.000 --> 00:22:47.000
So here, we have a user. And inside this user, so let's suppose we have a name, and name should be available as a string.

00:22:47.000 --> 00:22:57.000
And then we have a age, and age should be available as an integer. So, we have basically a name, right? We have basically a name, and we have age. We have name, we have age.

00:22:57.000 --> 00:23:04.000
Only these two dataset we have, right? So, we are looking for a validation only for these two datasets. Very simple. Okay.

00:23:04.000 --> 00:23:10.000
So, here, I have created this particular function. I'm trying to create this function, update function, right?

00:23:10.000 --> 00:23:18.000
What update function will do? So, it needs user ID, means which ID I have to update. And then, against that, I need this data.

00:23:18.000 --> 00:23:23.000
Yeah, I need this data, then only I will be able to update, right? Let's suppose if I'm trying to update ID number 2.

00:23:23.000 --> 00:23:32.000
So, I need a data that, okay, fine, so what is the new data? This is the old data, right? This is the old data. So what will be the new data for user ID 2?

00:23:32.000 --> 00:23:40.000
So that data also I have to pass. Now, that data I can try to pass via Pyrendig class. Very simple, right? Via PyntonDig class, I can try to pass this particular data.

00:23:40.000 --> 00:23:50.000
So, user. So, user is, like, user data is coming from where? So, my identity class, capital U, that I have created, this parentic class, means validate it, pass it.

00:23:50.000 --> 00:23:59.000
Simple, and this Pyth class is taking what? Name and age, and this name and age, yes, this name and age is required inside my dataset, as simple as that. Okay.

00:23:59.000 --> 00:24:05.000
So, here, uh, we will try to pass an ID, that which one to update, and then.

00:24:05.000 --> 00:24:19.000
The equivalent data set. For that particular ID. Now, here inside this, we can try to keep a check. We can write maybe EF kind of a statement, that if user ID exists, do this. If user ID doesn't exist.

00:24:19.000 --> 00:24:24.000
Do that. Simple, right? So, here we can try to write that if user ID.

00:24:24.000 --> 00:24:34.000
User ID in userDB, this dataset. If user ID is in userDB, then try to basically update a user DB.

00:24:34.000 --> 00:24:38.000
For that particular user ID with this data, whatever data that you are getting.

00:24:38.000 --> 00:24:45.000
Means we are getting a data from here, right? So we are trying to extract those data, and against that ID, we are going to update it.

00:24:45.000 --> 00:24:51.000
And then return your message, that, okay, so I have updated, like, a user updated.

00:24:51.000 --> 00:25:01.000
Successfully, and maybe you can try to return whatever message you want. So we are returning a message that user updated successfully with this particular data, with this particular, like, a user ID.

00:25:01.000 --> 00:25:07.000
With this particular user ID, so it has been updated. So, this is something that we are trying to do.

00:25:07.000 --> 00:25:12.000
Hope this makes sense to all of us, right? So, based on this particular condition.

00:25:12.000 --> 00:25:20.000
If this is not going to happen, right? If this is not going to happen, so maybe you can try to write an else statement, or maybe you can try to write.

00:25:20.000 --> 00:25:29.000
Just a parallel return over here that do this. So, else, return a message, user not found. So, whatever user ID that you are trying to enter.

00:25:29.000 --> 00:25:34.000
That user doesn't even exist. And if user doesn't exist, what I will do?

00:25:34.000 --> 00:25:38.000
I should not append any new data, right? I should always update it.

00:25:38.000 --> 00:25:43.000
So, this is a very simple and plain function, so which is going to update my.

00:25:43.000 --> 00:25:47.000
Data set, right? This is going to update my data set.

00:25:47.000 --> 00:25:57.000
Now I have to expose this function. Right? I have to expose this function so that from any programming language, from any other framework, you all will be able to access it.

00:25:57.000 --> 00:26:02.000
And I think we know the drill over here, right? So how I will be able to expose.

00:26:02.000 --> 00:26:09.000
Yes, guys? Yes, I believe we all understand, right? We all know how we can expose it.

00:26:09.000 --> 00:26:21.000
So this is the simple function, which is going to work here in this program, right? But let's suppose I have to make it, like, exposed to the entire world, not to the world as of now, let's suppose, like, two other programs in my local system.

00:26:21.000 --> 00:26:28.000
Let's suppose if I have to expose. I think we all know the game, right? This is the meaning of API that we were trying to understand since yesterday class.

00:26:28.000 --> 00:26:38.000
It's today's class, yeah? So, simple. Call what? App. App is what? App is my variable of FastAPI, right? Okay.

00:26:38.000 --> 00:26:50.000
Okay, so call app, and app.app. What I should call? I should call put this time, because I'm trying to create this function for what? I'm trying to create this function.

00:26:50.000 --> 00:26:55.000
To update the user, yeah? To update the user. So I'm going to call app.put.

00:26:55.000 --> 00:27:06.000
As simple as that, right? App.put, okay, that's cool. So app.put, I'm going to call, so that I will be able to update the user, and now I would like to create a route.

00:27:06.000 --> 00:27:11.000
Means, at this location, you will be able to access this particular function.

00:27:11.000 --> 00:27:24.000
The user update function which I have written. So, route depends upon me. I can, like, give any kind of a route that I want. No one is going to stop me. That, don't use this route, don't use that route. It's completely up to me what route I'm going to give.

00:27:24.000 --> 00:27:36.000
Right? What route I'm going to give. So, simple, here what I will do, I'll just write maybe, like, a… user underscore db slash data slash maybe a V1.

00:27:36.000 --> 00:27:42.000
Slash update. Something like this, I have given a route. Means, when you will try to.

00:27:42.000 --> 00:27:46.000
Go through this route, then only you will be able to update.

00:27:46.000 --> 00:27:53.000
I believe we all know this philosophy, right? Right, guys? Everyone?

00:27:53.000 --> 00:28:06.000
You know? So I can, I can try to give whatever route that I want, as simple as that. So, here I have given this many… this much of lengthy routes, you can try to give even a bit more lengthier, or maybe a bit shorter, that's completely fine, right?

00:28:06.000 --> 00:28:22.000
So, UserDB data slash update, and then… When you are using a PUT, right? So, when you are using a put, you have to pass what? You have to pass, basically, user ID. So, maybe you can try to parameterize it over here.

00:28:22.000 --> 00:28:33.000
Saying that, that, okay, so I will try to do an update for this particular user ID. So, user ID. So, here, in a route itself, I'm sending.

00:28:33.000 --> 00:28:46.000
This data. That, okay, you can send a… you can append a user ID over here as a parameter. So this is nothing but as a parameter, so that it will be able to understand that, okay, which record I have to update.

00:28:46.000 --> 00:28:50.000
Which record we have to update, and as a data. Right? As a data.

00:28:50.000 --> 00:28:55.000
So, in a route itself, I'll try to send that which record we have to update as a parameter.

00:28:55.000 --> 00:29:02.000
And then as a data, I'm supposed to send this data, name and age. Technically, this information I have to send.

00:29:02.000 --> 00:29:08.000
Against the user ID, right? So that it will be able to get those data, and then it will be able to update it.

00:29:08.000 --> 00:29:14.000
It will be able to update it against that particular ID which I'm sending. Fine? Again, that particular ID I'm sending.

00:29:14.000 --> 00:29:19.000
So, here, I'll try to send a data inside my body.

00:29:19.000 --> 00:29:23.000
As simple as that, I'll try to send a data inside my body.

00:29:23.000 --> 00:29:32.000
So, this is, uh… like a core philosophy behind upput, that, okay, update this one, and route whatever you want, just give that particular route, as simple as that.

00:29:32.000 --> 00:29:42.000
Okay, so save it, and let's try to run it. So, how we are going to run, by the way, guys? So, we are going to run by UV call.

00:29:42.000 --> 00:29:48.000
Right? Uv call, what is my file name? My file name is testing. So, testing… only testing.

00:29:48.000 --> 00:29:56.000
Right. So my file name is Testing, by the way. Colon, app, and hyphen, hyphen, I'm going to give reload.

00:29:56.000 --> 00:30:04.000
Reload, so that, you know, it will be able to reload itself. Uh, it will not ask unnecessarily for me whenever I'm going to make any kind of a changes.

00:30:04.000 --> 00:30:17.000
So that's only, like, reason I'm giving a reload. Otherwise, you can even skip it, that's completely fine. Uh, but it will not be able to make the changes when you are going to make a changes, like, immediately. So, in an API, it will not reflect it.

00:30:17.000 --> 00:30:27.000
So, find, hit enter. If everything is going to work, so it is going to give you, like, uh, waiting for an application startup, application startup, completed.

00:30:27.000 --> 00:30:33.000
Let me ping you this code so that you can test it along with me. So test it, guys, quickly.

00:30:33.000 --> 00:30:47.000
Sir, explain 9 number 23, what is there inside line number 23? See, it's a dictionary. So, here, from this class, I'm going to pass name and A, so technically, this kind of a data will come, right? This kind of a data will come.

00:30:47.000 --> 00:30:50.000
And it's a dictionary operation which I'm trying to do. So, userDB.

00:30:50.000 --> 00:30:59.000
User ID, right? So, against this user ID, I'm trying to pass some data. For example, let me show you this example here. So, new file.

00:30:59.000 --> 00:31:07.000
Uh, testing, or maybe, like, a demo.ipynv. Let me create this file, so those who are.

00:31:07.000 --> 00:31:17.000
Like, uh, not clear with, uh, this one. So, here, I'm showing you one example, dictionary example. So let's suppose I have created a dictionary over here, right? I have created a dictionary over here.

00:31:17.000 --> 00:31:25.000
Now, inside this dictionary, I have basically name. Is equals to something like this, yeah?

00:31:25.000 --> 00:31:33.000
No. So, if I have to update, basically, this name, right, if I have to update, basically, a name.

00:31:33.000 --> 00:31:42.000
So what I will do, I'll try to access dictionary with name, first of all, right? And then, instead of Alice, so I can write SUDH.

00:31:42.000 --> 00:31:48.000
Yeah? So I'm trying to access a key, and then against that, I'm trying to change its value.

00:31:48.000 --> 00:32:00.000
Right? I'm trying to access a key, and against that, I'm trying to change the value. Now, if you will see your dictionary, so now it's not a list, now it's basically SUDH. So basically, I have done what? I have done an update.

00:32:00.000 --> 00:32:03.000
I've done what? I have done an update operation. Same thing.

00:32:03.000 --> 00:32:15.000
Right? Same thing. So, user ID. So, this is my key, let's suppose one is a user ID. So, from this particular dictionary, userDB, user underscore db, I'm trying to pass a new data.

00:32:15.000 --> 00:32:19.000
From where I'm getting a new data, I'm getting a new data.

00:32:19.000 --> 00:32:27.000
By validation… after validating it with the parentic classes. Making sense to all of us, guys, anyone who is confused with line number 23?

00:32:27.000 --> 00:32:34.000
Yes, anyone who is confused? No? Cool, right? Everyone?

00:32:34.000 --> 00:32:41.000
Like, we are able to understand, so it's just a dictionary operation, we are doing nothing much. Just a dictionary, simple, plain dictionary operation, yeah?

00:32:41.000 --> 00:32:48.000
A module not found, someone is saying, uh, FastAPI, uh, just try to install FastAPI then.

00:32:48.000 --> 00:32:55.000
Yep. Uh, that's the only issue. If you are getting model, not final number 21 function, can you explain one more time? Line number 21?

00:32:55.000 --> 00:33:03.000
This one? So this function is nothing like… this function is trying to take two inputs. One is a user ID. As per my data again.

00:33:03.000 --> 00:33:10.000
So, this is not, like, hard and fast that you should always pass this one. You should always pass based on what you are trying to update. So what I'm trying to update.

00:33:10.000 --> 00:33:16.000
So, first of all, I'm trying to update this particular record, right? Let's suppose I'm updating this record.

00:33:16.000 --> 00:33:21.000
Now, how you will be able to update? First of all, you have to go to a key.

00:33:21.000 --> 00:33:31.000
This one, and then against that, only you will be able to update. Let's suppose you have to change my names, Danju. Maybe you are not liking this particular name called as Ranju. You would like to replace Ranju with someone else.

00:33:31.000 --> 00:33:37.000
Right? So, to reach out to Sudhanshu, you have to reach out to, first of all, name, right?

00:33:37.000 --> 00:33:42.000
Yeah? Name. And then, against this name, you have to change this one.

00:33:42.000 --> 00:33:53.000
Again, this particular name, you have to change this one. So, first of all, you will reach out to this, then from there, you will be able to reach out to this. For example, right, for example, if I'm going to take this data itself, right? This data itself.

00:33:53.000 --> 00:34:04.000
Let's suppose if I have to update this record. Yeah, I have to update this record. How I will be able to update? So, basically, I will try to call userDB dictionary.

00:34:04.000 --> 00:34:10.000
Right? If I have to update this record, so userDB dictionary. So, let's suppose I have to update record number 1.

00:34:10.000 --> 00:34:16.000
Yeah? Record number 1. So, UserDB1, it is going to give me what? Userdb1 is going to give me this one.

00:34:16.000 --> 00:34:25.000
This data, right? Now. So I have to update it. So how I can update it? Nothing. Equal to, and replace it with the new data.

00:34:25.000 --> 00:34:33.000
So, name is equals to… name is equals to maybe, uh… instead of Sudan Shu, so let's write, like, a…

00:34:33.000 --> 00:34:41.000
Come out over here, yeah? Kumar, and then age is equal to something. So fine, update is done, right?

00:34:41.000 --> 00:34:49.000
Userdb, update is done. Simple. So, previously, it was Sudhansu. Now it became name is equal to Kumar.

00:34:49.000 --> 00:34:59.000
As simple as that, if I have to go into a… first to record, and into, basically, a name. How I can go into the name?

00:34:59.000 --> 00:35:02.000
Simple again, name, so it will be able to fetch just a name.

00:35:02.000 --> 00:35:06.000
So I believe we all know this kind of operation, and that's the reason why I've asked you.

00:35:06.000 --> 00:35:17.000
Please go through my lectures, because in very, very detailed, very, very depth, I have discussed each and everything, and you need a fundamentals. You need a fundamentals, or basic of Python.

00:35:17.000 --> 00:35:26.000
So those who are not aware about it, even I have asked you last time, last class, last Saturday or Sunday, and again, I'm asking you, spend this entire week, at least.

00:35:26.000 --> 00:35:31.000
45 minutes to 1 hour per day, and believe me, you will be comfortable by next Saturday itself.

00:35:31.000 --> 00:35:37.000
In Python, right? Because this small, small things will keep on hurting you.

00:35:37.000 --> 00:35:44.000
Not today, even tomorrow, and even in the future. Right? If you are not going to revise it. And it's just a one-time game.

00:35:44.000 --> 00:35:54.000
And whenever you are going through my lectures, please don't take a note. I'm not teaching someone to, like, you know, pass the exam. Whenever you're going through my lectures, especially.

00:35:54.000 --> 00:36:08.000
Code it parallelly, right? Open up your laptop, maybe to a screen, and then… do it in parallel. This is the best way to learn, and believe me, in that way, you will not have to spend a time, like, again on the same topic.

00:36:08.000 --> 00:36:22.000
Fine, guys, cool. I think we are able to understand those who have had a confusion with respect to this update. I believe this confusion is like a… Uh, not there, right?

00:36:22.000 --> 00:36:28.000
Yes, everyone?

00:36:28.000 --> 00:36:39.000
Okay, so some of you are getting an error, so I can see that in a chat, and there should be a way to see all the endpoints added in a different file. What is the question, by the way?

00:36:39.000 --> 00:36:57.000
Okay, fine. So, here… We have basically this, uh, like, uh, we have basically this, uh, entire, uh, function, and we have exposed it, right? We have exposed it. So, if you will go and check, so my app is running where? So, my app or my API is running, at localhost 8000.

00:36:57.000 --> 00:37:04.000
Okay? That's fine. If I have to access it, and if I have to make some sort of update, or if I have to test it.

00:37:04.000 --> 00:37:10.000
So simply, I can go to my. Uh, localhost, 8000 port number.

00:37:10.000 --> 00:37:21.000
So, 8000 port number. And, uh, yeah, so detail not found, that's completely fine. I can do slash DOCS, so that it can open up a.

00:37:21.000 --> 00:37:30.000
Fast Swagger API. Fast API provides a Swagger API. And as you can see, that there is a PUT request.

00:37:30.000 --> 00:37:34.000
Which is visible to me in a Swagger API, slash docs, right?

00:37:34.000 --> 00:37:40.000
Are you able to get it, guys? Everyone?

00:37:40.000 --> 00:37:46.000
Yes? We all are able to get it right. Now, to execute it, it's the same command, guys.

00:37:46.000 --> 00:37:54.000
Uv corn, space. Whatever file name that you have given, in my case, I have given my file name is equal to testing. So, file name.

00:37:54.000 --> 00:38:10.000
Colon app, app will be static, and then hit enter. If you are going to give hyphen hyphen reload, it simply means that, that in a runtime, if you are going to make any changes here, light, it will be reflected automatically, it will try to refresh it automatically. That is the only meaning.

00:38:10.000 --> 00:38:24.000
Yeah? Nothing much. So, we are able to see, for me, it's showing GET. So, it's showing GET, it simply means that you have not given a put over here. You have given a get over here. That's the only reason.

00:38:24.000 --> 00:38:44.000
It's showing you GET, yeah? So here, change it. Okay, so now, if we have to test this, uh, you know, API, so maybe I can click on try this out, yeah, try this out, and here, so we can try to pass maybe a user ID. So here, user ID is equal to, let's suppose, one I'm going to pass.

00:38:44.000 --> 00:38:46.000
Yeah, user ID is equal to 1, I'm going to pass.

00:38:46.000 --> 00:39:00.000
And name a value and age value I have to pass as a data. Fine. So, user ID is equal to 1, I'm going to pass, and uh… let's suppose name is equals to… Name is equals to… I'm going to pass KUMAR.

00:39:00.000 --> 00:39:08.000
Kumar, right? And age is equal to, let's suppose, 40-something, which I'm going to pass. And then, if I'm going to call execute.

00:39:08.000 --> 00:39:16.000
Like, if I'm going to call execute, now, if I'll come over here, so it's a 200 request, put 200, right? So, 200 means?

00:39:16.000 --> 00:39:20.000
It was a good request, basically. And response, I'm able to get somehow.

00:39:20.000 --> 00:39:30.000
Right? Now, so, here, in a response body, you will be able to find out that user updated successfully.

00:39:30.000 --> 00:39:38.000
This is something that we have written, right? So, user updated successfully, and then user ID, it is going to return. So, user ID is.

00:39:38.000 --> 00:39:43.000
Or user detail it is going to return, right? So, name and is, it is going to return that particular data.

00:39:43.000 --> 00:39:50.000
Right? Whatever, like, update that I have done. So, successfully, I'm able to update a record.

00:39:50.000 --> 00:39:56.000
Simple, yeah? So, successfully, I'm able to update a record over here.

00:39:56.000 --> 00:40:06.000
So this is how this is, like, a working, guys, and this entire API is available at which place? At this particular place. I'm trying to pass… what? I'm trying to pass.

00:40:06.000 --> 00:40:17.000
Id, right? Uh, if I have to do a curl, so I can do a curl as well. You will be able to find out a curl command. So, whereas at data, I'm trying to pass name is equal to kumar, H is equal to 40.

00:40:17.000 --> 00:40:23.000
Over here. Now, so, let's suppose I would like to print an updated data somewhere.

00:40:23.000 --> 00:40:37.000
Yeah, I would like to, like, print and updated data somewhere. Uh, not an issue, so I can try to, like, maybe, uh, say that, okay, so in a console, just try to print a.

00:40:37.000 --> 00:40:43.000
I can even write an API for that, but yeah, let's try to, like, do just a print operation. So, print user DB over here.

00:40:43.000 --> 00:40:50.000
And, uh, now… So, let's go ahead and let's try to… hit this API.

00:40:50.000 --> 00:41:07.000
Once again. Yeah, hit this API once again.

00:41:07.000 --> 00:41:13.000
Okay, so it is not able to come out of this one.

00:41:13.000 --> 00:41:20.000
No, no, no, it will not work in this way. So…

00:41:20.000 --> 00:41:50.000
It is taking a global one.

00:41:53.000 --> 00:42:09.000
Okay, so… Bajam?

00:42:09.000 --> 00:42:30.000
Yeah, so now I'm able to see the latest change, right? So name is equal to Kumar, H is equal to 40, so I'm just, like, we were able to get it even before, but yeah, I was just trying to show you, uh, maybe somewhere. In a console, I was trying to show you that, okay, fine, so… This is something which you can see, that whatever upgrade which I'm trying to send with respect to a particular ID, so I'm able to get that particular data.

00:42:30.000 --> 00:42:34.000
As simple as that. So it simply means that I'm able to update a record.

00:42:34.000 --> 00:42:37.000
And that was the whole objective, that was the whole idea.

00:42:37.000 --> 00:42:44.000
Yes, share the pop-up window block kasi karin. Let me do one thing, so attendees can chat with host and panelist, yeah.

00:42:44.000 --> 00:43:00.000
So now, you will not be able to see each and everyone's chat, because I think it will become, like, a too much chatty and noisy, uh, right? So, I will be able to see your chat, and you will be able to see only my chat.

00:43:00.000 --> 00:43:07.000
I have all the control, don't worry. So, you will not get disturbed at any point of a time. So, this is the code, guys. Again, I have pinged it to you.

00:43:07.000 --> 00:43:18.000
And if we have to run the code, so what is a command? So command is very simple. Uvcorn, in my study's class, I have used the exact same command, and I'm not using anything different today. It's exactly the same.

00:43:18.000 --> 00:43:25.000
Yeah? It's exactly the same.

00:43:25.000 --> 00:43:35.000
Okay, so can I show another example for an update? I'll show you multiple examples, just wait. First of all, try to execute this particular example, I'll show you that, a multiple one.

00:43:35.000 --> 00:43:42.000
Fine, guys. So, we are, we are basically able to update this particular record, whatever record that is available to us, right?

00:43:42.000 --> 00:43:49.000
Now, if we have to update maybe a record number 2, if we have to update record number 3, I will be able to update all of those records.

00:43:49.000 --> 00:43:54.000
Now, let's try to test it with the help of Postman. So, I believe we all have installed a Postman.

00:43:54.000 --> 00:44:07.000
Uh, yesterday itself, right? So we all have installed the Postman. Now here, so if you'll come to Postman, and if you have to hit your API, so simple, you have to select, first of all, a type of the request. So, type of the request is what?

00:44:07.000 --> 00:44:11.000
Put, right, type of the request is technically a put over here.

00:44:11.000 --> 00:44:22.000
And then you have to basically give a URL. So, whatever URL at which your data is available, so you have to give that particular URL, and then you have to pass the data.

00:44:22.000 --> 00:44:30.000
Right? You have to basically pass the data. So, here, uh, let's suppose I have this URL, so localhost8000.

00:44:30.000 --> 00:44:38.000
And then… Local host, 8000.

00:44:38.000 --> 00:44:46.000
And, uh, this is the route.

00:44:46.000 --> 00:44:52.000
This is the route. User underscore db slash data slash v1 slash update.

00:44:52.000 --> 00:45:02.000
Uh, let's suppose we are trying to update record number 2, and data-wise, so we can try to pass a data over here, so there will be… name, let's suppose.

00:45:02.000 --> 00:45:12.000
So, name, so name is equals to, maybe, something, FSDS… kind of a things. And then there will be an age. Age is 10. Now I'm going to send it.

00:45:12.000 --> 00:45:19.000
And, uh, yeah, so user updated successfully, user name is equals to whatever name that I have given against.

00:45:19.000 --> 00:45:28.000
What? Against, basically, my user ID. So, against my user ID 2, I have updated this particular record. Now, if you'll go and check your console.

00:45:28.000 --> 00:45:31.000
You will be able to find out the exact same thing, right?

00:45:31.000 --> 00:45:39.000
So, in your console. Against user ID 2, as we can see, this is the new record which has been updated.

00:45:39.000 --> 00:45:42.000
Now, this record, I'm trying to update it in my local.

00:45:42.000 --> 00:45:48.000
Maybe I have a database, and inside a database, I can go ahead and I can try to update the record.

00:45:48.000 --> 00:45:55.000
Maybe I have some sort of a JSON file, or maybe a CSV file, maybe a TXT file. Inside that, I would like to do something.

00:45:55.000 --> 00:46:00.000
Everywhere, I will be able to do it. At the end of the day, whole idea was to call a put.

00:46:00.000 --> 00:46:07.000
And with the help of PUT. Update some of the data, update some of the records.

00:46:07.000 --> 00:46:12.000
Making sense, guys? To all of us?

00:46:12.000 --> 00:46:26.000
Yes?

00:46:26.000 --> 00:46:41.000
So someone is asking me that, what is the difference between put and patch? Okay, so there is another method which exists. So what PUT will do, so PUT will try to update the entire record, means with… against whatever key or against whatever value you're trying to do something. So put will try to, you know, update the entire record.

00:46:41.000 --> 00:46:50.000
Whereas patch, as its name suggests, patch, right? So, patch means what? So we are trying to do something partially. So, we are trying to apply a patch on top of something.

00:46:50.000 --> 00:47:02.000
So, patch will help you out in terms of updating a record, but partially. Put means a full record update. So, that's a whole difference between put and patch. Both, eventually, are going to help you out in terms of updating the record.

00:47:02.000 --> 00:47:13.000
Yeah? In terms of reading the record. Okay, so here we are able to update the record. Now I'm going to terminate this program, and now, let's try to understand a delete operation.

00:47:13.000 --> 00:47:17.000
Fine? So, put is completely fine, we are able to do it.

00:47:17.000 --> 00:47:27.000
Now, let's try to understand the delete operation. And I have seen, guys, that many of you have not done the homework. So, I have just seen, like, a couple of ping inside the group, so where people were saying.

00:47:27.000 --> 00:47:42.000
That I'm able to do a homework. Now, that's another problem, right? That's another problem. See, uh… This is a technical class, right? It's not a movie. So, which you will just watch and leave.

00:47:42.000 --> 00:47:46.000
You have to go ahead with the assignments as well. The assignment which I'm giving you on a regular basis. Going forward.

00:47:46.000 --> 00:47:54.000
That assign will become a challenges, right? And believe me, if you are going to do those assignments, if you are going to do those challenges.

00:47:54.000 --> 00:47:58.000
Every time you do an assignment, every time you do a challenges.

00:47:58.000 --> 00:48:02.000
The success rate. The transition rate.

00:48:02.000 --> 00:48:10.000
Will increase each and every time. So, you will be… you will get closer to your, like, a goal, whatever, like, goal or ambition that you have.

00:48:10.000 --> 00:48:15.000
Maybe to build a product, or maybe to make a transition, maybe to get a higher salary. But if you're not doing it.

00:48:15.000 --> 00:48:19.000
In every next class, you will end up asking just a question.

00:48:19.000 --> 00:48:29.000
Which is not going to help you out. Yeah? Where do… so, that's the problem, right? Mohiti is asking, where to submit the assignment? I believe we had a discussion. We had these discussions.

00:48:29.000 --> 00:48:38.000
Australia itself. That is, that is a major problem, guys.

00:48:38.000 --> 00:48:43.000
Yep.

00:48:43.000 --> 00:48:50.000
So, I'm expecting you to, you know, complete all the assignment, all the coursework, all the homework I'm trying to give you.

00:48:50.000 --> 00:48:54.000
And now you can take a help of AI. I don't have any kind of an issue.

00:48:54.000 --> 00:48:57.000
At the end of the day, what I want you to do is.

00:48:57.000 --> 00:49:03.000
Completed. Because I know when you are going to execute something in your system.

00:49:03.000 --> 00:49:07.000
That is the only point where you learn. You never learn when I come and teach it to you.

00:49:07.000 --> 00:49:13.000
So you actually learn when you do it, on your own, in your own system, by typing, maybe by.

00:49:13.000 --> 00:49:19.000
Doing a copy and paste, that's okay. Yeah?

00:49:19.000 --> 00:49:29.000
So, thank you, sir. Now, chats are not disturbing anymore. Yeah, we have all the control, don't worry. So, I can see all of your chat, but you are not able to see each and every one's chat. I have just turned that off.

00:49:29.000 --> 00:49:34.000
I'll switch it on after the class, yeah?

00:49:34.000 --> 00:49:44.000
How to see updating a terminal? Just print it. I have applied a print over here, right? A simple print statement, so that every time it is going to update, it will try to print. Simple.

00:49:44.000 --> 00:49:56.000
Yeah? Okay, now let's talk about a delete operation, guys. Yep, delete operation. So, delete means it will try to delete something, some records. This is the whole idea behind the delete operation, right?

00:49:56.000 --> 00:50:05.000
Okay, so let's write a function, so def… Yeah? Def, uh, delete, underscore user function. So, something like this, I'm going to write. So, delete underscore.

00:50:05.000 --> 00:50:14.000
User function, okay? User function. Now, to delete any user, I just have to pass a user ID. So, user.

00:50:14.000 --> 00:50:17.000
Id I'm going to pass, so user ID as an integer.

00:50:17.000 --> 00:50:24.000
Now, it will try to check if user ID in userDB. So, if user ID exists, let's suppose you have passed a user ID is equal to 4.

00:50:24.000 --> 00:50:31.000
That is not even available over here. So what it will delete? Nothing, right? It will not be able to delete anything.

00:50:31.000 --> 00:50:38.000
Yeah? So it'll try to just check that user ID in UserDB. So, if this is true.

00:50:38.000 --> 00:50:52.000
If this holds true, then it will try to call a delete operation. This is how anything can be deleted in a dictionary. For example, if I have this dictionary, like, userDB dictionary, and if I have to delete record number 2.

00:50:52.000 --> 00:51:08.000
How I can delete record number 2? Simple. Call del function, yeah, and then dictionary name, user underscore, db, and then try to give a record, whatever record that you would like to maybe delete. So let's suppose I would like to delete, maybe, a second record.

00:51:08.000 --> 00:51:17.000
Yeah? Second record. So, delete userDB, second record. This particular key. So, execute it. Now, if you are going to print userDB.

00:51:17.000 --> 00:51:29.000
So we don't have, uh, record number 2. We have record number 1, and we have record number 3. 2 is gone. I have already deleted it. So, same operation we are trying to perform, same dictionary operation, right? So, delete user ID.

00:51:29.000 --> 00:51:37.000
Whatever user ID user is going to pass, and then return a message that user deleted successfully. If user ID doesn't exist, it will fall inside else statement.

00:51:37.000 --> 00:51:44.000
And it will return you that user not found. As simple as that. User not found, okay? Fine.

00:51:44.000 --> 00:51:49.000
Now, if I have to convert it into an API. Again, we know the drill.

00:51:49.000 --> 00:51:54.000
Yeah? If we have to convert this one into an API, I think we know the drill.

00:51:54.000 --> 00:52:01.000
Simple, decorate it app dot, right? And then delete. Call delete.

00:52:01.000 --> 00:52:08.000
And then give some route, maybe userDb slash data slash v1 slash delete, and then you have to pass the user ID.

00:52:08.000 --> 00:52:15.000
So whatever route that you are going to like it, so just give that particular route, and it will reach out to the route, it will try to perform the operation.

00:52:15.000 --> 00:52:21.000
So, here is a code, guys, I have pinged you. So, hope you all are able to see my code in our chat.

00:52:21.000 --> 00:52:29.000
Yeah? So this is the code, by the way. So it will be able to delete it. Now, let's make this app up and running.

00:52:29.000 --> 00:52:33.000
Yeah? Let's execute it. So again, open up your command, clear.

00:52:33.000 --> 00:52:40.000
And UVCon, right? Uvcon, my file name, and then reload. Reload is not important.

00:52:40.000 --> 00:52:53.000
You can leave it or you can keep it. Fine, guys, yeah, and please change your file name. So, if your file name is not testing, don't use this command. Change your file name. Testing is my file name, as you can see over here, right? This is my file name.

00:52:53.000 --> 00:53:05.000
Fine? Okay, that's cool. So, let's try to do experimentation, guys, with respect to… This delete operation. So, I can try to use a curl, I can try to use, basically, SwaggerUI.

00:53:05.000 --> 00:53:09.000
So let's do it in a Swagger UI. Here, right? Here.

00:53:09.000 --> 00:53:28.000
So, localhost, and then docs. So, here, my PUT request is available, my delete request is also available, right? My put is available, my delete is available, both is available. Put, we have already tested. Let's test with the delete. It's a very easy one. So, click on try it out, and then pass a user ID. So, user ID is equal to 2, execute.

00:53:28.000 --> 00:53:38.000
And, uh, user deleted successfully. Simple, this is the response I am able to receive. Good response, right? Uh, let's suppose if I'm going to give user IDs equal to 7, execute.

00:53:38.000 --> 00:53:42.000
So, in case of User ID 7, user not found. That's a response that you will be able to see.

00:53:42.000 --> 00:53:49.000
Yeah? So, user technically not found. This is the response I'm able to get it. I can do it even with the help of curl.

00:53:49.000 --> 00:53:57.000
Right? I can do it even with the help of curl, because curl is going to consider just this one, and if you have to pass the data. But we are not passing any kind of a data.

00:53:57.000 --> 00:54:08.000
Hyphen D over here, right? I can even test it with the help of what? A postman. So, over here, select this delete operation, and then my entire URL was what?

00:54:08.000 --> 00:54:18.000
Uh, delete. I believe this was the URL, and then try to give the user ID, right? Try to give the.

00:54:18.000 --> 00:54:26.000
User ID, keep it none. And then, send. User deleted successfully. Not sending any raw data, so keep it none.

00:54:26.000 --> 00:54:40.000
Yeah? Keep it none over here, inside the postman. So, just select the delete option over here, and then reach out to this particular location, so where your, uh… method has been hosted, uh, give a parameter, user ID, and then if, again, I'm going to send it.

00:54:40.000 --> 00:54:52.000
User not found, because I have already deleted it, right? I've already deleted it. So again, if I'm going to send, not found, not found, not found, not found, but it is hitting my API, it is hitting my API, as you can see, but yeah, there is no such user.

00:54:52.000 --> 00:54:57.000
With that particular ID, so what it is going to delete? Nothing.

00:54:57.000 --> 00:55:04.000
Fine, guys. Postman and unicorns are same. No, not at all. Postman is basically a tool.

00:55:04.000 --> 00:55:11.000
A tool which is going to help you out in terms of, uh, like, testing an API, basically.

00:55:11.000 --> 00:55:19.000
Right? Uv corn is nothing but a kind of a library, which is going to help me out in terms of executing a fast API.

00:55:19.000 --> 00:55:33.000
It's not same. I love Swagger, as it gives a curl command as well. Yeah, I mean, like, curl command is not difficult, so simple, like, a curl, and then method name you try to give, then you try to give a URL.

00:55:33.000 --> 00:55:37.000
Then you give a header, then you give a data. End of the story.

00:55:37.000 --> 00:55:42.000
This is what a curl command is. Right?

00:55:42.000 --> 00:55:58.000
Fine, guys! How the autocoding is coming into your system help, uh, where in my system, it's not coming. So, okay, if you would like to, like, do an auto-coding, so just, uh, go to this icon, which is called as extension.

00:55:58.000 --> 00:56:12.000
I talked about this one, I believe, in. My second class, if I remember. So, just try to click here, just try to click on this icon. I believe my mouse cursor is visible to all of you, and then try to search Copilot.

00:56:12.000 --> 00:56:16.000
Or GitHub Copilot, so anything is going to work. So Copilot. Co.

00:56:16.000 --> 00:56:34.000
Uh, PILOT. P-i-l-o-t. So, GitHub GoPilot, and then, like, try to install it, and likewise, there are, like, so many things which is available, so you can try to, you know, use any of these.

00:56:34.000 --> 00:56:44.000
Fine, guys? Is it clear? A put and delete operation? By the way?

00:56:44.000 --> 00:57:01.000
Yeah. So, that's great.

00:57:01.000 --> 00:57:05.000
And it's completely fine. Anam?

00:57:05.000 --> 00:57:15.000
Okay. So, actually, Maja, agi biah?

00:57:15.000 --> 00:57:38.000
Okay, so this is done by the way. So, now… Uh, what we are going to do. So, maybe we can try to, uh, you know, deploy this entire solution, right? Maybe we can try to deploy this entire solution over some cloud platform. So, as of now, this entire thing is running in my local host.

00:57:38.000 --> 00:57:48.000
And yesterday, we have seen that if we have to do a port forwarding, port forwarding means if something is running on my local host at some particular port, and URL.

00:57:48.000 --> 00:57:53.000
So, with the help of ngrock, I will be able to expose it to the entire world.

00:57:53.000 --> 00:58:01.000
Right? This is something that we have already discussed, right? In my studies lecture itself, this is something which we have already gone through.

00:58:01.000 --> 00:58:12.000
Uh, that, uh, with the help of port forwarding, uh, for example, NGRock, by the help of NGRock, I will be able to expose it so that anyone and everyone will be able to come, and they will be able to test it.

00:58:12.000 --> 00:58:20.000
Or they will be able to use my APIs. Right? Uh, but let's suppose I don't want to keep a solution in my system.

00:58:20.000 --> 00:58:25.000
Not at all. Like, I don't want any kind of a solution in my system.

00:58:25.000 --> 00:58:32.000
I just want all of these things on some server, or maybe on some cloud platform.

00:58:32.000 --> 00:58:38.000
So, how I can do that, basically, how I will be able to do a deployment.

00:58:38.000 --> 00:58:42.000
Of this entire API, this entire thing, which, whatever is running in my local system.

00:58:42.000 --> 00:58:49.000
It should not be available in my local system, it should be available somewhere in a global platform, so that.

00:58:49.000 --> 00:58:55.000
Anyone will be able to access it without even tunneling or without even port forwarding. The port forwarding that we have done yesterday.

00:58:55.000 --> 00:59:03.000
So, to do that, obviously, you have to deploy the solution on any of the cloud platforms. So there are tons of cloud platforms out there.

00:59:03.000 --> 00:59:16.000
Not just one or two tons, means literally tons of provider. So, AWS, Azure, GCP is the major provider. Apart from that, there is a render, there is a lot of bare metal cloud provider, so many, so many options you have, by the way.

00:59:16.000 --> 00:59:29.000
So, I'm going to now show you that how you will be able to bring this solution, which is a very small one, obviously, right, but on a cloud, how you can try to push it, so that whatever solution going forward we'll build.

00:59:29.000 --> 00:59:40.000
We will try to build end-to-end. Going forward, we'll try to add a flavor of databases as well. So, many more flavors we'll keep on adding, so that we can reach out to the reality, right? Reach out to the reality, because obviously.

00:59:40.000 --> 00:59:44.000
In real, code is not going to run in your local system.

00:59:44.000 --> 00:59:50.000
Code will be available somewhere in a cloud platform, yes? Somewhere in a cloud platform.

00:59:50.000 --> 01:00:00.000
So, NGRock not working in Mac, any other alternative? No, it works in a Mac, by the way. So, there is a Mac installation, uh, which is available for MGRock.

01:00:00.000 --> 01:00:05.000
You have to just place inside that, like, a folder, and then execute it.

01:00:05.000 --> 01:00:11.000
Someone is saying… something is saying, unable to hear, is it? Guys? Am I available to all of you?

01:00:11.000 --> 01:00:23.000
Satan, please check your, uh, this one. Mike, I'm audible and visible to all of you.

01:00:23.000 --> 01:00:32.000
Okay, so now, what we'll do, we can try to push this code base, right? We can try to push this entire codebase into some of the.

01:00:32.000 --> 01:00:43.000
Cloud platform, right? Some of the cloud platform. Now, to push this entire codebase into some of the cloud platform. So, basically, we have to do some sort of a preparation.

01:00:43.000 --> 01:00:52.000
What kind of preparation? So, C. In my local system, when I have done this setup, and when I'm able to run this fast API.

01:00:52.000 --> 01:00:57.000
I have done a couple of installation, right? So, I have done installation for FastAPI.

01:00:57.000 --> 01:01:06.000
And I have done installation for UV corn. This is something I have done. Now, what cloud is going to provide? So, cloud is going to provide you a machine.

01:01:06.000 --> 01:01:13.000
Right? A machine, a compute, or maybe, like, a RAM it is going to provide you, maybe a hard disk it is going to provide you.

01:01:13.000 --> 01:01:19.000
But, uh, those cloud platforms never knows that what you are holding inside your code.

01:01:19.000 --> 01:01:23.000
Or what kind of a library, what kind of a dependency that you have.

01:01:23.000 --> 01:01:34.000
Right? Cloud platform will not be having any kind of idea, because there will be, like, millions of people who will try to come and who will try to deploy a tens of millions of application on a cloud platform.

01:01:34.000 --> 01:01:39.000
So, Cloud Platform will not be aware about that, that what you are trying to deploy. It is just going to give you a machine. A machine which is public.

01:01:39.000 --> 01:01:45.000
So, as of now, I'm using my machine, but it is not public, it is basically my local machine, right? Local machine.

01:01:45.000 --> 01:01:55.000
But on a cloud, you will be able to get something which will be a public machine. So, whatever is running here, which I'm able to access, so if I'm going to run the same thing on that machine.

01:01:55.000 --> 01:02:02.000
All of us will be able to access. This is what it means, right, in terms of a deployment. In a layman way, right? As a beginner.

01:02:02.000 --> 01:02:23.000
So, Cloud Platform will not be having any idea that, uh, what kind of a dependency, what kind of an installation it has to do. So you have to mention it. How? So, in case of Python project, so you have to create, basically, a file called as requirement, R-E-Q-U-I-R-E-M-E-N-T-S dot.

01:02:23.000 --> 01:02:32.000
Txt, requirements.txt. If your spelling is going to be wrong, it will not work. So, it should be requirements S, S.

01:02:32.000 --> 01:02:45.000
Yes? Requirements, basically. Check their spelling, the spelling which I have written over here, you have to use the exact same spelling. And then you have to mention a library. So, which library we have installed?

01:02:45.000 --> 01:02:49.000
So, technically, we have installed a… like a fast API?

01:02:49.000 --> 01:02:55.000
And basically, we have installed… we have installed UVCore. These two installations we have done, base was Python.

01:02:55.000 --> 01:03:00.000
Right, base was Python, but FastAPI and UVCore is something that we have.

01:03:00.000 --> 01:03:05.000
Uh, like, uh, installed, right? We have, uh, technically, uh, this is something that we have installed.

01:03:05.000 --> 01:03:09.000
So, okay, this is something that you have to mention. So, requirement.txt.

01:03:09.000 --> 01:03:23.000
And, uh, we have this particular file, uh, testing.py file is, uh, there with us, right? So, is there with us. Now, what we can do… we can try to choose a cloud platform, so where we can do a deployment.

01:03:23.000 --> 01:03:38.000
Yeah? Where we can do a deployment. So, now, let's go ahead, and let's try to do a deployment. If there'll be some error, if it is going to say that I have to install even Pydentic, as people are suggesting over here inside a chat, we'll do it. We'll do it on the fly.

01:03:38.000 --> 01:03:42.000
So, first of all, guys, you have to push your code. Where?

01:03:42.000 --> 01:03:55.000
On a GitHub, yeah? So, on a GitHub, you have to push your code. And, uh, you have to choose your cloud platform. So I'm going to choose a render, which is going to be free, it is not going to ask for the credit card.

01:03:55.000 --> 01:04:00.000
Uh, and you will be able to do a deployment, right? You will be able to do a deployment.

01:04:00.000 --> 01:04:05.000
So let me go to a Google, and once you will go to a Google.

01:04:05.000 --> 01:04:10.000
Render, yeah? So, just try to search for a not REN.

01:04:10.000 --> 01:04:21.000
Dr render. Fine, a render. So, this is the platform, guys. I have pinned you the link, right? And you just have to do a login.

01:04:21.000 --> 01:04:25.000
So those who are doing a login for the very first time, so please take your time, 2-3 minutes, it should not take more than that.

01:04:25.000 --> 01:04:36.000
Right? Those who have already logged in, so come to the dashboard. So once you are going to log in, so it is not a big deal to create an account, it's very easy, right? Just use a Google sign-up option.

01:04:36.000 --> 01:04:42.000
And you will be able to create the account. So do it, guys, and confirm me inside a chat.

01:04:42.000 --> 01:04:47.000
Sign into render, so I'm going to sign in with the Google.

01:04:47.000 --> 01:05:15.000
Yeah. So just try to sign in. Just use a Google option. You will be able to do a login quickly.

01:05:15.000 --> 01:05:21.000
Done, okay, visa, versat number should also match in the requirement file. Leave it, we'll see.

01:05:21.000 --> 01:05:27.000
Like I said, so if you are going to get a bug, uh, we'll solve it. And in that way, you will learn more.

01:05:27.000 --> 01:05:34.000
Just, just, uh, log in, guys, everyone.

01:05:34.000 --> 01:05:41.000
Just log in and confirm me inside a chat. I can see done, dun-dun for many people. I'm just waiting for most of you.

01:05:41.000 --> 01:05:50.000
Okay, it's done. Yeah, most of you have done, okay. Good.

01:05:50.000 --> 01:06:03.000
So anyone who has not done, so please ping me, maybe by saying no, or something.

01:06:03.000 --> 01:06:08.000
Yeah, is it free? Yeah, it's completely free. It will never ask you to add the, like, a card.

01:06:08.000 --> 01:06:13.000
Okay, one moment, fine, I'm waiting. I'll give you, like, another 2-3 minutes of time.

01:06:13.000 --> 01:06:28.000
So take your time. Yes, not able to log in. Why not able to log in? It's a simple portal, right? Just go ahead and… Click on that Google sign-in, and then you will be able to log in, as simple as that.

01:06:28.000 --> 01:06:39.000
Same Gmail credential. I mean, like, it's up to you what Gmail credential you are going to use.

01:06:39.000 --> 01:06:48.000
No, if you're doing a Google sign-up, then this lengthy option is not allowed, like, not required. You can just do and go and do as a sign-up.

01:06:48.000 --> 01:06:54.000
Click on the Google login, and then… approve your Google sign-up.

01:06:54.000 --> 01:06:58.000
Logged in using GitHub, yeah, that is also fine. If you have logged in using a GitHub.

01:06:58.000 --> 01:07:17.000
Not an issue at all. Is it the same like we did in a streamlined in our FSDS? Yeah, Streamlint is also a cloud platform, and Render is also another cloud platform, so Extremely generally supports Streamlit-based application itself. Render supports everything.

01:07:17.000 --> 01:07:24.000
Yep.

01:07:24.000 --> 01:07:29.000
Mean times are how you find these free tools which blocks.

01:07:29.000 --> 01:07:43.000
Okay, so… If you are active in a tech, you will get all the news and information. So, you just have to keep yourself active.

01:07:43.000 --> 01:07:48.000
Already having a render login since, like, Iron Time 2021, okay, that's great.

01:07:48.000 --> 01:07:55.000
So now, uh, we have a render account, right, and this render is going to provide you a machine.

01:07:55.000 --> 01:08:03.000
Right? A machine, so where you will be able to, you know, go and, uh, you will be able to productionize your application. It means whatever is working in your local system.

01:08:03.000 --> 01:08:24.000
You can try to put that up into a render, and it is going to give you a shared instances, means there will be a big machine, which will be shared by multiple people. There is a payment option, so if you are going to attach a payment option, then it will try to give you more and more facility in terms of scaling, security, and many more things, right? Many more things that are going to give you.

01:08:24.000 --> 01:08:38.000
But even without a payment, so, so far. I'm not sure about future, right? Yeah? But so far, so, without even adding a card, you will be able to do a deployment. Whereas, so if you're going to opt for Azure GCP, or AWS.

01:08:38.000 --> 01:08:48.000
Without card, at least you have to add the card. They are going to give you a free credit for the very first time, uh, for, like, a couple of months, or maybe for a particular amount.

01:08:48.000 --> 01:08:54.000
But you have to add the card, and they will start charging once you're, like, a free credit is going to be over.

01:08:54.000 --> 01:09:03.000
So here, render is not like that, at least till now. I don't know what is going to happen in future, by the way. So, here, we have our render account.

01:09:03.000 --> 01:09:11.000
Now, parallel to that, try to open up your GitHub account. Everyone, try to open up your GitHub account, by the way.

01:09:11.000 --> 01:09:16.000
So, inside, what we are going to do, so we are going to push our code into a GitHub.

01:09:16.000 --> 01:09:22.000
Right? We are going to push our code into a GitHub, and once we'll be able to push our code into a GitHub.

01:09:22.000 --> 01:09:27.000
So, we are going to… attach those code.

01:09:27.000 --> 01:09:35.000
Inside a render, and that will be deployed. So, first, you have to push your code into a GitHub, and then from a GitHub.

01:09:35.000 --> 01:09:40.000
We will be able to deploy it. So now, to push something into a GitHub.

01:09:40.000 --> 01:09:51.000
It's very simple, right? It's very simple. So anyone, guys, from a group who have not done even a single check-in into a GitHub, anyone?

01:09:51.000 --> 01:10:00.000
Yeah? Okay, so basically those who are saying me no, or I don't have, I haven't used it, right?

01:10:00.000 --> 01:10:06.000
It simply means that they have not gone through a Python lecture.

01:10:06.000 --> 01:10:16.000
Okay. This is what I wanted to know.

01:10:16.000 --> 01:10:35.000
So, okay, not an issue. So basically, uh, those who are new, right? So, GitHub is basically our platform, so where you can try to push your code, right? And eventually, whenever you are going to do a deployment, basically, majority of cloud platform, whenever you will go and do a deployment. So.

01:10:35.000 --> 01:10:42.000
You have to, like, basically attach your GitHub ID or GitHub account, and from a GitHub repository itself, it will be able to.

01:10:42.000 --> 01:10:58.000
Uh, pull your code, and then it will be able to do a deployment. And going forward, so when we are going to perform our CI-CD operation, so continuous integration and continuous deployment operation, so even at that point of a time, so we'll show you that how continuously you will keep on checking our code, you will keep on merging your file.

01:10:58.000 --> 01:11:07.000
Resolving your conflict, and then automatically, it will keep on deploying on your server. But that's a long story. That will come in a picture after maybe 2-3 months of time.

01:11:07.000 --> 01:11:15.000
Not now. Uh, so those who is not having a GitHub account, so please, uh, try to search GitHub on, uh, Google.

01:11:15.000 --> 01:11:20.000
This is, again, one time, but we are going to use it throughout the lecture, throughout the class.

01:11:20.000 --> 01:11:29.000
And like I said, please try to spend some time this week, at least, on my Python lectures.

01:11:29.000 --> 01:11:33.000
Yeah? Github is free, yes, it's completely free, at least for now.

01:11:33.000 --> 01:11:43.000
I mean, like, not for everyone, for organization, you have to pay, I think, $6 per, uh, no, $4 per user.

01:11:43.000 --> 01:11:51.000
Fine? So just try to create a GitHub account so that you will be able to push a code, and as a techie, guys, one thing let me tell you.

01:11:51.000 --> 01:11:57.000
If you are not having a GitHub account, if you are not having a LinkedIn account.

01:11:57.000 --> 01:12:05.000
Please go and create. I know all of us have, uh, Instagram account or a Facebook account, but as a professional.

01:12:05.000 --> 01:12:10.000
You must have, and you should have a LinkedIn account, and you should have a GitHub account.

01:12:10.000 --> 01:12:20.000
And please try to activate yourself in both the places, because in both, like, GitHub account and LinkedIn account is going to build a credential.

01:12:20.000 --> 01:12:29.000
Build authenticity, basically, for you. Start posting something on a LinkedIn, something valuable. Maybe you are trying to learn something, right?

01:12:29.000 --> 01:12:43.000
Posted that, okay, fine, this is something which I've explored, because there are, like, every kind of a people available on these platforms, right? So those who are beginner, those who are new, they will get attached to you, right? They will get attached towards you, and eventually.

01:12:43.000 --> 01:13:00.000
In a year of time, not immediately, I would say, right? But in a year of time, in two years of time, so you will be having a similar kind of a connection, or maybe a followings, from the same kind of a segment, because this is how all the social media is going to work, right? And when you are going to, like, you know.

01:13:00.000 --> 01:13:10.000
Distribute, or when you are going to upload, or when you're going to post something good, something, like, genuine. So, obviously, people are going to like it, people are going to appreciate it, and these are the same people.

01:13:10.000 --> 01:13:23.000
Who will help each other? I've seen, like, people are using LinkedIn, right? And they, straightforward, they go and they try to ask for the referral, they're straightforward, they go and they try to ask for maybe some sort of a recommendation, jobs, or something, right?

01:13:23.000 --> 01:13:35.000
Believe me, no one is going to help you out. No one means literally no one. If you have an authenticity, if you have built your credentials, right, if you are good in terms of providing content.

01:13:35.000 --> 01:13:44.000
People will reach out to you automatically. Saying that, okay, fine, so, like, I'm looking for this kind of a person, that kind of person, I've had this kind of work, that kind of a work, right?

01:13:44.000 --> 01:13:50.000
So, build your authenticity, and majority of people fails over there. In today's world.

01:13:50.000 --> 01:13:54.000
Personal branding is important, and believe me, maybe you will not realize it now.

01:13:54.000 --> 01:14:01.000
But in next 5 years, all of you are going to realize. I know a lot of people, right? And even in our group itself, we have a lot of people.

01:14:01.000 --> 01:14:07.000
So, whose experience is maybe, like, a 15-year, 20-year? But they have not built any kind of a social credentials.

01:14:07.000 --> 01:14:12.000
They have not built any kind of a followings, they have not built any kind of connections. Now.

01:14:12.000 --> 01:14:20.000
After some time, obviously, you will face challenges, because. After 15 years of experience into our industry.

01:14:20.000 --> 01:14:26.000
You can't say that I will go and I will apply for the job, right? Majority of job comes from the referral. Majority.

01:14:26.000 --> 01:14:29.000
I will say 90% of the job that people used to get.

01:14:29.000 --> 01:14:37.000
After 15-20 year is from referral, just from a referral. If someone knows you, someone will refer you.

01:14:37.000 --> 01:14:43.000
And how someone is going to know you in this… in… like, whole world. Obviously, with your work, right?

01:14:43.000 --> 01:14:57.000
That's the best way to introduce yourself. So if you have to introduce yourself, showcase your work, and keep on showing it continuously. That is going to build a credential, and believe me, that is going to give you an amazing return, amazing means, literally amazing, amazing return.

01:14:57.000 --> 01:15:08.000
Right? Start doing it. From today itself. It's a time now.

01:15:08.000 --> 01:15:18.000
So, fine, let me share my screen once again. Uh… So, just… I believe all of you have logged in into a GitHub. Those who, uh…

01:15:18.000 --> 01:15:25.000
Had not, uh, LinkedIn, uh, sorry, not LinkedIn. So those who didn't have a GitHub account, so I believe they are able to create it. Yes, everyone?

01:15:25.000 --> 01:15:31.000
Yeah? Github account? Again, it will take 2-3 minutes of time to create a GitHub account.

01:15:31.000 --> 01:15:42.000
Pardon? So, once you are able to create a GitHub account, and those who are trying to push a code for the very first time, right, for the very, very first time inside a GitHub account.

01:15:42.000 --> 01:15:47.000
You have to do a small setup, right? You have to do a small setup. What kind of a setup?

01:15:47.000 --> 01:15:50.000
So go to Google for the first-time user of the GitHub into a system.

01:15:50.000 --> 01:16:04.000
So, git, and then download. So, you have to basically search for Git Download, and you will be able to reach out to the official, uh, like, a page of Git Download, and here, let me ping you this link, get download link.

01:16:04.000 --> 01:16:06.000
So, link is available in your chat, you can check this out.

01:16:06.000 --> 01:16:17.000
So here, there is a Mac, Windows, and Linux. For all machines, it's given to you. So, let's suppose I'm using Windows, I'll click over here, and then I'll try to get for Windows x64 setup.

01:16:17.000 --> 01:16:27.000
So, it is going to download the files for me, and then once it will be able to download a file for me, I'll simply click over here. It's a very simple download, right? Very simple download.

01:16:27.000 --> 01:16:42.000
So, I'll just click over here, and then I'll try to… Click, click, click, install. And within 2-3 minutes, it will be able to install. It's a very, very lightweighted file. And then close your VS Code, open up once again. Or maybe you can open up your command prompt.

01:16:42.000 --> 01:16:47.000
And then I'll show you. Check your version.

01:16:47.000 --> 01:16:54.000
So, just do this. I have already pinned you a link, guys, so please try to, uh, you know, go to this location.

01:16:54.000 --> 01:17:04.000
Get a download, and as per your system, so whatever system that you are using, whether it's a Mac, Linux, or Windows, so please try to do a very, very quick installation.

01:17:04.000 --> 01:17:10.000
Because without this, you will not be able to push a code inside a GitHub repository in which you have signed up.

01:17:10.000 --> 01:17:16.000
Git must be available. So, Git is basically an open source project. It's an open source, like, a tool.

01:17:16.000 --> 01:17:28.000
And this GitHub is nothing but… it's a proprietary one, which belongs to a GitHub organization, as organization. Unlike GitHub, there is something called as BitBucket, GitLabs, so there are so many, like, other organizations.

01:17:28.000 --> 01:17:36.000
Technically, they maintain the code, they help you out in terms of marrying the entire repository, a codebase, a large base, right?

01:17:36.000 --> 01:17:43.000
Uh, but under the hood, they're using that Git.

01:17:43.000 --> 01:17:47.000
Yep. What is the path variable that we should use? Just go with the default one.

01:17:47.000 --> 01:17:54.000
Right? So, once you are able to install, just to, like, confirm that whether Git is available inside my system or not.

01:17:54.000 --> 01:18:01.000
So maybe you can come to a command prompt and write git. If you are able to see something like this, it simply means that Git is available.

01:18:01.000 --> 01:18:08.000
Yeah? If you're not able to see, like, command not found or something like this, it simply means that system is not able to recognize your Git.

01:18:08.000 --> 01:18:14.000
And in that case, you have to set the path, which is very rare. Nowadays, all softwares are giving you a default.

01:18:14.000 --> 01:18:20.000
Like a path configuration. Done, everyone? Are we able to install Git?

01:18:20.000 --> 01:18:26.000
I'll wait, and again, so, from next class onwards, we'll not do these things.

01:18:26.000 --> 01:18:30.000
We need it, but we'll not do it. So that, like, you know, we can save some time.

01:18:30.000 --> 01:18:44.000
Okay, Git is not recognized internal signal command. So, first of all, install, and then try to set the path.

01:18:44.000 --> 01:18:53.000
Done, everyone? Yeah?

01:18:53.000 --> 01:19:01.000
Okay. Done, done, done. And those who are facing an issue come to a doubt clearing right after the class. I'll fix some of the issues.

01:19:01.000 --> 01:19:06.000
How to check if Git is installed? I have already shown you, so where is your attention, Selva?

01:19:06.000 --> 01:19:16.000
So, just open up a command prompt and type, uh, get DIT git. This is how you will check.

01:19:16.000 --> 01:19:25.000
Sir, can you go a little bit fast? Not now. I think in a future lectures, but not now, because… Everyone is not on the same page.

01:19:25.000 --> 01:19:31.000
But yeah, everyone will be very soon, I know.

01:19:31.000 --> 01:19:36.000
Okay, git installed, fine, that's cool. So Git is installed, just close your VS Code once.

01:19:36.000 --> 01:19:55.000
And then open it once again, because sometimes it will not be able to recognize because of the catcher issue, so it will be able to recognize it. Now, we had this file, guys, we had our testing.py file, and we had already created a requirement.txt file. Now, what I have to do, I have to push this code, a code which is available in my local system, to a GitHub.

01:19:55.000 --> 01:20:00.000
Right? To our GitHub. That's the reason, so we were talking about GitHub, right? So, to a GitHub.

01:20:00.000 --> 01:20:06.000
So the flow is very simple. Uh, what we are going to do, so basically, we are going to…

01:20:06.000 --> 01:20:15.000
Push our codebase, whatever is available in my local.

01:20:15.000 --> 01:20:23.000
So, whatever is available in my local. I'll try to push it inside a…

01:20:23.000 --> 01:20:29.000
Github, which is nothing but a code repository, right, repo, and then from GitHub.

01:20:29.000 --> 01:20:34.000
So I'm going to call it inside a… render cloud.

01:20:34.000 --> 01:20:42.000
Cloud. So this is the step that we are going to follow, so from local to GitHub to a render. So let's do it. Github is ready. Render, we are able to log in.

01:20:42.000 --> 01:20:50.000
And in my local, I have already tested each and everything. So all these three components are ready, right? All these three components are ready. My local testing is done.

01:20:50.000 --> 01:20:57.000
Github, I'm able to log in, I'm able to do an installation, and then render, I'm able to do a sign-up. So these are the base, these are the base.

01:20:57.000 --> 01:21:04.000
Now, we are, like, good to go with the, uh, pushing a code into a GitHub. So, let's push a code from local to a GitHub. How? Let me show it to you.

01:21:04.000 --> 01:21:11.000
Yeah? So, once you have a GitHub account, click on your profile, the corner one.

01:21:11.000 --> 01:21:20.000
Right? Right-hand side, upper corner. So just click over here. You will be able to see your repository option. Are you able to see it, guys?

01:21:20.000 --> 01:21:30.000
Yes? Are you able to see it? So, just click on your profile tab, the icon, right, and here you will be able to see your repository. So click on your repository.

01:21:30.000 --> 01:21:37.000
Click it, yeah? So, click on your repository, and again, every time you will do the same thing, exact same thing. So, no changes at all.

01:21:37.000 --> 01:21:43.000
And almost in every alternate class, we are going to do a deployment. And whenever I'm going to give you challenges.

01:21:43.000 --> 01:21:48.000
Again, you will do a deployment. Without deployment, we'll not complete even a single example.

01:21:48.000 --> 01:21:53.000
Fine. Now, here, click on New. You must be able to see this green button, New.

01:21:53.000 --> 01:22:00.000
Right? So click on New, and just give a repository name. So let's suppose I'm giving a repository name as an API.

01:22:00.000 --> 01:22:14.000
Fine? So API is a repository name I'm giving. It's local to me, by the way, right? So API is a repository name. I'm not going to give anything else. Leave all the options as it is, no need to change anything. And then click on Create Repository. So, simple.

01:22:14.000 --> 01:22:21.000
You can give your name, whatever name that you want, you can give it to it. So click on Create Repository.

01:22:21.000 --> 01:22:25.000
Yeah? And then you will be able to find out these commands.

01:22:25.000 --> 01:22:30.000
These commands, you will be able to find out. Now, these commands are going to help you out in terms of pushing your.

01:22:30.000 --> 01:22:41.000
Code into a. Github repository. So here, right? So, these commands. Again, these commands are, like, only 4 to 5 commands.

01:22:41.000 --> 01:22:45.000
You have to use, and then from the next time, only 2 or 3 commands you will have to use.

01:22:45.000 --> 01:22:55.000
So what are the command? First of all, git init. So you have to initialize a git. Then git add. So, try to add your file into a buffer memory, or, like, a… in between.

01:22:55.000 --> 01:23:06.000
Github and your local. Uh, technically in a local, basically. And commit means just try to send some sort of a message. Then branch means access the branch where you're trying to send your code.

01:23:06.000 --> 01:23:11.000
And this is nothing but… this is our URL, the highlighted one. The selected one is nothing but it's a URL.

01:23:11.000 --> 01:23:19.000
Of this repository. So here you have to push the code, right? Where? Here. Here. You have to push the code. And then push means.

01:23:19.000 --> 01:23:28.000
Final, post it. Let's do it one by one, yeah? Let's do it one by one. So, first of all, you have to do what? So, uh, come to this side.

01:23:28.000 --> 01:23:34.000
Come to your terminal. Uh, stop each and everything, right?

01:23:34.000 --> 01:23:39.000
And, uh, I'm going to do git init, initialize it. First of all, yeah, initialize it.

01:23:39.000 --> 01:23:49.000
So whatever is available inside this directory, this location, so where you are writing it in it, so it will be able to initialize it. So initialize, and color has changed.

01:23:49.000 --> 01:23:55.000
It is able to initialize it. Now, I'm going to call git add, and then over there.

01:23:55.000 --> 01:24:10.000
So, it is written git add redeeme.md file. So, redemme file, they are trying to add. So what I will do, I'll not try to readme.md. So, what I will do, git add dot, means whatever file which is available, dot means, whatever file is available in this directory, right? Add everything.

01:24:10.000 --> 01:24:17.000
Simple. Add everything. Uh, so here, git add dot, hit enter. So simple, added each and everything.

01:24:17.000 --> 01:24:30.000
No. No. So, the next one is commit. Commit means? So, you are trying to do some sort of a commit, you are trying to send some code, but you would like to write some message along with that. So that is the meaning of commitment.

01:24:30.000 --> 01:24:36.000
So, commit. Uh, for example, you go and commit to your, like, girlfriend or boyfriend, right?

01:24:36.000 --> 01:24:39.000
But that doesn't mean that you will get married. So, in a similar manner.

01:24:39.000 --> 01:24:44.000
Basically, so we are doing a commit, then okay, fine, so let's keep it inside the buffer.

01:24:44.000 --> 01:24:49.000
Doesn't mean that I'll try to push it inside the cloud, or GitHub.

01:24:49.000 --> 01:24:58.000
Yeah? So. I don't know whether that was a good or a bad example, but yeah, this was something which came in my mind.

01:24:58.000 --> 01:25:05.000
Okay, good to see you at double MIT. Commit hyphen M means message, yeah, hyphen M means message, by the way.

01:25:05.000 --> 01:25:24.000
And I can write a message over here, so inside my string, so this is my… Uh, first code, yeah? This is my first code. And, uh, hit enter. So, it is… it has committed into a buffer memory. As of now, code is not available. It's in buffer now. It's in bit… it's hung in between my system and the.

01:25:24.000 --> 01:25:29.000
Git repository, so you can think in that way. But in the repository, code is not available.

01:25:29.000 --> 01:25:37.000
I have just committed. I have just committed, yes? So, committed which file? This file, this file, and this file. So, whatever file was available, I'm just like, okay, fine, let's do a commit.

01:25:37.000 --> 01:25:53.000
Yep. So, it is going to do a commit. Now, once commit is done, right, once this one is done, then you have to push a code. So, where you have to push a code. So, inside a Git, there is a concept of branching, which will eventually more and more clear. So once you will get involved into it.

01:25:53.000 --> 01:26:00.000
So, by default, there is a main branch. So, in main branch, if we try to push the code. So, git branch hyphen m.

01:26:00.000 --> 01:26:06.000
And then main. So git branch hyphen m main. So in… so this is the location where I have to place the code.

01:26:06.000 --> 01:26:11.000
Now, in a… what is the URL? How someone will be able to reach out to main branch?

01:26:11.000 --> 01:26:14.000
Right? How someone will be able to reach out to main branch.

01:26:14.000 --> 01:26:29.000
So, coming to the next code. So, git remote add origin, and this is basically a… place. This is basically a URL by which someone can reach out to the main branch. So, for every repository, it's going to be different. As you can see, API.git. So this is something that it has created.

01:26:29.000 --> 01:26:36.000
Now copy, and then git remote or add origin. The URL. Only for the first time you have to do it, na?

01:26:36.000 --> 01:26:45.000
So, URL has been added. Now, my system knows that where I have to send the code, whatever code that I have committed, right?

01:26:45.000 --> 01:26:58.000
Till commit, everything is going to happen in local, then we are trying to add the global environment, or Git, you can say, right? So now my system knows that, okay, fine, so I have to send this particular code in this location, in this Git repository. So this is how?

01:26:58.000 --> 01:27:03.000
System will get to know that, okay, fine, so I have to send a code over there. And then, finally.

01:27:03.000 --> 01:27:11.000
So, push origin main, right? So, what… the origin that you have added, the main origin, so over there, git push.

01:27:11.000 --> 01:27:16.000
So, push the entire code, so this is the final step, and it will push, as you can see.

01:27:16.000 --> 01:27:22.000
Uh, it has pushed, right? It has pushed all the code, and here, if you will come and if you will try to refresh it, right, if you'll try to refresh it.

01:27:22.000 --> 01:27:28.000
You will be able to see all the code.

01:27:28.000 --> 01:27:33.000
Yes, everyone?

01:27:33.000 --> 01:27:43.000
Uh, unable to do auto-direct email address, just add it. So, it is giving you this error, right? Git config global user email, right? So, instead of writing… so just copy that one.

01:27:43.000 --> 01:27:48.000
And, uh, wherever you are getting U at the rate, example.com, try to put your email ID.

01:27:48.000 --> 01:28:09.000
Simple. And in your name, try to put your name. For some of you, it is going to give this kind of issue.

01:28:09.000 --> 01:28:14.000
Email issue is all right? Yeah, this is, uh, some of you are going to see that issue.

01:28:14.000 --> 01:28:18.000
In other aspects, the reference peak main doesn't match any, okay?

01:28:18.000 --> 01:28:32.000
So, some of you are facing even this kind of an issue.

01:28:32.000 --> 01:28:38.000
So just try to check your, like, branch name, basically. So, your branch should be always a main.

01:28:38.000 --> 01:28:43.000
Those who are getting their source spec main doesn't match, right? So, you have written a grid.

01:28:43.000 --> 01:28:51.000
Main this one. Just check this out.

01:28:51.000 --> 01:28:57.000
Uh, git branch hyphen main, so after that, what to do? Okay, so after that, basically.

01:28:57.000 --> 01:29:02.000
You have to add, you have to add, basically, your… this one.

01:29:02.000 --> 01:29:05.000
This is what you'll get, basically, right? This is technically your Git.

01:29:05.000 --> 01:29:14.000
So you have to add it. For example, in my case, so what I have done, so I have basically done git remote origin, git remote add origin.

01:29:14.000 --> 01:29:22.000
This one, my URL, right? So you have to do this. Git remote add origin, and after that, push.

01:29:22.000 --> 01:29:29.000
So git push hyphen U origin main. All these codes are already available. Maybe you can create… go and create a new repository, and then you can check that out.

01:29:29.000 --> 01:29:46.000
Right. They used to list all the commands, so you don't have to even remember.

01:29:46.000 --> 01:29:55.000
Sayal Bakruddin, I think you are using your companies, or maybe some other repositories, that's the reason it's looking for the authentication. In this way, such as token.

01:29:55.000 --> 01:30:02.000
Uh, just use your private, uh, GitHub account.

01:30:02.000 --> 01:30:14.000
Yep. Okay, so now, guys, uh, we are… most of us are able to push the code. I think… I know some of you will face the issue, uh, which, uh, anyhow, we are going to resolve it in an out-clearing, right?

01:30:14.000 --> 01:30:23.000
So, no, code is available inside my GitHub repository, so till this point, I'm able to do it.

01:30:23.000 --> 01:30:27.000
So, from local to GitHub. This is done, right? Now, render.

01:30:27.000 --> 01:30:35.000
So let's go over there, and let's see, so what kind of an issue we are going to face with respect to render. So, here, we'll come to render, right? We'll come to render.

01:30:35.000 --> 01:30:46.000
Uh, now this code is available, I can see. Uh, this is unnecessary code, demo.ipuinv file. This was not required, technically, but I have pushed this code as well.

01:30:46.000 --> 01:30:54.000
Uh, that's okay. That's completely fine, right? Now, also, I can try to, like, create an application over here inside a render.

01:30:54.000 --> 01:30:59.000
So here, I can try to click on New, or maybe add new. It's completely fine. So click on New.

01:30:59.000 --> 01:31:10.000
And once you are going to click on New. Or maybe once you are going to click on Add New, so you can try to choose a web service, maybe. Yes, web service.

01:31:10.000 --> 01:31:23.000
So here, just try to click on a web service. And then, for the very first time, right, for the very first time, if you are doing it, it is going to ask you to attach your GitHub.

01:31:23.000 --> 01:31:29.000
Right? Or maybe, like, any Git provider. So it is going to do… ask you to do a sign-up, basically.

01:31:29.000 --> 01:31:43.000
So just try to do a sign-up, and once you are going to do a sign-up over here, it is going to show all the repositories. So, let's suppose I have a 34 repository in this GitHub account, right? And just now, I have created this one, API repository.

01:31:43.000 --> 01:31:49.000
Where I have pushed my code, a new code. So, it is showing me all of my reports.

01:31:49.000 --> 01:31:55.000
Fine days? Yeah? Repeating once again. Click on New, or maybe add new.

01:31:55.000 --> 01:32:00.000
Click on Web Service, right? So once you are going to click on web service, web service always.

01:32:00.000 --> 01:32:10.000
Right? Second option. So once you are going to click on Web Service, you will come on this particular page. Now, if you are coming here for the very first time, it is going to ask you to attach your GitHub.

01:32:10.000 --> 01:32:16.000
Click, and then attach the same GitHub account. It will be able to render all your.

01:32:16.000 --> 01:32:22.000
Like a repository. Let's suppose I have a 10, 20, hundreds of repository, it will be able to render. So just give authorization.

01:32:22.000 --> 01:32:27.000
That, okay, fine, so you are authorized to access my GitHub account.

01:32:27.000 --> 01:32:32.000
So give our authorization, and now, once you will be able to give the authorization, then.

01:32:32.000 --> 01:32:36.000
Basically, it is, like, going to show you all the repository.

01:32:36.000 --> 01:32:53.000
Yes? All the repository. Fine, so many of you are saying, yes, you are able to see all the repository. Repo should be public? No, it is private. You are authorizing it, right? So even private repository will be able to access.

01:32:53.000 --> 01:33:05.000
Yes? You're authorizing it. Technically, you are authorizing it, means you are bypassing your password and authentication, so even private and public, it will be able to list down.

01:33:05.000 --> 01:33:17.000
So you can keep your repo private as well. No need to, like, keep it public. Okay, fine, cool. So here, my API repository, which I have created just 5 minutes back, right, so, which is, like, been shown over here. So just try to select this API, right?

01:33:17.000 --> 01:33:26.000
So what is the repository name? Api. Fine, it is able to select automatically. And select means what? Source code. It will be able to pull all the source code.

01:33:26.000 --> 01:33:36.000
Into this machine, the render machine that we have, right? So in the render machine, it will be able to pull all the source code, as you can see. So, source code, it will be able to access from where? From here. It will be able to access it.

01:33:36.000 --> 01:33:42.000
Now, language. So, which language you have used, basically? So, Python, right? So, okay.

01:33:42.000 --> 01:33:48.000
Keep it as it is, Python. Fine? If you are using some other language, maybe a node, maybe a Go, maybe Elixir, maybe a Docker.

01:33:48.000 --> 01:34:02.000
Container, you are trying to use Ruby or Rust, so you can go ahead with that, but as of now, it's like a Python, okay? So, I'll select Python, which is a default one. In the which branch you have a code, so if you'll go over here, what is the branch that you are able to see? It's a main branch, right?

01:34:02.000 --> 01:34:14.000
Going forward, as we'll move, so you will learn a lot in terms of, like, a branching, forking, and then merging the branches, conflict resolution. All of those things you will be able to learn, but as of now, where my code is, in which branch.

01:34:14.000 --> 01:34:20.000
In a main branch, right? As you can see, here itself. So, in a main branch. Going forward, I'll even show you.

01:34:20.000 --> 01:34:28.000
That how in a same branch, you can keep backend and front-end, and then separately you can deploy a backend, separately you can deploy a frontend, because this is what we do.

01:34:28.000 --> 01:34:39.000
Even in real life, this is what we do. But as of now, I should not, like, think much about it. So just, like, do it. So here, main branch, and by default, main branch will be selected.

01:34:39.000 --> 01:34:44.000
Right? By default, main branch will be selected. As simple as that. Now.

01:34:44.000 --> 01:34:50.000
All these things are default. We are not, like, changing anything. If you would like to change the name, you can do it. Like, it is not going to harm you.

01:34:50.000 --> 01:34:57.000
But yeah, you can leave it as it is. Now, build a command. So, build a command means, so whenever it is trying to spin the machine.

01:34:57.000 --> 01:35:05.000
Whenever it is trying to allocate our resources. So, what kind of a setup it is supposed to do?

01:35:05.000 --> 01:35:19.000
Means, what kind of an installation it is supposed to do. So, if you remember, so we have attached what? We have attached requirement.txt file, and by default, it will give you this, right? By default. So, we have attached what? We have attached requirement.txt file, and what we have mentioned inside it?

01:35:19.000 --> 01:35:30.000
The installation, right? So, let's suppose for my project, FastAPI and UBCON is required, yeah? For my project, FastAP and UVicon is required. So, I've already mentioned this, FastAPI and UVCon.

01:35:30.000 --> 01:35:45.000
Yes, everyone? So I've already mentioned this FastAPI and UVCon over here. So, by default, what it will do, when it will try to spin the machine, start the machine for you, for your project, right? It will try to do the installation. Let's suppose I have mentioned maybe 10, 20, hundreds of libraries.

01:35:45.000 --> 01:35:55.000
So, in that machine, the instance, the resource which it is going to allocate inside a machine. So, in that one, it will try to install each and everything that you have mentioned over here.

01:35:55.000 --> 01:36:06.000
This is the meaning of this one, yes? Okay. Now, a start command. So, let's suppose we have, like, done… it is able to prepare the machine, your code is available.

01:36:06.000 --> 01:36:15.000
Now, when we have to start. Means when we have to launch the application. So what is the command that we have given, guys?

01:36:15.000 --> 01:36:20.000
Yeah? So what is the command that we have given?

01:36:20.000 --> 01:36:34.000
It's like a Docker image. No, Docker image is a different option. I'll show you going forward what is Docker. So basically, we have given, like, someone is saying nothing, how we have given nothing. So what is the start command for us in our local system? How we have launched the application?

01:36:34.000 --> 01:36:46.000
So it was a UVicon, right? So UVCon, and then file name, and then, like, an app, and then, like, uh, something like this we have given, right? Okay. So, maybe… maybe I can try to give the same thing. So, UVCon.

01:36:46.000 --> 01:36:56.000
Uvcon over here, right? And then, maybe. We can try to give something like this, so…

01:36:56.000 --> 01:37:03.000
Here. Our app name is… my file name is testing, T-E-S-T-I-N-G, testing.

01:37:03.000 --> 01:37:09.000
So, testing app hosts this on port number, this one. So, over here, you can try to define.

01:37:09.000 --> 01:37:16.000
This. I have just pinged you. Change your file name. Your file name and my will must be different, right? Or maybe might be different.

01:37:16.000 --> 01:37:24.000
So, just change your file name. Myfilame is testing, so you just have to change your file name, host and port number is going to be.

01:37:24.000 --> 01:37:29.000
Like, same.

01:37:29.000 --> 01:37:39.000
Yeah? Port and host is called… zero means you are allowing traffic from everywhere. This is the meaning of this one, 000.

01:37:39.000 --> 01:37:47.000
Port number you can change. You can maybe 10,001, 8001, 3000 series, 6000 series, whatever you want, you can just… like I tried to give it.

01:37:47.000 --> 01:37:54.000
Yeah? Can I give a multiple command? No. For one server, obviously, there will be only one entry point, right?

01:37:54.000 --> 01:38:00.000
There'll be only one entry point. So, this is the entry point.

01:38:00.000 --> 01:38:10.000
Fine. So, this is the command, guys, I have already pinged you inside your chat box, uh, just change, just change this, uh, like, uh, file name. My file name is testing.

01:38:10.000 --> 01:38:19.000
And hope by this time we all understand this part. So my file name is testing, whatever file name that you have, just give that file name. And then for hobby project, select this free.

01:38:19.000 --> 01:38:23.000
Yeah? So it is free, otherwise it is going to charge you. So it is free.

01:38:23.000 --> 01:38:31.000
Uh, now, so… You don't have to do anything. Click on deploy the web services, and if everything is going to work fine.

01:38:31.000 --> 01:38:49.000
You will be able to see a deployment in some time, and if there will be an error, you will be able to see an error as well. So now it has started deploying, so first of all, what it will do, it will clone it from the GitHub. As you can see, inside this, uh… log that it is trying to pull the.

01:38:49.000 --> 01:38:56.000
Code, first of all. So, from a GitHub, it is connecting, it is trying to pull the code, and then one by one, uploading in 3 seconds.

01:38:56.000 --> 01:39:06.000
A building, so build successful. Immediately, right? So, it's a very lightweighted project. So, immediately, just in a fraction of a second, it is able to build it. In some of the projects, it is going to take some time.

01:39:06.000 --> 01:39:21.000
Running UVCon test app host, this, this, this, at a port number 10,000. Okay, that's amazing, right? So… And within a fraction of a second, you can see that I'm able to get a live. Are you able to see live, guys?

01:39:21.000 --> 01:39:28.000
Are you able to see live this, this one? Yeah?

01:39:28.000 --> 01:39:32.000
So, this app is live. This app is live means whatever was working in my local.

01:39:32.000 --> 01:39:42.000
Now it's global, yeah? Now it's global, technically, and it's live. Now, in my local system, the URL was… local, host, column.

01:39:42.000 --> 01:39:46.000
Whatever port number that I have given, right? This was the URL, basically.

01:39:46.000 --> 01:39:51.000
Yes, this was the URL, total URL, right? Now here, this is the URL.

01:39:51.000 --> 01:40:01.000
This is the URL. Simple, which is a global one, which is a HTTPS URL, yeah? So now, let's go ahead and test it, that whether it's working or not.

01:40:01.000 --> 01:40:10.000
So here, right. So, everything is live, everything is up and running in a fraction of a second. Now, if I'm going to hit this URL.

01:40:10.000 --> 01:40:16.000
The URL which I'm able to see. So, okay, that's cool. Now, slash, if I have to use a Swagger UI.

01:40:16.000 --> 01:40:21.000
Because the fast API, right? So DOCS, the way we were doing it in a local.

01:40:21.000 --> 01:40:25.000
Local host port number. Similarly, I have a URL, which is a global one.

01:40:25.000 --> 01:40:30.000
And, uh, I'm able to get my put and delete on this URL.

01:40:30.000 --> 01:40:34.000
Yeah? Now you guys can even try this out. My URL, because now it's global.

01:40:34.000 --> 01:40:46.000
Because on cloud now. Doing it first time, this is excellent, I'm 100% sure I will be learning a lot of things in ex- a lot. I mean, like, we have not even started properly.

01:40:46.000 --> 01:40:53.000
Believe me, I'm still, like, trying to give our classes where we are building a base.

01:40:53.000 --> 01:41:03.000
Yes? So now my entire backend, this is called as backend deployment, there is no UI, right? So basically, we have deployed our APIs. Now, anyone can consume this API.

01:41:03.000 --> 01:41:17.000
I can test this API in any way I want. From a postman, from this Swagger UI, from the curl command. Anyone can call your this… this is the API, guys. This is the API.

01:41:17.000 --> 01:41:30.000
Right? The live API we are able to see. And we know the route, right? So let's suppose if I have to access maybe a update user, right, we know the route, this is the route, so this URL.

01:41:30.000 --> 01:41:35.000
This URL slash userDb slash data slash v1 slash update pass the user ID.

01:41:35.000 --> 01:41:44.000
Done, right? If I have to delete something. Do the same thing. If I have to perform some sort of a GET or POST operation that we have done yesterday.

01:41:44.000 --> 01:41:57.000
Do it, because now we understand what is a route. Right? Now they understand what is the route, how we can try to pass the data, uh, like, how… what is the meaning of a body, how… what is the meaning of passing a data through a URL. Now we understand all of these things, and that, too.

01:41:57.000 --> 01:42:03.000
Now, my API is global.

01:42:03.000 --> 01:42:09.000
Simple application hosted in cloud. Yeah, so whatever is running on my local system, now it's live, that's it.

01:42:09.000 --> 01:42:17.000
Nothing much? Yes, everyone?

01:42:17.000 --> 01:42:26.000
I can see that it has changed to HTTPS. Yeah, so now it's live and global and public, right? So now it become HTTPS secured one.

01:42:26.000 --> 01:42:36.000
Yeah, so are we… are we able to do it, guys? How many of you are able to do it? How many of you are able to see your Swagger UI live?

01:42:36.000 --> 01:42:42.000
And you all are able to get the URL. Now, let me enable a chat to everyone.

01:42:42.000 --> 01:42:52.000
Working for me, done, I'm done, okay, fine. Uvcon command, or UVI, C-O-R-N command not found. So maybe you have not done a…

01:42:52.000 --> 01:43:02.000
Like, uh, kept Uicon here. Maybe you are not keeping UVicon inside your requirement.txt, so it will not be able to find out, because it was not able to install.

01:43:02.000 --> 01:43:05.000
Okay, so for most of you working, could not open the requirement files.

01:43:05.000 --> 01:43:14.000
There are no such 5 directory, REQUIREME NTS dot TXD. Yeah, so if you don't have a file, then that's an error. So try to push that particular file.

01:43:14.000 --> 01:43:25.000
Try to push a requirement.txt. Can't we use a reload option on render? See, what is the meaning of reload option? First of all, tell me.

01:43:25.000 --> 01:43:33.000
The meaning of load option was very simple, that whenever you are… let's suppose you have already executed a UBCON command, means your API is up and running. Now, in between, you are making some changes.

01:43:33.000 --> 01:43:39.000
So whenever you will do CTRL-S, it will try to refresh the entire API, so that new changes, it will be able to adopt.

01:43:39.000 --> 01:43:45.000
In a cloud, it's not required. In a cloud, so, if you're going to push some code, so basically we go ahead with the.

01:43:45.000 --> 01:43:56.000
Restart service, or deploy the latest commit. This option we have, right? Deploy a latest commit. And yeah, I can see all the hits, so, like, so many people are trying to hit my API, and I can see all the hits over here.

01:43:56.000 --> 01:44:01.000
So many people, see? 200, 200, 200, 200, 200.

01:44:01.000 --> 01:44:13.000
So we are, we are able to get the hits.

01:44:13.000 --> 01:44:20.000
It's live now, sir, yes. Amazing.

01:44:20.000 --> 01:44:37.000
If you can show one more time connecting render to a GitHub, it's, again, nothing, so click on New, click on Web Services, right, and then here, if you're connecting for the very first time, so it is, it is going to give you an, uh, like, a link over here, right? So, let's suppose, uh, this is the one, right? So, this one.

01:44:37.000 --> 01:44:48.000
So, just click over there. It'll try to pop up the window to give you the authorization, give the authorization, done. Only this much. Two clicks.

01:44:48.000 --> 01:44:59.000
Can we neglect NGRock with this approach? See, ngrock is basically a port forwarding solution. So, if something is working in your local, still it's in local, right? It's still local. Once your system will go off.

01:44:59.000 --> 01:45:02.000
Let's suppose if you are going to shut down your system.

01:45:02.000 --> 01:45:10.000
It will be off. But now this is a cloud. It will keep on running, up and running, even if I'm going to shut down my system.

01:45:10.000 --> 01:45:16.000
My APIs now will be up and running, even if I'm going to shut down my system, because now there is no dependencies.

01:45:16.000 --> 01:45:23.000
There is no linkage with my local system. Whereas in case of NGRock, if you're going to shut down your laptop.

01:45:23.000 --> 01:45:31.000
It's gone. So that was our testing solution, by the way. So where you can try to, you know, do a port forwarding, means.

01:45:31.000 --> 01:45:37.000
Whatever is running in your particular port, you are just exposing it to the outer world.

01:45:37.000 --> 01:45:40.000
So that was not a deployment solution, that was a port-forwarding solution.

01:45:40.000 --> 01:45:46.000
Which generally we use at the time of testing.

01:45:46.000 --> 01:46:01.000
Now, get and post user in this file. What is the package file is necessarily? No, not necessary.

01:46:01.000 --> 01:46:07.000
Fine, guys, done.

01:46:07.000 --> 01:46:16.000
Can you teach us Docker also? Yeah, I will… I will be, like, doing… I'll be converting some of the application into a Docker, and then I'll show you how to deploy the Docker.

01:46:16.000 --> 01:46:18.000
I have already done that. If you'll go and check my other lecture, right?

01:46:18.000 --> 01:46:25.000
Uh, whatever you're asking, it's already done. All those lectures are already available, but yeah, even in your class, it's just the live classes will be done.

01:46:25.000 --> 01:46:33.000
Fine. So now, successfully, guys, successfully, we are able to deploy our application on.

01:46:33.000 --> 01:46:41.000
Render. Although it was a very small one, just API. But I believe we are able to get some sort of a confidence, right guys?

01:46:41.000 --> 01:46:46.000
So GitHub, render. Local API testing, meaning of APIs.

01:46:46.000 --> 01:46:55.000
Put, get, post, delete. You know?

01:46:55.000 --> 01:47:20.000
So, now, at least we are, like, familiar with a couple of things, right? Will render also having a database hosting connected with API access, so render will not give you a direct database, like, options, by the way, so you have to… like, uh, go ahead with some external database and connect it inside the code.

01:47:20.000 --> 01:47:24.000
This platform is great, also support our auto-deploy without configuring, yeah.

01:47:24.000 --> 01:47:33.000
Now, most of the platforms, deployment-wise, it's, like, almost same. Like, they are giving you, uh, best possible services, where within 2-3 clicks, you will be able to do the deployment.

01:47:33.000 --> 01:47:43.000
And then whenever you're going to make changes into a code, it will call the auto-deployment, right? It will try to call the auto-deployment. So most of the platforms are like that nowadays.

01:47:43.000 --> 01:47:59.000
So it's not difficult, basically. It's just a one-time game, so if you're able to do it once, in one platform, you will be able to do it again and again and again.

01:47:59.000 --> 01:48:09.000
Okay, so, uh, now, this part is done, and our API is live, and you can test the API, use curl, use Postman, use URL, use Python.

01:48:09.000 --> 01:48:16.000
Whatever you want, just use it, right? So we know that testing now, and we understand all of these things. We understand the fundamentals.

01:48:16.000 --> 01:48:23.000
Now, coming to the next part, guys. So, as we are able to do a deployment, closing this entire thing.

01:48:23.000 --> 01:48:32.000
Right? Closing this entire thing, and now… Let's come to… you're on, yeah? Now come to Yuri API.

01:48:32.000 --> 01:48:40.000
So now we understand the meaning of APIs. So, hopefully, you all will be able to understand that how Yuri API is going to work.

01:48:40.000 --> 01:48:45.000
So, let me give you a complete introduction about the Yuri API. So, see.

01:48:45.000 --> 01:48:50.000
Uh, we have a chat solution, right? We have a chat solution, Yuri.

01:48:50.000 --> 01:48:55.000
So, which is same as your… any other chat solution in a market.

01:48:55.000 --> 01:48:59.000
Where you can ask a question, it will be able to give you the answer. You will be able to even upload images.

01:48:59.000 --> 01:49:10.000
You will be even upload a speech over here. You can do even a real-time web search, so just click over here, select it, and then real-time web search. You will be even able to execute a code.

01:49:10.000 --> 01:49:17.000
A basic one, basically, so you don't have to copy and paste into some IDs. Here, itself, you will be able to execute the code.

01:49:17.000 --> 01:49:30.000
You will be able to upload any kind of files or even screenshot directly from here itself, Capture option. So, we have given you all those options, and you will be able to even share. So, let's suppose you are doing some research, and.

01:49:30.000 --> 01:49:39.000
You would like to share this entire page. Let's suppose I have done this research, like, something like that, and I would like to basically, like, share this entire information. So I have this share option as well. So, without login.

01:49:39.000 --> 01:49:45.000
People will be able to copy this link, and people will be able to.

01:49:45.000 --> 01:50:03.000
Like, share it with everyone, right? And recently, GPT-5 model has been released, which I say it's an umbrella model, so we have attached GPT-5 as well. I still like 4 and 4.0 and 4.1, uh, because it's just an umbrella model, so it is trying to make a decision automatically that which.

01:50:03.000 --> 01:50:21.000
And, yeah, the best part is that it is trying to do some sort of a research before it, but… I believe it's, like, a combination of previous model. It's not a new one that they have trained, but yeah, that's a claim that they're trying to make, so let's not get into that discussion. So, here you will be able to share. So, this is basically a URI system, which has been given to you, so that.

01:50:21.000 --> 01:50:34.000
It will be able to fulfill a need of AI, because some platform is giving you free, some platform is going to give you a charges, some is charging $20, this, that, blah blah, right? And user gets confused.

01:50:34.000 --> 01:50:38.000
We have created a unified platform, one place, access whatever you want.

01:50:38.000 --> 01:50:47.000
Right? Whatever you want. You are looking for Google's, like, deep search, do it. You are looking for real-time web search? Do it. You are looking for image generation? Do it.

01:50:47.000 --> 01:50:53.000
Code interpretation, do it, right? In the exact same way. You're looking for everything, everything will be done.

01:50:53.000 --> 01:50:59.000
So this is where Yuri comes into a picture, where we have basically hosted some of the model on our own.

01:50:59.000 --> 01:51:06.000
And we are using some of the proprietary API. For example, GPTs, right? 5 and 4.0.

01:51:06.000 --> 01:51:10.000
4 Series and 5 Series. So basically, this is a proprietary model.

01:51:10.000 --> 01:51:26.000
Now, we can't access our model directly, we have to access through an API. So, we have integrated through an API. Whereas this Llama, DeepSeek, right, these are the open source model, weights are already available. On Hugging Face, weights are available on Ullama, weights are already available.

01:51:26.000 --> 01:51:39.000
So, those models we have deployed on our instances, and then we are hitting our… whenever you are going to select Llama, or maybe some other, so it is hitting our instances where we have deployed.

01:51:39.000 --> 01:51:46.000
Right? Where we have deployed. Now, if you would like to know more about this deployment and how it is going to happen.

01:51:46.000 --> 01:51:52.000
So, I don't know whether you have gone through those videos or not, so I have published those videos in your group yesterday itself.

01:51:52.000 --> 01:52:14.000
And, uh, even Dave Forrester days, right? So, where I have shown you that how you will be able to deploy the model. It's always a very simple approach, you know, very simplistic way, I have, like, shown that. And Dave Forrester days, so I have basically, like, even shown you that how you will be able to deploy this kind of a UI. So, if you're interested, go with that, but yeah, I'm just trying to talk you, talk about the…

01:52:14.000 --> 01:52:19.000
Behind-the-scenes mechanism, that how these things are all actually working, right, in a layman way.

01:52:19.000 --> 01:52:28.000
No. So this is one part, right? Where you will be able to come and you will be able to chat. The another part inside Euron is our API ecosystem. Now.

01:52:28.000 --> 01:52:36.000
So, from next class onwards, without this API, you will not be able to build even a single system in generative AI.

01:52:36.000 --> 01:52:44.000
Generate EVI simply means that you need an access of LLMs. Doesn't matter if you are learning here, you are learning somewhere else.

01:52:44.000 --> 01:53:05.000
Doesn't matter at all. You need an API access, right? You need an API access. Now, to get those API access, because sometimes you need OpenAI access, sometimes you need Gemini, sometimes you need a Llama, sometimes you need for API access for embedding, sometimes you need API access for image generation, sometimes you need API access for a text-to-speech.

01:53:05.000 --> 01:53:10.000
There are a lot, right? There are a lot, and there are different, different kind of a use cases into a generative AI.

01:53:10.000 --> 01:53:19.000
And without LLM, not even a single, believe me, not even a single application, not even a smallest one, you will be able to build in a generative AI.

01:53:19.000 --> 01:53:24.000
Without a LLM access, because generative guy is all about LLMs, actually.

01:53:24.000 --> 01:53:36.000
Right? All about LLMs. So this is… and, like, students used to go here, used to go there, some APIs are free, some of them are giving you a little bit of free credit, and then you have to, like, go for the payment.

01:53:36.000 --> 01:53:45.000
Now, here, we have created this entire ecosystem where everything is sorted. Everything is sorted means literally everything is sorted. Now, what is sorted? Let me talk about that.

01:53:45.000 --> 01:53:55.000
You are looking for some API from OpenAI, right? A different, different model, even 5, GPT-5, latest one, which was released just 2 days, 2 days back, right? You have an access.

01:53:55.000 --> 01:54:04.000
Oss 20 billion, OSS 120 billion. Which was open sourced recently, right? So, even that is available embedding, that is available.

01:54:04.000 --> 01:54:11.000
So from OpenAI, it's available. From Google, it's available. You have an access of real-time web search model as well, inside of Google.

01:54:11.000 --> 01:54:16.000
Right? Real-time web search model as well. Gemini embedding model as well. Now.

01:54:16.000 --> 01:54:20.000
So, if you're looking for some APIs accessed from a meta.

01:54:20.000 --> 01:54:25.000
Llama series, that is also available, right? Llama series, from a deep-seq.

01:54:25.000 --> 01:54:39.000
Chinese model, that is also available. Alibaba, this is also a Quinn model available. Mistral, this is also available. So, all famous ones, all famous ones. Black Forest Lab, basically, this has been used for a, like, a generating.

01:54:39.000 --> 01:54:45.000
Images, so this is available at play.ai for, like, a TTS, text-to-speech.

01:54:45.000 --> 01:54:59.000
So this is also available. So, all of these models, which you need for sure, and without that, you will not be able to do any kind of application in a generative AI, not even the smallest one.

01:54:59.000 --> 01:55:08.000
It's already available, and it's already sorted for all of you, so that you will be able to build any kind of MVPs, you will be able to build any kind of POCs, and any kind of a product.

01:55:08.000 --> 01:55:14.000
And then you can deploy it, because all of these are live for 24x7.

01:55:14.000 --> 01:55:20.000
Right? So, going for… so all of these model series, we are going to use it, one by one, one by one, one by one.

01:55:20.000 --> 01:55:30.000
Right? But to use it. You need an access. So now we understand API, right? Now we understand API. Now, whatever API that we have created.

01:55:30.000 --> 01:55:34.000
So, we were having just an endpoint, right? Ender point. So, some URL.

01:55:34.000 --> 01:55:39.000
By which I will be able to access. Here to access your model, you have to give an API key.

01:55:39.000 --> 01:55:50.000
Means to access model, you are accessing model means what? So let's suppose I had a model. I have kept it on my platform, and there is a function I have created.

01:55:50.000 --> 01:56:01.000
So, whenever you are hitting my model, you are trying to pass some values, right, that give me this data, give me that data, tell me about data science, something like this, right? When you're trying to pass as a data, as an input.

01:56:01.000 --> 01:56:11.000
So, this is going to get into my function. My function is trying to give an input into a model. Now, my function is trying to give a return, and that return you will be able to see.

01:56:11.000 --> 01:56:18.000
I believe that's a core philosophy behind API. Right, everyone? That's a core philosophy behind API, right?

01:56:18.000 --> 01:56:21.000
This is something that we have… we are discussing since yesterday's class.

01:56:21.000 --> 01:56:40.000
Now, that you will give the input. A payments what? So, there is some function sitting on some server or some machine. You will give an input, it will try to execute that function, and eventually that function is doing what? That function is trying to load a model. If you're trying to call, maybe, an OpenAI model, maybe a Mistral model, maybe a Lama model.

01:56:40.000 --> 01:56:50.000
So that function is trying to basically put that data. Uh, into that model, model is giving me response, right? So, function will give a return, and that return, as a user, I will be able to see.

01:56:50.000 --> 01:56:56.000
That's a core philosophy, that's a whole idea. Now, to access that function.

01:56:56.000 --> 01:57:02.000
You'll need an API key, because we have, like, a secured it, right? We have… without authorization, you will not be able to access it. How to create an API key?

01:57:02.000 --> 01:57:10.000
So, it's very simple, just one click, fraction of a second, you will be able to create a API key over here, just like any other international platform, right?

01:57:10.000 --> 01:57:21.000
On single API key, only one API key you need. And you will be able to access all the series of models. So it's not like you have to come and create an API again and again and again. You can create multiple, that's okay, right?

01:57:21.000 --> 01:57:30.000
But only one. So, click a Create an API key, give any kind of a name, XYZ, right? And this API key will be created, you can copy it, and now you can use it.

01:57:30.000 --> 01:57:34.000
And this API key, you will be able to use it for all the model.

01:57:34.000 --> 01:57:39.000
Right? This API key, you will be able to use for all the models. You can even delete it, right?

01:57:39.000 --> 01:58:01.000
Now, so let's suppose. Here, I have given you one example, right? Here we have given you one example. A curl, now we all understand curl, we can try to use the same thing even in a… like a postman, right? So, this is, let's suppose, a curl which is given to me. Now, what is the meaning of this curl? Let me explain it to you. Yesterday, I think I have explained, but let me explain it to you once again.

01:58:01.000 --> 01:58:12.000
So, what is the meaning of this curl? So, curl… means command to execute some URL, post, so we understand the post method, basically. So, basically, method is basically POST.

01:58:12.000 --> 01:58:21.000
And we are trying to hit this URL. Hit this URL means what? At this place, my function is available.

01:58:21.000 --> 01:58:34.000
This is the meaning of this URL, right? And this function that you are trying to execute, it needs a header. It needs a header. What kind of a header? So, inside a header, you have to pass your API key. So, you have to replace this.

01:58:34.000 --> 01:58:39.000
With the ape, sorry, my bad. So, you have to basically replace this.

01:58:39.000 --> 01:58:44.000
With the API key that you have created. So, this API key that you have created.

01:58:44.000 --> 01:58:49.000
Because it's an authorization. So, here you have to replace this particular part with this one.

01:58:49.000 --> 01:58:55.000
Fine? You have to replace this one with this one. And then, hyphen D, hyphen D means what?

01:58:55.000 --> 01:59:00.000
You are calling a POST request. So, you are sending a data as a body.

01:59:00.000 --> 01:59:04.000
What data you are trying to send, what input you are trying to send into your function. So this is the input that you are sending into a function.

01:59:04.000 --> 01:59:10.000
So you are sending, basically, two things, two parameters. One is a message, another one is a model.

01:59:10.000 --> 01:59:18.000
That, okay, so this is the message, right, and this is the model. So, this model, you are supposed to hit.

01:59:18.000 --> 01:59:29.000
So this is technically a model ID. Now, here, so if I would like to use some other model ID, I will be able to use it. I'll show it to you. So, GPT-5 runner 2045, this is the recent model.

01:59:29.000 --> 01:59:37.000
So just call it, and then, just like we do a curl light, command prompt, let's try to open up the command prompt.

01:59:37.000 --> 01:59:46.000
And from a command prompt, let's hit it. And let's see… Yeah. So, see, I'm able to get some output, right?

01:59:46.000 --> 01:59:53.000
I'm able to see… get some output, so content was hello, and it has given me some response, so message roll, assistance, this content.

01:59:53.000 --> 02:00:02.000
And it is, uh, giving me higher there's knowledge, so something like this, right? So, it is, it is telling me hi there.

02:00:02.000 --> 02:00:11.000
So I'm able to get the response, right? I'm able to get the response. Now, if I'm going to change my content, I'm going to say that, tell me about, uh, Gen AI.

02:00:11.000 --> 02:00:21.000
Fine, Ctrl-C. And then, hit again. It will be able to hit my model, and then it will be able to give me the response.

02:00:21.000 --> 02:00:34.000
Okay? So, here I'm able to… Rural assistance, content, content is equal to blank, finish reason, length, okay, user's prompt token. So, it is not able to give me any kind of a.

02:00:34.000 --> 02:00:41.000
Content, by the way.

02:00:41.000 --> 02:00:54.000
Yeah, content is blank, it is showing me. Now, let me replace this model with some other model. So… This is… 4.1, let me replace this.

02:00:54.000 --> 02:00:58.000
With OpenAI. Maybe?

02:00:58.000 --> 02:01:09.000
4.1 nanomodel. So, with this GPT-4.1 hyphen nanomodel.

02:01:09.000 --> 02:01:12.000
4.1. Nano?

02:01:12.000 --> 02:01:26.000
So this is the model ID. So now I'm hitting this model, basically, right?

02:01:26.000 --> 02:01:34.000
And again, same question, tell me about Gen AI. Now it is able to generate some sort of a long context, right? Long output it is able to generate, and this is called as inferencing.

02:01:34.000 --> 02:01:48.000
Right? So here, message role assistance content. Now, content-wise, it is giving me this one. Certainly, generative AI refers to a subset of the artificial intelligence focused on creating a new content, such as text, images, audio, video.

02:01:48.000 --> 02:01:54.000
So it is giving me a very, very long, like, information about this entire thing, like, about these entire things. It is able to give it to me.

02:01:54.000 --> 02:02:05.000
And, uh, this is called as inferencing. When you send some data, when you ask some question, right, and when model is going to give you a response, so that part is called as inferencing.

02:02:05.000 --> 02:02:16.000
So we are able to inference with one of my model. Now, let's suppose if I have to do an inferencing with respect to other models, right, I can do it. Now, so here we have a category of the model.

02:02:16.000 --> 02:02:22.000
For example, now, so API key is fine, we are able to create. Now, come to the users part.

02:02:22.000 --> 02:02:31.000
So, whatever model you are hitting, and whatever token it is going to consume, you will be able to track that particular part. Model statistics.

02:02:31.000 --> 02:02:38.000
You will be able to track. So, which model you are trying to hit, and if you are going to receive some error, so you will be able to track your error as well.

02:02:38.000 --> 02:02:46.000
Right? Logs-wise, so you will be able to see that, okay, fine, so I have just now, recently, I have hit, like, a 4.1. Before that, I was hitting this model.

02:02:46.000 --> 02:02:55.000
This model 2 times, right? Everything, just like any other international platform, you will be able to see it. And this was the content which was returned.

02:02:55.000 --> 02:02:59.000
Right? This was a response which was returned, so you will be able to see your response as well, that what was the response you have received.

02:02:59.000 --> 02:03:09.000
Before that, the content was empty, so yes, it's empty. So everything you will be able to track, everything you will be able to log.

02:03:09.000 --> 02:03:15.000
Just like anything, right? Just like a true API. Now, we have given you an endpoint.

02:03:15.000 --> 02:03:28.000
Now come to the endpoint. Let's suppose I would like to generate the image, right? I would like to generate the image, yeah? So, to generate the image, we have given you another URL. See, we have given you multiple endpoints. Chat completion.

02:03:28.000 --> 02:03:36.000
So now we understand the endpoint, by the way. We all understand what is the actual meaning of the endpoint. So, whenever you are going to call this endpoint.

02:03:36.000 --> 02:03:43.000
Chad completion function will be called. Whenever you're going to call embedding endpoint. So, embedding function will be called.

02:03:43.000 --> 02:03:48.000
I believe we all understand this part, right guys? Meaning of endpoint?

02:03:48.000 --> 02:03:56.000
You know? So when I'm going to call. Basically, this, uh, chat completion.

02:03:56.000 --> 02:04:01.000
We know that a function which is going to, like, give me chart completion, that will be called.

02:04:01.000 --> 02:04:06.000
Embedding? So, embedding function will be called. Audio-to-speech, that will be called.

02:04:06.000 --> 02:04:15.000
Imagination, that will be called. So now we understand, we all understand the endpoint, the meaning of endpoint. So now these lines are not, uh, alien to me.

02:04:15.000 --> 02:04:21.000
Right? We all understand this entire thing, that, okay, fine, so what… will happen in our backend.

02:04:21.000 --> 02:04:31.000
So now it's not like a black box for any one of us, by the way. Okay, that's cool. Uh, now… So, let me show you how to generate an image through an API.

02:04:31.000 --> 02:04:45.000
Through a chat, you can do it, but through an API. So, let's suppose this is my image generation endpoint. Curl is given to me, right? I can convert this curl in any language code. I think I have already shown you yesterday, so just copy it, and then, like, uh, you know.

02:04:45.000 --> 02:04:51.000
Try to say that, okay, give me the Python equivalent, it will be able to give the Python equivalent. Now, here.

02:04:51.000 --> 02:04:57.000
Right? So here, this is my curl. Now, let me attach an API key.

02:04:57.000 --> 02:05:04.000
Alright, so API token, I have to attach. So maybe I can go to Yuri API?

02:05:04.000 --> 02:05:12.000
Api keys, create a new one, anything. And copy it. So…

02:05:12.000 --> 02:05:16.000
Here, your API token, I just have to replace this one.

02:05:16.000 --> 02:05:31.000
And the point is already given, and then data. What data I'm sending to generate this image? A prompt. A beautiful sunset over a mountain. This is the prompt. Maybe I can try to, like, send something innovative, that's completely fine.

02:05:31.000 --> 02:05:39.000
If you want, right? And, uh, model, so Black Forest, this model I'm going to use. This model is already available. So, this model, I'm going to use it.

02:05:39.000 --> 02:05:46.000
And, uh, number of image is equal to 2. Size, you can try to manipulate. If you want an image with a different size, you can do it.

02:05:46.000 --> 02:05:54.000
Quality Standard or HD. Again, you can try to change. The smallest format in a URL, or if you want, it will try to give you even…

02:05:54.000 --> 02:06:00.000
As a downloadable format, StyleVivid. Now, just copy it.

02:06:00.000 --> 02:06:08.000
And uh… do the curl. Clear my screen, do the curl. Hit enter.

02:06:08.000 --> 02:06:21.000
And wait for some time, yeah? So wait for some time. So this is the URL it is able to return, guys. This is the URL it is able to return, yeah? So this function is returning the URL. Now, if you will go and check this URL.

02:06:21.000 --> 02:06:27.000
Now, if you will go and check this URL. That what is there at this URL?

02:06:27.000 --> 02:06:37.000
This is my image which has been generated, right? Now, my prompt was what? My prompt was, a beautiful sunset over a mountain. Let's suppose if I'm going to change my…

02:06:37.000 --> 02:06:43.000
Prompt. Uh… Picture of Elon.

02:06:43.000 --> 02:06:51.000
Musk… playing… guitar. Ctrl-c.

02:06:51.000 --> 02:06:55.000
I just have changed my plawn. Picture of Elon Musk playing guitar.

02:06:55.000 --> 02:07:04.000
Now, this is the new URL I have received, so if I'll go and check…

02:07:04.000 --> 02:07:10.000
Image it is able to generate. So whatever it was able to understand as an Elon Musk, it is able to generate the image, right?

02:07:10.000 --> 02:07:20.000
So, this is how, like, uh… things is working. I can, like, give us some text, and then I can try to get something in terms of a speech.

02:07:20.000 --> 02:07:34.000
Right? In a multiple language, with a multiple person's voice. All of these things are happening with the help of my LLM model. Chat completion, yes, I'm able to do a streaming, yes, I will be able to do embedding. Yes, I will be able to do image generation. Yes, I will be able to do.

02:07:34.000 --> 02:07:41.000
Text-to-speech, yes, I will be able to do, and technically, for everything, we have an endpoint.

02:07:41.000 --> 02:07:53.000
Yes? How to download the images? Simple click over here, and then download the images. Otherwise, just, like, call a Python code, which will be able to, like, uh, you know, download the images from this particular URL.

02:07:53.000 --> 02:08:04.000
Simple. Yeah? Now, can you please showcase our text-to-speech? Obviously, I can show you text-to-speech, so let's suppose this is my text-to-speech, right? And this is the curl.

02:08:04.000 --> 02:08:15.000
You can even do a Python code. Right? Now, this is my input, right? And this is my model which I'm going to use, and voice-wise, you can select a multiple voice. So, we have given you a parameter.

02:08:15.000 --> 02:08:30.000
So, voice-wise, these many voices are available, by the way, yeah? And playing its Arabic voice, so Arabic is also available. So, you can choose any of these voice of your choice. We have given you all the options, right? You can try to pass any of this parameter over here.

02:08:30.000 --> 02:08:36.000
Now, let me use my API key. And replace it over here, right?

02:08:36.000 --> 02:08:42.000
And now, let's do a… call. So… Clear?

02:08:42.000 --> 02:08:50.000
Hello, this is the text message, right? Hmm. Uh, 404 model does not exist…

02:08:50.000 --> 02:08:58.000
To play AI… I don't have access, internal code…

02:08:58.000 --> 02:09:07.000
Okay, PlayAI TTS, it's not working. Mm-mm. Let me check, uh, will…

02:09:07.000 --> 02:09:28.000
Last time when I have tested, couple of days back, it was working.

02:09:28.000 --> 02:09:40.000
Play ITTS, let me, uh, check my models. Black Forest Play AI, PlayAI TTS.

02:09:40.000 --> 02:09:49.000
So… this is listed here. Text-to-speech…

02:09:49.000 --> 02:09:55.000
Nothing much I can do, because it is not able to…

02:09:55.000 --> 02:10:02.000
My P-L-A-Y-A-I hyphen TTS. Introduction…

02:10:02.000 --> 02:10:16.000
P-l-a-y-a-i hyphen TDS. So… Maybe the team has kept this model down as of now, because when my last time I was testing it, so it was working, basically. So model was up, maybe.

02:10:16.000 --> 02:10:32.000
Now, it's not up, I'll ask team to make it up, so that you will be able to hit that model, yeah? As of now, I think it's not up.

02:10:32.000 --> 02:10:38.000
Well, no, it's not up. 404. So, model is not up as of now. I'll just ask team to, like, uh…

02:10:38.000 --> 02:10:44.000
Keep it active. This, uh, speech-to-text model, keep it active. So they will do it, and once they will do it.

02:10:44.000 --> 02:10:52.000
You will be able to hit it, and it is going to give you a return. Return was what? So it is going to give you a response as a URL. So, where you will be able to find out MP3.

02:10:52.000 --> 02:11:00.000
As simple as that, right? Just like for a pictures, it is able to give you the URL. In a similar manner, it will be able to give you the URL for a MP3.

02:11:00.000 --> 02:11:05.000
So this is how you will be able to hit any of our model. Now, not just that.

02:11:05.000 --> 02:11:18.000
Right? Not just that. So, see, whenever you are going to use any of this framework, right, whether it's a Lang chain, whether it's a Lama indexes, whether it's a LAN graph, which is already a part of your syllabus.

02:11:18.000 --> 02:11:28.000
Without LLMs, you will not be able to use any of this framework. Every framework requires an access of our LLMs, right? Every framework. Now, what we have done from our side.

02:11:28.000 --> 02:11:33.000
So, we have released app SDKs. So, we have released, basically, SDKs, so if you will go to a PyPi.

02:11:33.000 --> 02:11:40.000
You will be able to find out a Yuri AI SDK, so you just have to do a pip install Uri AI, just like you install anything else, right?

02:11:40.000 --> 02:11:44.000
So you have to install pip install Yuri AI, that's it.

02:11:44.000 --> 02:11:46.000
This is the only thing that you have to do, right?

02:11:46.000 --> 02:11:54.000
And then, whether it's a land graph, langchain, small agent, LAMA indexes, crew AI, directly you will be able to use it.

02:11:54.000 --> 02:12:00.000
And this is something that we are going to use on a regular basis.

02:12:00.000 --> 02:12:11.000
Starting from next-to-next class onwards. Yeah? This is something that we will start using it. So, we have already released the SDK, so that your life will be even way more easier.

02:12:11.000 --> 02:12:15.000
In terms of accessing those LLMs in any other frameworks, because.

02:12:15.000 --> 02:12:28.000
When you try to use any kind of LLM on a framework, you have to make it compatible. Compatible with respect to that framework, and this is where this Yuri AI SDK comes into a picture, which we'll be using a lot in almost all the frameworks, like.

02:12:28.000 --> 02:12:37.000
Starting from a Langchain, Llama Index, Langgraph, AutoGen, Crew AI, everywhere, everywhere we are going to use our Yuri AI.

02:12:37.000 --> 02:12:48.000
Can we create our own SDKs? Yeah, you can create your own SDKs. I have already released one YouTube video, so where I'm showing you that how to create your own PyPy package and how to publish it. So, you can go and you can check that out if you.

02:12:48.000 --> 02:12:56.000
Have to create your own SDKs. Yeah? So I've already shown that step-by-step, all of these parts, that how to create your own package, and how to publish it.

02:12:56.000 --> 02:13:04.000
So that other people will be able to use those SDKs, or other people will be able to use that libraries, because this is something that we have written.

02:13:04.000 --> 02:13:10.000
Uh, so initially, I have written personally the entire part, and then my team has done some sort of a modification into it.

02:13:10.000 --> 02:13:15.000
And now, this is available. For all of us. Just do pip install URI.

02:13:15.000 --> 02:13:22.000
Bingo.

02:13:22.000 --> 02:13:27.000
With one API key, we can access all at the point, yes, all at the point, only one API key.

02:13:27.000 --> 02:13:38.000
You don't have to create, like, an endpoint-wise APIs key. Just one password, and all system will be accessible.

02:13:38.000 --> 02:13:47.000
Can we use Europe or European? You can use anywhere. We don't have any kind of issue. So, we have given you one lakh token limit per day.

02:13:47.000 --> 02:13:53.000
So, you have, let's suppose, one year of access. It simply means that 365 lakh. Now, if you are going to.

02:13:53.000 --> 02:14:00.000
Estimate a cost. Of 365 lakh token.

02:14:00.000 --> 02:14:05.000
With anyone else who is providing. You will be amazed.

02:14:05.000 --> 02:14:18.000
Just do the math. Is Yuri like a Grook? Uh, it's, uh, kind of, you can say, right? But we have, uh, Gruk has not given you this, uh, like, framework integration. They have just given you the end point.

02:14:18.000 --> 02:14:29.000
Uh, or for a particular model. So whatever model you will be able to find out in groups, it's already available, API-wise, right? And even for chat, so we have given you a best-of-best interfacing.

02:14:29.000 --> 02:14:38.000
The… another part is SDKs, compatibility. They are not giving you. We have done that as well.

02:14:38.000 --> 02:14:51.000
How to convert bad quality image into a high-quality image is through the model. So nowadays, we have, like, so many platforms which have a little, maybe try to use a deli, or maybe a Sora, then try to, like, convert it.

02:14:51.000 --> 02:14:59.000
How you are providing these many tokens hit at no price. Uh… We are providing it, we are burning money.

02:14:59.000 --> 02:15:09.000
You can see a lot of money. It's very useful if you make unused token today, carry forward, no, that's option we are not going to give.

02:15:09.000 --> 02:15:27.000
It's not a token bank, basically, right? It's like something that we have created so that my learner, my students, would not go to XYZ platform, attach their card, and then look for the free API, something like that, right? My students should sit peacefully, they should do the experimentation, whatever they want, the way they want.

02:15:27.000 --> 02:15:35.000
And for that, we have created this entire ecosystem. So that there should not be any kind of a bottleneck in terms of creating an app.

02:15:35.000 --> 02:15:43.000
Okay, fine. So, cool. Hope all of you are able to understand the Yuri API. Now we can see that how we can hit the Yuri API, right?

02:15:43.000 --> 02:15:54.000
Uh, EA framework, all of these things, we are going to, like, discuss, so as we will progress, one by one. And so many examples we have already given to you. If you will click on these things, right?

02:15:54.000 --> 02:15:58.000
So, so many things we have already built it for you, so that life will be pretty much easier.

02:15:58.000 --> 02:16:06.000
Right? Liability literally easier, and you can… learn, you know, easiest possible way with fun.

02:16:06.000 --> 02:16:12.000
There you will see the result, and you will be able to build something.

02:16:12.000 --> 02:16:18.000
So now… I'm done with today's class, right?

02:16:18.000 --> 02:16:22.000
And in my next class, right, in my next class, basically.

02:16:22.000 --> 02:16:33.000
Uh, we are going to start a vector database. Basically. So we'll try to understand that why vector database is important.

02:16:33.000 --> 02:16:40.000
Which and all vector database is available in a market? Uh, what vector database I'm going to use for what kind of a use case is.

02:16:40.000 --> 02:16:49.000
How I will be able to do a setup. Plus, for vector database, you need one thing, which is called as embeddings.

02:16:49.000 --> 02:17:08.000
Without embeddings, you will not be able to use a vector database. So, we'll try to teach you that what is the actual meaning of embeddings, what is the mathematics behind a top-case search, for example, a cosine similarity, or Euclidean distances, or Manhattan distances. So what is the meaning of it? How calculation actually happens mathematically?

02:17:08.000 --> 02:17:14.000
Right, and then, in terms of programming, so how these things are going to happen, so that will be the agenda for my.

02:17:14.000 --> 02:17:24.000
Upcoming class, which is going to be the next one, and even over there, we are going to use something called as embedding, this one.

02:17:24.000 --> 02:17:29.000
So, we will try to create the embeddings. Then only we can try to store it inside the.

02:17:29.000 --> 02:17:36.000
Vector database. So, theory practical, each and everything, we'll try to understand, and then we'll try to make it live. Live means?

02:17:36.000 --> 02:17:39.000
Deploy, productionize it. So that will be the agenda for my next class.

02:17:39.000 --> 02:17:47.000
Now, next to next week, right? Next to next week, which is technically a… 23rd, 24th, right?

02:17:47.000 --> 02:18:01.000
So, 23rd, 24th, I'm just giving you an early announcement. 23rd, 24th, I am on leave, so I have a planned, like, uh… I have some different schedule on 23rd, 24th. So, next week, we have a class, agenda is fixed, right? And next to next week.

02:18:01.000 --> 02:18:08.000
I'm on leave, so there will be no class, you guys can plan yourself whatever you want on that Saturday and Sunday night.

02:18:08.000 --> 02:18:23.000
Uh, two weeks before I'm telling you, 15 days before I'm telling you these things, uh, so that you will be able to plan, so that there will not be any kind of a surprise, because I have already planned, uh, something, basically, so I will not be available.

02:18:23.000 --> 02:18:28.000
I will be available on export. So, we will be having holiday on 23rd, 24th, that particular weekend.

02:18:28.000 --> 02:18:33.000
I'll make an announcement in group as well, but yeah, those who have joined the class, just, uh, I'm notifying you.

02:18:33.000 --> 02:18:38.000
So that if you are planning to create some land for you, some, like a, you know, tour or visit or something.

02:18:38.000 --> 02:19:00.000
You can do it. So with that, guys, uh, thank you so much, and if you have any kind of a question, so please be here. Those who is not having any kind of a question, so you can drop off now.

02:19:00.000 --> 02:19:17.000
Yeah? And, uh, one more thing, so by evening, right? By evening, so I'm going to create a homework, so by the time I'm going to upload a recording, I'm going to upload assignments as well for this class. So, whatever I have discussed, so I have to give you a lot of assignments for this entire week.

02:19:17.000 --> 02:19:27.000
So that you all will sit, and you all will be able to solve it, and make sure, guys, that doesn't matter whether you are solving assignment with AI or you're writing a code on your own.

02:19:27.000 --> 02:19:37.000
What I want from your side is to solve it. Touch those assignments, at least, right? Touch those assignments, because I know that if you're going to execute, and if you're able to see the result.

02:19:37.000 --> 02:19:48.000
You will be able to understand, at least maybe a 10-20%. So, by the time I'm going to upload a video recording, technically by evening, right, because that much time it takes to convert a video into MP4 format.

02:19:48.000 --> 02:19:54.000
Along with that, I will be attaching a assignment for this whole week.

02:19:54.000 --> 02:20:00.000
Solve it, discuss it among yourself inside a group, as much as possible.

02:20:00.000 --> 02:20:10.000
And, uh, then come to the class next week on Saturday. And those who are not available about a Python, please make sure that you are spending at least this week.

02:20:10.000 --> 02:20:20.000
Enough amount of time on Core Python. Yep. So… Asayim will be fun, believe me. You will learn a lot.

02:20:20.000 --> 02:20:26.000
You will learn more than, like, things that I'm teaching you in a class. Uh, when you're going to solve my assignments.

02:20:26.000 --> 02:20:35.000
And going forward, challenges. Where I can find the previous segment. In whatever class I'm giving assignment, you will be able to find out in that lecture dashboard.

02:20:35.000 --> 02:20:41.000
Simple. So, everything is structured, everything is uploaded in a lecture dashboard. Just click and get it.

02:20:41.000 --> 02:20:46.000
So, hope you're liking it, guys, yes, everyone? Any complaints?

02:20:46.000 --> 02:20:56.000
Like, no, this class is not going good, I'm not able to understand, I'm like… you should teach in this way, that way, something like this.

02:20:56.000 --> 02:21:03.000
Yeah? Any complaint? Okay, guys, see, it's completely fine, you have a complaint or you don't have a complaint, but…

02:21:03.000 --> 02:21:13.000
Whenever I'm giving assignments, please solve it. Yes? And in my class, always make sure that you are coming with, uh, coming for a hands-on.

02:21:13.000 --> 02:21:19.000
Right? Not just what in the lecture, because I don't like that approach. Like I said, and I will keep on telling you that.

02:21:19.000 --> 02:21:22.000
We are not preparing for the exam. We are preparing for a life.

02:21:22.000 --> 02:21:27.000
Right? So, this practical will help you out a lot, and yes, it's true.

02:21:27.000 --> 02:21:41.000
That, uh, initially, it will be a little bit painful. Because maybe you have not gone through those things so far, you have not gone through that particular track so far, so it's completely fine, but that pain will be gone very, very soon, believe me.

02:21:41.000 --> 02:21:45.000
Within a couple of weeks, it will be gone, and you will be very much comfortable.

02:21:45.000 --> 02:21:52.000
And then you will start enjoying. Then, it will not look like that you are learning something, because I know learning is tough.

02:21:52.000 --> 02:22:04.000
Right? So… My first objective is to remove that bottleneck, where we think that I have to go and learn. No, I don't have to go and learn. I just have to go experiment, uh, build something, and then, like.

02:22:04.000 --> 02:22:10.000
My work is done. And when you will… when you will get into that stage.

02:22:10.000 --> 02:22:21.000
Believe me, you will enjoy. You will not feel like a pressure, you will not feel like a burden, because now you will… at that point of a time, you will start connecting the dots automatically. So I have to put you on that place.

02:22:21.000 --> 02:22:31.000
So that, going forward, you will be able to learn anything and everything on your own. Then you don't need me.

02:22:31.000 --> 02:22:45.000
Yeah, can you split video into two parts, actually teaching one recording part discussion? I mean, like, it's not that tough to, you know, hover till 2 hours and then 2 hours, so why you are expecting me to cut this video into two parts?

02:22:45.000 --> 02:22:52.000
Doesn't make sense, right? One video, you know that for 2 hours, I have discussed a core topic. For last two hours, I have discussed, basically, like, uh, doubts.

02:22:52.000 --> 02:22:59.000
Just watch till 2 hours. No one is stopping you, right?

02:22:59.000 --> 02:23:07.000
Yeah. I mean, like, these are the unnecessary expectations, guys, and uh… for sure, I will not be able to fulfill.

02:23:07.000 --> 02:23:12.000
Even I want… even if I wanted to. Because this is unnecessary, right? Unnecessary bottleneck, hurdles.

02:23:12.000 --> 02:23:20.000
All those things. So, yeah. So, fine, guys, thank you so much. Those who's having a doubts, please be here. Those who is not having a doubt, thank you so much. We are done with today's class.

02:23:20.000 --> 02:23:28.000
Uh, by evening, assignments will be available. Late evening, you can say, like, today is Sunday, so even I have some work to do.

02:23:28.000 --> 02:23:34.000
Uh, so I'll upload assignments by late, late evening, yeah? And you have, like, whole week of time to solve those assignments.

02:23:34.000 --> 02:23:46.000
And to discuss inside your groups. Uh, so with that. Uh, thank you so much, guys. See you in the next class. Those who is not having a doubt, those who is having a doubt, be here.

02:23:46.000 --> 02:23:52.000
Yeah, so now, guys, uh… I'm lowering your hands.

02:23:52.000 --> 02:24:00.000
So let me take a break for 2-3 minutes, yeah? Shall we take a break? 2-3 minutes break?

02:24:00.000 --> 02:24:06.000
Okay, fine, I'm going on break, just, like. 2 minutes, so it's 11.023, so…

02:24:06.000 --> 02:24:14.000
20 by 11 or 27, I will be back. And then, uh, raise your hand, and those who would like to share their screen, those who are facing any kind of issues.

02:24:14.000 --> 02:24:44.000
Uh, with, you know, any kind of a command, code, whatever. So, just keep your screen ready. You can share your screen, and then we'll start solving your… Uh, issues in your system.

02:30:17.000 --> 02:30:29.000
Okay, fine everyone, so I think we are back, uh… So, I can see some hands. And guys, those who would like to share their screen, right? So please ping me in our chat, so I would like to share the screen, so I'll just…

02:30:29.000 --> 02:30:33.000
I'll move you to the panelists, by the way. Yeah?

02:30:33.000 --> 02:30:41.000
And then I'll call out the name, one by one. So that, uh, you know, you can… Dog. So, Selvay is saying he would like to share the screen, okay?

02:30:41.000 --> 02:30:47.000
And keep yourself on a mute, guys, understand I'm not calling your name, otherwise I'll keep you on.

02:30:47.000 --> 02:30:52.000
Unmute. So, Silva, okay, fine, you will be joining as a panelist.

02:30:52.000 --> 02:31:07.000
Then, uh, monies, I wanted to share the screen, okay? So… Where is my niece?

02:31:07.000 --> 02:31:15.000
Just a minute, just a minute. I'll call out the name, and then I'm just adding everyone in the panelists, uh, to share their screen.

02:31:15.000 --> 02:31:24.000
Pradeep, any plan to upload the video on a masterclass? I'm doing it, that's going a little bit slow, but yeah, it will be done.

02:31:24.000 --> 02:31:29.000
Want to share the screen. Hemant is saying, fine, so Hemant, join as a panelist.

02:31:29.000 --> 02:31:35.000
Mukesh is saying, would like to share the screen, fine, join as a panelist.

02:31:35.000 --> 02:31:42.000
Mohit, Mohit, where is Mohit? Okay, got it. So, Mohit will be joining, Bharat Dwaj is saying…

02:31:42.000 --> 02:31:49.000
So, find Bharatwaj. And, uh, Raman is saying, uh, Raman, where is Arman?

02:31:49.000 --> 02:31:58.000
Okay, so Arman will be joining as a panelist. Okay. I have one quick question. Just wait, just wait. Yeah, so those who don't want to share their screen.

02:31:58.000 --> 02:32:02.000
Uh, fine, I have just segregated the people, so those who would like to share their screen, and those.

02:32:02.000 --> 02:32:10.000
Would like to chat. So, first of all, let's take a question from a person who would like to just chat.

02:32:10.000 --> 02:32:13.000
Uh, yeah, Ramesh, go ahead.

02:32:13.000 --> 02:32:16.000
Yeah. Uh, I shouldn't share. Thanks for taking session. It is, like, uh, obviously, Claire's a wonderful session today.

02:32:16.000 --> 02:32:19.000
Thank you. I think…

02:32:19.000 --> 02:32:23.000
So I had a couple of questions. When you explain the URI API, uh, you have sought some use cases to extract the, you know, when we pass the question.

02:32:23.000 --> 02:32:28.000
Hmm.

02:32:28.000 --> 02:32:35.000
We can get the response. So, are we able to, uh, retrieve the videos or audio kind of use cases?

02:32:35.000 --> 02:32:38.000
By, uh, by using the URI API. Audio and video extractions.

02:32:38.000 --> 02:32:43.000
Yeah, so audio we have given you. So, basically, TTS, TTS is something that we have given you as an access.

02:32:43.000 --> 02:32:55.000
So text-to-speech, by the way. So that text-to-speech model is going to run you the URL. So, which is not downloadable URL. So, text-to-speech, you can do it, and like I've shown you, you will be able to generate the images. So, text to image.

02:32:55.000 --> 02:33:01.000
So that is, uh, again, model that we have already attached, and endpoint we have given to you, API we have given to you.

02:33:01.000 --> 02:33:06.000
And as I have shown it to you, that, uh, just pass, uh, any kind of a text or any kind of a prompt.

02:33:06.000 --> 02:33:16.000
And eventually, it will be able to generate the images, and from that URL, just like, uh, write a Python code, which will pull the images out of that URL. Simple.

02:33:16.000 --> 02:33:17.000
Okay, it's nice and all you… Yeah, what about the videos? Is there any way to extract the video?

02:33:17.000 --> 02:33:34.000
So that is available now. A video we are not giving as of now, because video is literally, uh, expensive. Very, very expensive one. So for video, maybe you can try to use a Grook. Nowadays, Grook is giving you that option. You can try to use a VO3 from a Google, which has been released recently.

02:33:34.000 --> 02:33:39.000
You can try to use maybe a SORA for that one. You can even try to use a deli.

02:33:39.000 --> 02:33:41.000
So there are many other platforms, yeah, so there are many other platforms which is giving you those options, where you can upload one image, or.

02:33:41.000 --> 02:33:46.000
Delhi, okay.

02:33:46.000 --> 02:34:01.000
You can try to give a prompt, and out of prompt, it will be able to create the videos. And most of the prompts are giving you a very, very limited API access. They will start charging you. Because it's literally an expensive process, very expensive process.

02:34:01.000 --> 02:34:06.000
Okay. Uh, Saran, one more question. We have the 10K token, so you told me that to provide some token.

02:34:06.000 --> 02:34:07.000
No, you don't have 10K, you have 1 lakh. 1 lakh, actually, per day.

02:34:07.000 --> 02:34:15.000
Uh, so what is it? So, one leg token, okay? Is there any possibilities, uh, can we get the token, um…

02:34:15.000 --> 02:34:18.000
Or maybe do we charge, or something, no? The… we get the extra token.

02:34:18.000 --> 02:34:30.000
I'm… I'm… yeah, so I'm planning for that, because I know if you are running some app in a production system, right? So, uh, you need more than one line. Let's suppose you have built some application which you are, like, you know.

02:34:30.000 --> 02:34:39.000
Uh, sharing with multiple users. Maybe a commercial one, right? Commercial one, basically. So, keeping that in our mind, I'm thinking about that plan.

02:34:39.000 --> 02:34:44.000
So, we are doing a lot of, like, a price calculation around it, because we are into EduTech, right?

02:34:44.000 --> 02:34:51.000
That is a completely different domain, where we are selling just a token.

02:34:51.000 --> 02:34:52.000
No.

02:34:52.000 --> 02:35:03.000
I hope you get to my point, right? Yeah, so we are planning that how we can price it out, basically, that, okay, fine, so anyone who would like to, you know, get an access of this entire ecosystem, there is a Euron Plus, right? There is Euron Plus.

02:35:03.000 --> 02:35:19.000
Now, beyond that, let's suppose someone is looking for more token, someone is looking for more Resume AI, someone is looking for more Avani, because as of now, we have given 3, like, uh, uh, interview per month, right? So, more Avani, someone is going to look for more YuriChat and more Yuri API token.

02:35:19.000 --> 02:35:32.000
All of this more, right? So, we are, like, I'm working on the plan, especially on a price calculation side of it, right? That, uh, what should be the ideal price, and in that ideal price, what I will be able to offer. So.

02:35:32.000 --> 02:35:36.000
Maybe in, like, the next couple of months, uh, we will come up with those plans as well.

02:35:36.000 --> 02:35:37.000
But not, not now.

02:35:37.000 --> 02:35:43.000
Yeah, yeah. Okay, it's nice. So, one more final question. So, actually, we have done some use case.

02:35:43.000 --> 02:35:44.000
Uh, by using the vector DB, we know, the RAT techniques only.

02:35:44.000 --> 02:35:47.000
Hmm. Hmm.

02:35:47.000 --> 02:35:52.000
Just another one question. There is a context length over there, and if you increase the context length.

02:35:52.000 --> 02:35:58.000
Uh, which is the better… which is efficient, or if you have the very… less context window.

02:35:58.000 --> 02:36:00.000
Uh, easier the better. Which approach is the better, sir? You can…

02:36:00.000 --> 02:36:07.000
I think the mid-sized context window is always, like, better for most of the use cases.

02:36:07.000 --> 02:36:24.000
For example, so let's suppose if I'm trying to ask a question on maybe some, like, something related to a coding module, right? So in that case, a mid-size or maybe a small-sized context window is completely fine, but let's suppose, let's suppose if I have a Wikipedia kind of a data, Wikipedia kind of a file.

02:36:24.000 --> 02:36:31.000
And, uh, there are, like, a lot of information which is connected with the other information we have.

02:36:31.000 --> 02:36:40.000
So in that case, longer context window, so that whenever we are going to hit a query, it will be able to bring a top-case search, but with a bigger context.

02:36:40.000 --> 02:36:45.000
And that will go inside my LLM, so that I will be able to get a better result without any kind of a hallucination.

02:36:45.000 --> 02:36:46.000
Yeah.

02:36:46.000 --> 02:36:53.000
So it's a case-by-case. So what you're trying to solve, basically. But ideal size, I believe, like, 400, 500, if you are going to keep.

02:36:53.000 --> 02:36:56.000
I think that will be a great starting point, or maybe 1000.

02:36:56.000 --> 02:37:01.000
And what is a good part of the top K? Pi or 10, like, are there any industrial specifics? Top carrier one?

02:37:01.000 --> 02:37:15.000
So, basically, top… top came is top 3, top 2, so whenever you're trying to send a query into the vector database, right? So it will try to take the very first, the closest one, then the second closest one, then the third closest one.

02:37:15.000 --> 02:37:16.000
Mm-hmm.

02:37:16.000 --> 02:37:24.000
Yeah? So basically, these three contexts, if you are going to bring together, so most of the, like, maybe you will be able to achieve 95% accuracy over there, or maybe 90% accuracy over there.

02:37:24.000 --> 02:37:27.000
So that's the reason we always go with the top K.

02:37:27.000 --> 02:37:31.000
Okay, salam, uh, going to use all the three… for example, if we use the top K3.

02:37:31.000 --> 02:37:32.000
That top K will be the context. Llm is going to use it.

02:37:32.000 --> 02:37:37.000
Llm is… Yeah, top… there's…

02:37:37.000 --> 02:37:38.000
Yeah, sugar goods.

02:37:38.000 --> 02:37:46.000
Query… Yeah, so basically… technically, it will be query plus context. So, query will be your original query, or context will be what? That top K.

02:37:46.000 --> 02:37:52.000
Correct. So your LLM is going to aggregate all the top, or written top KLM and will refine it, or… Is it going to replicate?

02:37:52.000 --> 02:38:00.000
When you are creating, yeah, when you are creating the context, by default, all these top K will be aggregated. If you are setting a value of k is equal to 1.

02:38:00.000 --> 02:38:01.000
Means only one, only one… the very first top one.

02:38:01.000 --> 02:38:07.000
One, one, run. But the LLM is going to refer all the things based on the top K and conditional.

02:38:07.000 --> 02:38:17.000
Yes, yes, based on the top game, yes, yes. Okay, next one is Anandrava, please go ahead with your question.

02:38:17.000 --> 02:38:21.000
Yeah, Andravat and Naresh, then Siddharth, one by one, please go ahead, guys.

02:38:21.000 --> 02:38:29.000
Uh, yeah, hi Sudan Shuk. Uh, hope I'm watching. Uh, so, uh… I have some general questions, and two questions related to this class. So, you have mentioned that there are multiple keys that we can use in UDPI.

02:38:29.000 --> 02:38:33.000
Hmm. Hmm.

02:38:33.000 --> 02:38:38.000
So I wanted to understand, uh, why is it required? Because you have mentioned that one key is good enough.

02:38:38.000 --> 02:38:45.000
No, no, no, one key is good enough, but basically, when you are going to create a key, for example, let me share my screen, if I have created a key over here.

02:38:45.000 --> 02:38:58.000
Right. And, uh, created a key, something like this I have created. And then, if you are going to refresh this screen, now you will not be able to copy the key. We are not allowing you to copy the key.

02:38:58.000 --> 02:38:59.000
Okay. So…

02:38:59.000 --> 02:39:07.000
So, basically, we are allowing you, from the security purposes, basically, we are allowing you only copying a key for one time, when you are going to create it.

02:39:07.000 --> 02:39:14.000
Right. So, obviously, now you can't copy the key. Now, which key you are going to use? Let's suppose you have not copied the previous one. Let's suppose you forgot the previous key.

02:39:14.000 --> 02:39:15.000
Right. So now, which key you are supposed to use? So you will have to come and create the new key.

02:39:15.000 --> 02:39:19.000
Got it.

02:39:19.000 --> 02:39:24.000
That's the reason, so we have given you this option. Because this is the standard procedure, as per the security reasons.

02:39:24.000 --> 02:39:33.000
Okay. Uh, so the next question is that, uh. In the post and GET method and all of that.

02:39:33.000 --> 02:39:36.000
So, you are basically returning a statement, like in key-value pairs, right?

02:39:36.000 --> 02:39:44.000
So, uh, which, uh, who is calling and who are returning to? Because usually in the Python classes that we have gone to.

02:39:44.000 --> 02:39:45.000
We are using either the debug statement, or we are printing at different points of time.

02:39:45.000 --> 02:39:50.000
Hmm.

02:39:50.000 --> 02:39:52.000
Uh, to understand how the, uh, flow of logic is going.

02:39:52.000 --> 02:39:56.000
But here, we are returning, you know, in the mention, like.

02:39:56.000 --> 02:40:09.000
Debugging? No, no, no, you are… I think you are doing a apple-to-orange comparison. So, debugging is completely different, so where step-by-step, in which step, what is the variable values, and then in between, so we can try to even feed the variable values.

02:40:09.000 --> 02:40:16.000
And then what will be the value which will go to the next step? This is something that we try to check. So debugging is a different process, right?

02:40:16.000 --> 02:40:21.000
Think as executing a function, not debugging, executing a function. So when you execute a function, what do you do? You try to pass the input.

02:40:21.000 --> 02:40:25.000
If function is taking some input, and then eventually you will be able to get the output.

02:40:25.000 --> 02:40:33.000
Same thing goes with the API. The only difference is that same function, I have… I'm trying to hit it with the help of.

02:40:33.000 --> 02:40:34.000
Rule-based system. Which is called as URL.

02:40:34.000 --> 02:40:43.000
You want it.

02:40:43.000 --> 02:40:44.000
Yeah, I got it. It is technology agnostic, right?

02:40:44.000 --> 02:40:55.000
Basically, I'm trying to make it neutral. I'm trying to make it… this is what I have discussed in my studies class, right? That meaning of API. So… Exactly. Basically, you have, like, a heterogeneous system, so where someone is writing code in some other language, you are using some different platform, I'm using some different platform.

02:40:55.000 --> 02:41:03.000
But, eventually, you will be able to access my code, my function, and you will be able to access your function, and I will be able to access your function.

02:41:03.000 --> 02:41:06.000
Vice versa. If I have exposed something as an API. Simple meaning.

02:41:06.000 --> 02:41:13.000
So, moving forward, all of these APIs are basically, you know, either nested or simple.

02:41:13.000 --> 02:41:15.000
Dictionary key value pairs, right?

02:41:15.000 --> 02:41:25.000
No, not like that. See, technically, it's a function I'm trying to execute. It's not, like, why you're doing a comparison with the dictionary key value pair all the time? Yeah.

02:41:25.000 --> 02:41:38.000
I'm returning key-value pair, maybe, in some of the… some other cases, maybe I will be returning just a text. In some other cases, I'm returning just a table. In some other cases, maybe I'm just trying to store a data into a databases. There can be infinite number of cases, right? Technically, API means.

02:41:38.000 --> 02:41:47.000
I'm able… I'm trying to execute a same function that you are able to execute maybe, like, somewhere in IDEs, but with the help of URL.

02:41:47.000 --> 02:41:49.000
That's the whole meaning.

02:41:49.000 --> 02:41:55.000
Okay. Uh, uh, you are pasting this curl command in PowerShell or in C, normal CMD?

02:41:55.000 --> 02:41:58.000
You can push it in a CMD, you can push it in a PowerCell, anyone, anywhere you want, wherever curl will be accessible.

02:41:58.000 --> 02:42:06.000
Okay, I'll… So, actually, I was facing some problems in CMD. I was thought… I was thinking that you were pasting it PowerShell.

02:42:06.000 --> 02:42:07.000
Uh, to…

02:42:07.000 --> 02:42:12.000
Yeah, so… You can just be… wherever curl is available. Curl is basically a command, it's a library, right? It's a package.

02:42:12.000 --> 02:42:14.000
So, wherever curl is available, it will work. If curl is not available, it will not work.

02:42:14.000 --> 02:42:17.000
So we have to… we have to install a curl labyrinth as well.

02:42:17.000 --> 02:42:20.000
Yeah, you will have to install the kernel, yes. In that case. Yeah.

02:42:20.000 --> 02:42:26.000
Okay, okay, I missed out that point, okay. Uh, see, the major problem that I'm facing right now is that, uh.

02:42:26.000 --> 02:42:31.000
What I understand going forward, uh, right, uh, right now, we are in the fourth class.

02:42:31.000 --> 02:42:32.000
Hmm.

02:42:32.000 --> 02:42:39.000
So, company laptops, I don't think will not be a good, uh, uh… you know, option to go ahead, because moving forward.

02:42:39.000 --> 02:42:43.000
There will be multiple permissions that will be required, and we do not have such access. Some of them are already installed in my system, Okuja approval legit karval yatha.

02:42:43.000 --> 02:42:47.000
Yeah, yeah. Hmm. Mm.

02:42:47.000 --> 02:42:50.000
With those, I'll be… because I was working on some projects.

02:42:50.000 --> 02:42:51.000
And I have built some apps or automations for my own development as well.

02:42:51.000 --> 02:42:54.000
Okay.

02:42:54.000 --> 02:43:07.000
But apart from that, so, can you, uh. You know, give us an idea as to what kind of laptop or desktop, because I am… I'm not moving to… planning to move out of my current city right now.

02:43:07.000 --> 02:43:08.000
So, should we go for laptop, or should we go for desktop configurations? And if you can… suggest anything below 70K, because last time, Apna jub diyata, wo.

02:43:08.000 --> 02:43:19.000
Mm-hmm. Um, if you're…

02:43:19.000 --> 02:43:20.000
Okay, let me, let me…

02:43:20.000 --> 02:43:28.000
I think it was touching on one lakhot 20 penguins. And second part of this question, second part of this question is that, uh, since you have already mentioned a very deep significance of APIs and what most of the.

02:43:28.000 --> 02:43:40.000
Work that we'll be doing is on, um. Deployment, and we are using models that has been rendered somewhere else. So, do we need to have a local GPU, uh, high-capacity GPU?

02:43:40.000 --> 02:44:07.000
No, not at all. So, even the recent video, if you'll follow, if you'll see, so I have used a GPU from some other platforms. I'm not using my local GPU, even though I have a GPU, but practically, even this GPU will not be sufficient, even if I have a 40… 8GB of GPU or 28GB of GPU, RTX series, that is not going to help me out. In terms of, you know, retraining the model, in terms of fine-tuning a model, or even in terms of inferencing the model, existing model.

02:44:07.000 --> 02:44:37.000
So, ideally, it's of no use for me, uh, like, I can just use my system for writing a lightweighted code, even though my system is a bulkier one, like, it's a heavy system that I'm using, but it's still not enough at all for those kind of models, so… I will show you, even in class, I'll show you those examples with those GPU, and in a real time, we are using those GPU, which is available over the cloud. And even if you'll see my video which I published yesterday and day before yesterday, I have shown each and everything in a, like, uh, this one.

02:44:37.000 --> 02:44:45.000
So, a hyperscale cloud, basically. And, like, there is something called a paper space, even on AWS, Azure, GCP, you will be able to get.

02:44:45.000 --> 02:44:54.000
Similar kind of a GPU. So, we'll not be using in our system.

02:44:54.000 --> 02:44:55.000
I will say, go with the i5. Go with the i5 later generation, that will work.

02:44:55.000 --> 02:44:59.000
So, in that case, any recommendations, like, what is the configuration that we should be going out with route? Because GPA is not a…

02:44:59.000 --> 02:45:05.000
Okay, and is there… what is the basic difference between this generation and this i7 and i9?

02:45:05.000 --> 02:45:06.000
So, which should we go for? Generation… higher generation, or higher I5 or i7?

02:45:06.000 --> 02:45:25.000
So, see, the… So, basically, I9 will be the latest. Again, in I9, so you will be able to find out a latest family, maybe a 12 series, 13 series, something like that, right? So basically, this IE5, there is a generation called as i3, then there is a generation called as i5, there is a generation called as i7, there is a generation called as i9.

02:45:25.000 --> 02:45:31.000
All odd numbers, right? Now, inside that generation also, you will be able to find out the series, a 12 series, 13 series.

02:45:31.000 --> 02:45:39.000
So, it's like a worsening. So, we write, like, software worsening, we do it, right? Like, 1.0 point something. Then 2.3 point something.

02:45:39.000 --> 02:45:46.000
So, in a similar manner, this laptop configuration has been, like, worsened. I9 is going to be the latest one.

02:45:46.000 --> 02:45:50.000
And again, you have to check with the latest generation which is running, maybe 12 or 13.

02:45:50.000 --> 02:45:51.000
For the use case of this particular course that you'll be teaching, uh.

02:45:51.000 --> 02:45:55.000
So, I9.

02:45:55.000 --> 02:45:58.000
From the start to the end, what do you suggest that we should go out with?

02:45:58.000 --> 02:46:03.000
I5 to i7 is better. It is going to work, and it is not going to cost you much.

02:46:03.000 --> 02:46:12.000
So maybe, uh, you can get, uh, something like this between, like, 60 to 70K, or 55K to 70K.

02:46:12.000 --> 02:46:14.000
Okay, okay, thanks, thanks.

02:46:14.000 --> 02:46:16.000
Yeah, yeah. Okay, so Nares, please go ahead. Just, just a minute. I'll call out, yeah. Nares, please go ahead.

02:46:16.000 --> 02:46:21.000
Yeah, hi. Uh… Yeah, high students, the class was very good. Thank you so much for that.

02:46:21.000 --> 02:46:24.000
Hi, hi. Thank you. Things, things.

02:46:24.000 --> 02:46:30.000
Uh, yeah, my next question is, uh, see, we are in a generative AI course, right?

02:46:30.000 --> 02:46:31.000
So there are a lot of terms, you know, which are leading to the confusion.

02:46:31.000 --> 02:46:34.000
Mm-hmm. Hmm.

02:46:34.000 --> 02:46:42.000
Like, what is a genetic AI, generative AI? I understood generative AI, we are using some LLM, and we are generating the output.

02:46:42.000 --> 02:46:43.000
Right? So what does it mean by SMTK?

02:46:43.000 --> 02:46:53.000
Hmm, hmm, hmm. Okay, so I'll… I think a lot of, like, syllabus, uh, I have already, like, mentioned that, uh, we are going to create the agents.

02:46:53.000 --> 02:46:59.000
Agentica is nothing but a kind of an intelligent function, as of now. You understand function, right? Function that we write?

02:46:59.000 --> 02:47:00.000
Yes. Yes, yes.

02:47:00.000 --> 02:47:18.000
Inside our programming language. So think in that way, that kind of an intelligent function, which is using your LLMs. Llm is ChatGPT kind of a thing, right? So, which is using your LLMs, and it is able to do some sort of a task automatically without asking you, or within… without even taking your permission. That is something called as agent.

02:47:18.000 --> 02:47:19.000
Okay. Uh, and… Yeah.

02:47:19.000 --> 02:47:28.000
In a layman way. Technically, it's a function. It's actually a function, and I can create an agent with the help of some of the framework which is out there in a market. For example, Langchain.

02:47:28.000 --> 02:47:32.000
Laba index, Langraph, Crew AI, Autogen, or maybe N1N.

02:47:32.000 --> 02:47:40.000
Okay. So, uh, my next question is that only. So, uh, we have, you know, a lot of no-code tools and low-code tools, like you mentioned, NI10.

02:47:40.000 --> 02:47:41.000
And Google is also planning to release Opel, which is in testing phase, I guess.

02:47:41.000 --> 02:47:46.000
Yeah, yeah. Hmm, hmm, hmm.

02:47:46.000 --> 02:47:57.000
Uh, so if these tools come into the picture, like, uh, what is the future of agenetic AI with Python instead of using the tools which is, you know.

02:47:57.000 --> 02:47:59.000
Doing our task way better.

02:47:59.000 --> 02:48:07.000
Okay, I'll try to give you this example. So, see, we had Excel sheets since our decade, right? Since 200 decade, we are using Excel sheet. Uh, in the… inside Excel sheet, we have a formulas and automation we can do.

02:48:07.000 --> 02:48:10.000
Yes, yes. Yeah, yes.

02:48:10.000 --> 02:48:15.000
Right? But we still, we need someone to write those formulas, some expert.

02:48:15.000 --> 02:48:16.000
Got it. Correct, correct.

02:48:16.000 --> 02:48:33.000
Because everyone can't write those formulas, right? Even though those formulas are not a black box, right? It's like a, uh, understand the business use cases, understand the data, write the formula, and maintain it, and then eventually you will be able to see the final report inside Excel sheet. Only Excel sheet I'm talking about, nothing, not very fancy things, right?

02:48:33.000 --> 02:48:36.000
So, similar… this is how I see the future of event agents.

02:48:36.000 --> 02:48:41.000
So, yes, there is a no-code tool, there is a low-code tool, and there is a code-based tool.

02:48:41.000 --> 02:48:42.000
Yeah.

02:48:42.000 --> 02:48:52.000
Right? For example, this chain, Langraph, Llama indexes. So, these are basically a pure code-based tool. If I'll talk about N8N, so it's a low-code or no-code kind of a tool.

02:48:52.000 --> 02:48:53.000
Yes.

02:48:53.000 --> 02:49:01.000
Right? So where you can try to even, like, you know, upload the JSON file, and then it will be able to create the flow, or you can just do a drag-and-drop, drag and drop, drag and drop. All those components, and one by one connected.

02:49:01.000 --> 02:49:05.000
And even anyone will be able to, like, you know, create the workflow.

02:49:05.000 --> 02:49:13.000
No. Just like an Excel sheet, we need an expert who can write the formula, who can understand the data. We need an expert.

02:49:13.000 --> 02:49:18.000
Even in low-code, no-code, and complete code kind of a system.

02:49:18.000 --> 02:49:23.000
So, this is how I see the future. So there is a lot of future. And, uh, yeah, as these agents are, like, you know.

02:49:23.000 --> 02:49:28.000
Becoming a mainstream, I will say, a kind of a tech.

02:49:28.000 --> 02:49:33.000
Front tire for most of the company, or for most of the application.

02:49:33.000 --> 02:49:40.000
So, obviously, demand is growing, and going forward, you will be able to see a lot of things, like, uh, in demand. There, people are, like.

02:49:40.000 --> 02:49:44.000
Getting a very good opportunity, just in terms of agent, so that they can go and automate the work.

02:49:44.000 --> 02:49:46.000
So that, that's my perspective.

02:49:46.000 --> 02:49:55.000
Okay, yeah, understood. My last question is, uh, so in this course.

02:49:55.000 --> 02:49:56.000
Mm, hmm, hmm.

02:49:56.000 --> 02:50:06.000
Uh, I think we are covering fine-tuning the LLMs, right? Uh, so, uh, let's say I, uh, instead of using, uh, 3 billion parameters, 7 billion, there are a lot of weightage, uh, is available in the market, like 70 billion, 30…

02:50:06.000 --> 02:50:07.000
Hmm, hmm. Hmm.

02:50:07.000 --> 02:50:20.000
Uh, let's say for my use case. I just need a small LLM. So, which course do I need to take if I want to build a small LLM? So, which.

02:50:20.000 --> 02:50:21.000
From scratch, from a scratch, or from fine-tuning? From a scratch or from fine-tuning?

02:50:21.000 --> 02:50:26.000
Usually fits with my use case.

02:50:26.000 --> 02:50:30.000
So, you're trying to build a model, but from scratch, you are trying to build a model by doing a… Yeah, you are audible.

02:50:30.000 --> 02:50:36.000
Uh, might be… am I audible? Oh, yes, yes. Might be from, uh, scratch, because…

02:50:36.000 --> 02:50:37.000
Okay. Hmm.

02:50:37.000 --> 02:50:43.000
As the already available models, if you see, right? There are unnecessary languages that are included, uh, mostly.

02:50:43.000 --> 02:50:45.000
Like, German languages, Spanish, so I don't need all these languages, I need only basic English model.

02:50:45.000 --> 02:50:48.000
Hmm. Hmm, hmm, hmm.

02:50:48.000 --> 02:50:50.000
So, I just want to build from the scratch. So, for that, what skills do I need?

02:50:50.000 --> 02:50:59.000
Okay. Okay, so basically, you have to understand our fundamentals, which is a fundamentals of transformer. For example.

02:50:59.000 --> 02:51:07.000
If you will go through this lecture, which I have given, so where I have even shown to build a model from the scratch. So here.

02:51:07.000 --> 02:51:15.000
Generative AI. Uh, generative, generative AI…

02:51:15.000 --> 02:51:22.000
Yeah, uh, this one. So this was also a live class. Now, if you'll go through this, uh, live class lecture. So, here.

02:51:22.000 --> 02:51:43.000
The real transformer and GRU and, uh, various model comparison. Yes, GPT practical from scratch, right? So, this, this lecture, and here I'm teaching, like, building a GPT kind of a model from the scratch, but before that, right? Right before that, so I talked about RNN, I talked about a LSTM, and before that, I talked about vectoring, I talked about, basically, a neural network.

02:51:43.000 --> 02:51:49.000
And then I talked about a transformer. There is a research paper called as Attention is All You Need.

02:51:49.000 --> 02:52:02.000
And basically, that is the mother of all the GPTs or LLMs that you are able to see today. That is the mother, basically. Without understanding that, you will not be able to understand the core transformer. So that is something which I have discussed over here.

02:52:02.000 --> 02:52:08.000
In theory, in practical, all. And then we are trading a model from the scratch, as you can see, this 13th lecture.

02:52:08.000 --> 02:52:16.000
And then, uh, I'm showing even a fine-tuning. So, both approach. So, let's suppose I have, like, trained the model from the scratch, I can do it.

02:52:16.000 --> 02:52:24.000
I have to fine-tune the model, right, in a different, different way for the different, different tasks. Even that, uh, like, things I have even shown, uh, inside this one.

02:52:24.000 --> 02:52:37.000
And even in this lecture, this generative AI that is going on, right? So, I have already mentioned about fine-tuning, and I'll try to even teach you that how to train a model from the scratch. So, if you would like to go ahead with those lectures now.

02:52:37.000 --> 02:52:41.000
It's available. Right, you can go and check that out. It was also a live class.

02:52:41.000 --> 02:52:48.000
And if you have to wait, then wait for your class, and even here, I'm going to talk about it.

02:52:48.000 --> 02:52:58.000
Okay. So, my last question, uh, so this LLMs, right. The generate output a single token at a time. Correct me if I'm not wrong.

02:52:58.000 --> 02:53:03.000
Hmm. Changa by chang, basically. They have a context length, output context length, so let's suppose output context length is this much.

02:53:03.000 --> 02:53:04.000
So, there's so much they will be able to generate, one at a time.

02:53:04.000 --> 02:53:07.000
Okay.

02:53:07.000 --> 02:53:12.000
I read some news, I think, a day before I started, I think.

02:53:12.000 --> 02:53:23.000
So, uh, Apple has come out with, uh, you know, multiple output tokens, something related. If you know anything about that, you can explain, because I didn't understand what they were, uh, talking.

02:53:23.000 --> 02:53:27.000
Multiple output token, anyhow, every model is doing it. Every LLM is doing it, by the way.

02:53:27.000 --> 02:53:35.000
Yeah, yeah, uh, maybe I'll do one thing. I'll search that article and send you in the group, so that you can give the comment.

02:53:35.000 --> 02:53:37.000
Maybe that context, yeah, because context could be different, maybe, like… Yeah, contest could be different, which maybe you are not able to remember, so yeah, just send me that article.

02:53:37.000 --> 02:53:42.000
Sure. Yeah. Sure, sure.

02:53:42.000 --> 02:53:49.000
Right? But I think every model is doing it, so even the model that we are using it, right, by default is doing it.

02:53:49.000 --> 02:53:50.000
That's the reason it's called a multi-headed attention. Multi-head means, anyhow, multiple output I will be able to get.

02:53:50.000 --> 02:53:55.000
Sure. Milk, yeah, uh…

02:53:55.000 --> 02:53:58.000
Yeah, thank you. Okay, next is Siddharth, please go ahead. Yeah, I… Thank you.

02:53:58.000 --> 02:54:04.000
Yeah, hello, Sudangshu. Thank you so much for this great session, and I'm happy that I could, uh.

02:54:04.000 --> 02:54:10.000
You will utilize yesterday's session and… run it successfully on my system. So, my question is, in case of Postman, we can send this, uh.

02:54:10.000 --> 02:54:15.000
Okay, that's great. Hmm.

02:54:15.000 --> 02:54:22.000
Git API through Postman, and also we can directly. We're sitting in the link using, uh… Which one, Mark, is UPL?

02:54:22.000 --> 02:54:23.000
Url, yeah. Hmm.

02:54:23.000 --> 02:54:28.000
Yes, no URL. So, in case a post, I could successfully run it from Postman, but in URL, you cannot do it, isn't it?

02:54:28.000 --> 02:54:38.000
No, you can't do it, basically, because URL means your data is exposed, and POST simply says that, that your data should be secured. Means, whenever I'm sending a data, I should send it as a body.

02:54:38.000 --> 02:54:41.000
Not inside the URL, which should be visible to everyone.

02:54:41.000 --> 02:54:51.000
Okay, and another question is that we use render today to deploy our code, but yesterday we used also Engrock to, uh, deploy our code and create a.

02:54:51.000 --> 02:54:55.000
We have not deployed yesterday. We have not deployed yesterday, so our code was in my system.

02:54:55.000 --> 02:55:02.000
Code was running in my system, so basically it was using my compute, my CPU, my RAM, my disk space.

02:55:02.000 --> 02:55:13.000
I have just done one thing. On whatever port, like, things were running in my system with the help of ngrock, I have exposed that port and made my system as a server, a global server.

02:55:13.000 --> 02:55:27.000
But eventually, it was utilizing my resources, my computation, my RAM. Today, what we have done, so we are not running anything in our local system, we have migrated all the code into a GitHub. Eventually, Render is trying to pull all my code, Render is trying to set up all the system.

02:55:27.000 --> 02:55:44.000
Uh, even when I have switched off my, like, API, if you are going to hit my render API, you will be able to access it, because still it's up and running, and it's independent of my system. So both approaches are different. Ngrock was… this is something which I told you, right? Ngrock has been used for the port forwarding.

02:55:44.000 --> 02:55:55.000
Means, whatever is adding in my port, make it available to the entire world. But… Compute will be mine. If I'm going to switch off that system, if I'm going to switch off that API, it is not going to work. Ngrog is not going to give you any responses.

02:55:55.000 --> 02:56:01.000
In case of render, it's global now, on a cloud, without my computation, without my resources.

02:56:01.000 --> 02:56:07.000
Okay, and for the, uh… render URL that they give, can we modify it, like, using our personal.

02:56:07.000 --> 02:56:13.000
You can do your own mapping, you can do your own mapping, but that is available with a paid plan.

02:56:13.000 --> 02:56:14.000
Thank you, thank you so much.

02:56:14.000 --> 02:56:22.000
So let's suppose you would like to deploy it at Siddharth, at the Siddharth.com or Siddharth.ai. Maybe you have that domain, right, name with you, right? You have purchased that domain.

02:56:22.000 --> 02:56:32.000
You can point your domain, uh, with that. Yep, thanks. Okay, next is Ganesh, please go ahead.

02:56:32.000 --> 02:56:33.000
Saeed? Yeah, Ganesh.

02:56:33.000 --> 02:56:39.000
Yeah. Those are my question is related to this, uh…

02:56:39.000 --> 02:56:41.000
Uh, Python pile. So, when we use Java.

02:56:41.000 --> 02:56:45.000
Hmm.

02:56:45.000 --> 02:56:47.000
At the time we create a class. And then file name is also with the class name.

02:56:47.000 --> 02:56:50.000
Hmm. Hmm.

02:56:50.000 --> 02:56:56.000
In the Python, we don't do that. Any name we define and class, say, inside the class, and uh… Method 2 really depends.

02:56:56.000 --> 02:57:03.000
I have not even created the class, by the way. I have not even created the class over here.

02:57:03.000 --> 02:57:10.000
How I created a class in today's class? That was a Pydentic one, that was for the data validation, that was not a classes that you understand, right? So basically, I didn't my class was inheriting the base class, which is technically a…

02:57:10.000 --> 02:57:15.000
Okay.

02:57:15.000 --> 02:57:21.000
Like, it was trying to inherit something from the pedantic, uh, nature, like, rules.

02:57:21.000 --> 02:57:25.000
But I have not created that class, technically. Even in today's class.

02:57:25.000 --> 02:57:28.000
So, in Python also, we create a class, right? No?

02:57:28.000 --> 02:57:33.000
Yeah, we do create a class, Python supports a complete object-oriented programming, along with the scripting.

02:57:33.000 --> 02:57:35.000
So, file name is different, and the class they create inside that file.

02:57:35.000 --> 02:57:40.000
Hmm. That could be different, yes.

02:57:40.000 --> 02:57:46.000
So, how, uh, suppose, suppose 10 files I have created, and inside the 10 files.

02:57:46.000 --> 02:57:48.000
The same class I have created. Right? So, which… which will be called, uh, how the Python decides.

02:57:48.000 --> 02:58:01.000
Hmm. Hmm. So basically, how Python works is that, let's suppose there is a file called as XYG. Okay, let me share my screen, let me explain it to you.

02:58:01.000 --> 02:58:12.000
In theory. So… And a beautiful explanation I have given to you, the Python lecture which I have uploaded, right? A beautiful, practical explanation I have already mentioned, but as you have asked, so let me, like, tell it to you.

02:58:12.000 --> 02:58:17.000
So let's suppose I have a… I think my pen marker is visible, right?

02:58:17.000 --> 02:58:18.000
Yeah.

02:58:18.000 --> 02:58:27.000
Okay. So let's suppose I have, technically, a class over… a pile over here. Let's suppose, uh.

02:58:27.000 --> 02:58:28.000
Yeah.

02:58:28.000 --> 02:58:33.000
Test.py file. And then I have something called as XYG.py file, and then something I have called as abc.py.

02:58:33.000 --> 02:58:34.000
Pi file. Pi. Now, inside ABC, there is a possible that I will be having class ABC.

02:58:34.000 --> 02:58:39.000
Right.

02:58:39.000 --> 02:58:40.000
Right? Tide this XYZ.py file, there is a possibility that there will be a class, sudansu.

02:58:40.000 --> 02:58:44.000
Yeah.

02:58:44.000 --> 02:58:52.000
Right? Not XYZ. In ABC, there is already, like… so, just case number one.

02:58:52.000 --> 02:58:53.000
Yeah.

02:58:53.000 --> 02:59:01.000
Let's suppose that your file name and class name is same, right? Case number two, my file name and class name is different, right? And then from test.py file, you are trying to access, basically, whatever is available here, whatever is available here.

02:59:01.000 --> 02:59:02.000
Yeah.

02:59:02.000 --> 02:59:21.000
Because that will be your whole objective? Right. To call class ABC and call class SUDH. Now, so basically, we try to maintain a package or directory structure. With the help of directory structure, it will be able to understand it. So, and there is also a possibility that these are the direct file, and then there is a folder over here. Now, inside this folder, I have another files.

02:59:21.000 --> 02:59:22.000
Yeah.

02:59:22.000 --> 02:59:32.000
Right. One step, like, a down, or one step up, you have to go. So, let's try to talk about this example, uh, first of all. So, if I have to, like, take an action, or if I have to call this ABC.

02:59:32.000 --> 02:59:38.000
From this test.py file. So, first of all, it will call a file name.

02:59:38.000 --> 02:59:39.000
So, ABC, right? So… are going to write something like from ABC.

02:59:39.000 --> 02:59:42.000
Yes.

02:59:42.000 --> 02:59:47.000
Import ABC, because class name is what? Abc? So from every file name, import what? Import class name. Simple, right? Case number 2.

02:59:47.000 --> 02:59:52.000
Yeah. Yeah.

02:59:52.000 --> 02:59:58.000
Again, from test.py file, I'm trying to call this SUDH class. So, again, what I will write from.

02:59:58.000 --> 03:00:04.000
Xyz, import what? Import what? Sudh?

03:00:04.000 --> 03:00:05.000
So, in this way, we'll be able to access. Simple.

03:00:05.000 --> 03:00:08.000
Yeah.

03:00:08.000 --> 03:00:09.000
Okay, so there we call a package, here we call directory structure.

03:00:09.000 --> 03:00:17.000
So this… No, here also we call it classes and packages and modules, basically.

03:00:17.000 --> 03:00:18.000
Nope.

03:00:18.000 --> 03:00:28.000
So, we call packages, and then inside that, so we'll be having a model. So, this is something which I have explained to you in your Python lecture as well, with the practical. And again, there are some edge cases, like init and many things we try to handle.

03:00:28.000 --> 03:00:38.000
So, if you are looking something in detail, watch my Python recordings, but I believe this answers your question, the expansion which I've given to you.

03:00:38.000 --> 03:00:39.000
Yeah.

03:00:39.000 --> 03:00:49.000
Oh, yeah. The next question is, uh, the API key that we generate, so what is the… validation duration for this only 24 hours are…

03:00:49.000 --> 03:00:58.000
No, this API key will be live as long as you are going to, like, work for it. Uh, we are expiring it in 365 days, I believe.

03:00:58.000 --> 03:01:00.000
Okay.

03:01:00.000 --> 03:01:09.000
Once your account will be, like, deactivated. And once you are going to renew… once you run plus means Euron will be… Euron Plus will… access will be gone, or maybe your course access will be gone.

03:01:09.000 --> 03:01:16.000
So, as of now, Euron+, you provided for one year. Is there any plan in, uh… Which is lifetime access you will be providing.

03:01:16.000 --> 03:01:35.000
Lifetime is not possible in this module, because it's, you know, like, it's a too much things. Too much means, like, uh, Yuri, Avni, Yuri API, resume system, live courses, recorded courses, so many things, so many things we are trying to build, so… Lifetime is not possible. Maybe in future we'll have to increase some prices.

03:01:35.000 --> 03:01:36.000
Yeah.

03:01:36.000 --> 03:01:46.000
There is a very high chance, because we are very affordable in the market, and plus, like, uh, we are trying to give something which is useful. Recently, we have launched Avni. Just go and use Avni, you will literally enjoy it.

03:01:46.000 --> 03:01:53.000
Right. Believe me, if someone is going to even score 70-80% in Avni, for sure they can crack the interview, any interview.

03:01:53.000 --> 03:01:54.000
Yeah, okay, thank you, Subhan.

03:01:54.000 --> 03:02:07.000
Yeah, so… we'll give you more features, but not lifetime, so that's not possible. Yeah, so, Saeed, go ahead. After that, Avinas, go ahead. And after that, I'll start, like, uh… taking a screen sharing.

03:02:07.000 --> 03:02:10.000
President, thanks for the opportunity to talk, and… Unfortunately for you, maybe this class.

03:02:10.000 --> 03:02:13.000
Yeah, same.

03:02:13.000 --> 03:02:18.000
I was a small question that we have started the server, we have deployed the server over there.

03:02:18.000 --> 03:02:24.000
Or did not get an opportunity to, like, shut down all this, uh… stop the service over there. So, Alex.

03:02:24.000 --> 03:02:30.000
No, you can, you can stop it. So, for example, let me share my screen once again, and let me go to the render.

03:02:30.000 --> 03:02:40.000
So, RD and DR end up. And let's suppose I'll go to my dashboard. So, by default, if your service is inactive for, like, 30 minutes, so Render is going to.

03:02:40.000 --> 03:02:48.000
Stop it, because we are using our free instances. If we are using our paid instances, then it will up and running for the infinite team. For example, this is the.

03:02:48.000 --> 03:02:58.000
Api service, right, that we have deployed today, right? So, come over here, and then you will be able to check stats over here, each and everything. Uh, as of now, it's running in a free.

03:02:58.000 --> 03:03:06.000
And then there is a restart service option, then setting option, if you'll come down.

03:03:06.000 --> 03:03:14.000
There is a delete option, so if you would like to delete permanently, delete it. If you would like to, like, you know, suspend it for now, and then in a later stage you would like to keep it up.

03:03:14.000 --> 03:03:17.000
Then click on this one. So these options are already available.

03:03:17.000 --> 03:03:21.000
Okay, thank you. Second question is, basically, thank you so much.

03:03:21.000 --> 03:03:23.000
Yeah.

03:03:23.000 --> 03:03:30.000
Second question is, uh, in the UD API, I can see that 120 billion parameter model you have deployed.

03:03:30.000 --> 03:03:31.000
Hmm.

03:03:31.000 --> 03:03:39.000
But I can see that it's accessible through the API key, but it is not accessible through the.

03:03:39.000 --> 03:03:40.000
App, basically, like a chat.

03:03:40.000 --> 03:03:49.000
In API key, we have given a 24-25 model. In a chat, we are not giving you, like, 24-23, we are giving you, like, a… Quality Limited model over there.

03:03:49.000 --> 03:04:00.000
But whenever you normally deploy and are able to get that, I can see the results are really great for the 120 billion parameter, actually.

03:04:00.000 --> 03:04:04.000
Um, it's not like that. So, basically, if you're going to use a GPT-4.1 even 4.0.

03:04:04.000 --> 03:04:13.000
Results are actually great. Right? Light-weighted model, but super-fast model, and, like, a super intuitive model, so you can just try to use it.

03:04:13.000 --> 03:04:20.000
See, I'm like, uh, now we are living in a world where you can't say that this one is great, that one is great. At the end of the day.

03:04:20.000 --> 03:04:28.000
I need a system which can solve my problem immediately. And I believe for that, we have enough number of models, which we have open source.

03:04:28.000 --> 03:04:36.000
Other, uh, which we have, like, opened for the entire student, uh, that we have. Uh, otherwise, unnecessarily, we will end up adding hundreds of models.

03:04:36.000 --> 03:04:37.000
Right. So I think we have, like, enough, which works, which really works, and which works very, very fast.

03:04:37.000 --> 03:04:43.000
Got it.

03:04:43.000 --> 03:04:45.000
Exactly. But thank you so much for my question, sir. Nothing happens.

03:04:45.000 --> 03:04:48.000
Yeah, thanks, thanks. Yeah, I mean, I was, uh, go over to the question.

03:04:48.000 --> 03:04:58.000
My question is regarding UDP. So, uh, you… Show the euro with their help of current implementation.

03:04:58.000 --> 03:05:02.000
So, how to run your API with Python? It didn't seem like a…

03:05:02.000 --> 03:05:08.000
How to run your UIP with Python? We have already given you a sample code, and I think now it should not be a question, but fine.

03:05:08.000 --> 03:05:10.000
Yuri API, right? Now, come over here, code example. Simple copy.

03:05:10.000 --> 03:05:14.000
Yes.

03:05:14.000 --> 03:05:21.000
Go here… Let's suppose I'm going to create a new file.

03:05:21.000 --> 03:05:26.000
And maybe some file name. Py file, or maybe a Jupyter notebook itself? Nahid.

03:05:26.000 --> 03:05:34.000
And here, paste it. Now, this is a chat completion. What is a, like, a prompt that you're trying to give? This one. And here.

03:05:34.000 --> 03:05:40.000
This is static, static, static that you have, it's… you have to replace it with your API key.

03:05:40.000 --> 03:05:44.000
So what I will do, I'll quickly go over here. I'll try to create a new API key, let's suppose.

03:05:44.000 --> 03:05:49.000
Copy it, replace it, this is static, not a BRR, only static, right?

03:05:49.000 --> 03:06:01.000
No, execute and done. It is hitting my model. Which model? This particular model. It is trying to hit. See, I'm able to get the response.

03:06:01.000 --> 03:06:02.000
Yes, sir, got it, sir.

03:06:02.000 --> 03:06:08.000
Yeah, it's very simple. It's like that, like. Everything is given to you.

03:06:08.000 --> 03:06:19.000
Yeah? Yeah, okay, fine. So now, uh, people can start sharing a screen. So, first of all, Hemant can go, then Bharatwa, then Arman, then Manish, then Mohit. Yeah.

03:06:19.000 --> 03:06:26.000
So we'll follow this sequence. Yeah, Ayman, please go ahead with your screen sharing.

03:06:26.000 --> 03:06:33.000
Anyone else, guys, who have to share their screen?

03:06:33.000 --> 03:06:36.000
Gigi, I have sent a request to share the screen.

03:06:36.000 --> 03:06:45.000
Okay, yeah, fine, I have allowed. Yeah, please say it.

03:06:45.000 --> 03:06:49.000
Sister Dante are able to, uh, do the rest of the things.

03:06:49.000 --> 03:06:50.000
Okay. Mmm… which one, which one?

03:06:50.000 --> 03:06:57.000
But this one, I'm still getting the error.

03:06:57.000 --> 03:06:58.000
Increases, yeah.

03:06:58.000 --> 03:07:11.000
Hmm.

03:07:11.000 --> 03:07:17.000
And when I click on this, no?

03:07:17.000 --> 03:07:18.000
It says detailed notes for me.

03:07:18.000 --> 03:07:30.000
Hmm? No, no, it's fine, it's fine. It's actually fine. So, this will give you… because, uh, on your home URL, right? So you are not returning anything, any string or any JSON, so which is going to show any kind of a message.

03:07:30.000 --> 03:07:34.000
So, it's giving you detail not found, it simply means that it's working. Do slash docs.

03:07:34.000 --> 03:07:40.000
It's… it means it's actually working. See, at this URL, we have not written anything, right? That returned me this message.

03:07:40.000 --> 03:07:42.000
Or maybe return Hello World kind of things. So just do some docs, it will, it will return.

03:07:42.000 --> 03:07:44.000
Hmm… Okay. So, uh… So then I… so that means?

03:07:44.000 --> 03:07:49.000
You will be able to see. It's work.

03:07:49.000 --> 03:07:53.000
When I was deploying this, uh… using render.

03:07:53.000 --> 03:07:55.000
Hmm, hmm. Similar result, exactly, yes.

03:07:55.000 --> 03:08:02.000
It'll also give the similar results then. So what should I do, sir, uh, to…

03:08:02.000 --> 03:08:04.000
Uh, give me the right results.

03:08:04.000 --> 03:08:10.000
So, like, you would like to see some message, this is what you're trying to say, right?

03:08:10.000 --> 03:08:12.000
Uh, if I want to… delete a user or do something.

03:08:12.000 --> 03:08:19.000
Okay, okay, okay, okay. So, show some… so… okay, so, no, so you are trying to say that it should show you.

03:08:19.000 --> 03:08:22.000
Uh, the deleted user as well.

03:08:22.000 --> 03:08:24.000
Ah, deleted user or additional user, or anything.

03:08:24.000 --> 03:08:31.000
It will… it… see, as of now, we are trying to keep our data well. So, we are trying to keep our data into a variable. Now, what is the meaning of that variable? Variable means it's an in-memory.

03:08:31.000 --> 03:08:34.000
Yes. Yes? Yes.

03:08:34.000 --> 03:08:42.000
It's available in a RAM, right? This is the meaning of it. It's not a database that we are hitting, it's basically.

03:08:42.000 --> 03:08:51.000
We are trying to hit our local variable. Which is a part of our main memory, technically a part of the RAM. So, you can try to do a print, which you will be able to see in a console.

03:08:51.000 --> 03:08:58.000
Right? And then, maybe, like, you can try to even showcase those same values in a UI if you want.

03:08:58.000 --> 03:09:01.000
So, you have to… let me… modify this code.

03:09:01.000 --> 03:09:03.000
So let's say, yeah… so let's say, for example, if I want to add a new user.

03:09:03.000 --> 03:09:06.000
Let me… Hmm…

03:09:06.000 --> 03:09:14.000
Uh, how can I do it? I mean, maybe it sounds a very basic question, but…

03:09:14.000 --> 03:09:15.000
Okay.

03:09:15.000 --> 03:09:45.000
Just a minute, I'm modifying the code. So…

03:11:16.000 --> 03:11:26.000
Okay, so just try to add one get. I'm pinging you inside a chat, so maybe you can try to add one get. So, whenever you have modified something, try to call a get URL.

03:11:26.000 --> 03:11:32.000
The user, and then try to pass a username, it will be able to show you that.

03:11:32.000 --> 03:11:33.000
Basically, it's another API, right? So, just to modify, so I have used my fake user DB.

03:11:33.000 --> 03:11:38.000
So, uh…

03:11:38.000 --> 03:11:45.000
Uh, just change it with your user DB. So your variable name is userDB, by the way.

03:11:45.000 --> 03:11:58.000
It's a user DB. Your username is? Yeah.

03:11:58.000 --> 03:12:06.000
Nod slash user, and just try to pass the username, it will be able to show you all the data. Or maybe if you would like to showcase the whole data.

03:12:06.000 --> 03:12:09.000
Then change the URL. So Git will do you that. Git will do that.

03:12:09.000 --> 03:12:12.000
Let me… let me try. So, uh, this one.

03:12:12.000 --> 03:12:17.000
Yeah. Yes.

03:12:17.000 --> 03:12:20.000
Denzel? Should I just do this one?

03:12:20.000 --> 03:12:32.000
Yeah, it says, yeah. Just this one.

03:12:32.000 --> 03:12:33.000
Hmm, you can go to the link, you can try to type, like, a user slash username.

03:12:33.000 --> 03:12:38.000
And now, I can go to the link.

03:12:38.000 --> 03:12:42.000
Uh, in the URL?

03:12:42.000 --> 03:12:50.000
Yeah, so slash user, slash username. Users, users, USERS, that is something that you have given, right?

03:12:50.000 --> 03:12:51.000
And username, so whatever username which is available inside your DB.

03:12:51.000 --> 03:12:59.000
Yes.

03:12:59.000 --> 03:13:04.000
Okay, now at least I'm able to see that, uh… Even if it is not there, then I'm able to see the wrong message.

03:13:04.000 --> 03:13:11.000
Exactly, yeah. So that is how, like, it will be able to give you… you're sending a GET request, right? So GETS is something which I can send to the URL.

03:13:11.000 --> 03:13:12.000
Yes, sir.

03:13:12.000 --> 03:13:19.000
So this is something which I, like, just call the URL, and if there is a result, it will try to give you. If there is no result, it will not give you.

03:13:19.000 --> 03:13:31.000
Means whatever message that you are printing, right, whatever return that you are giving, that… So basically, your, uh, variable name is not user name, by the way, so check that out. No, no, no, it's not like.

03:13:31.000 --> 03:13:36.000
Username, so it's basically… user ID.

03:13:36.000 --> 03:13:39.000
Use an idea.

03:13:39.000 --> 03:13:45.000
So, user… just go back to your code, let's modify a little bit.

03:13:45.000 --> 03:13:54.000
So, userDB, and then inside the user DB, bracket, bracket. And try to put a user ID.

03:13:54.000 --> 03:13:55.000
No, no, no, come down, get, get method, get, get. The last one, the get one.

03:13:55.000 --> 03:13:57.000
Good method? Okay. Yes.

03:13:57.000 --> 03:14:04.000
Yeah, so it should be UserDB. If username in userDB, and then after userDB, bracket, it's a dictionary, right?

03:14:04.000 --> 03:14:09.000
So, just try to pass, uh, as a username, return user.

03:14:09.000 --> 03:14:12.000
Name… Let's suppose I'm giving…

03:14:12.000 --> 03:14:14.000
They return usage.

03:14:14.000 --> 03:14:22.000
Any values. Okay, fine. Save it, go back to your browser. Got it, got it. You have to, like, give an ID, basically. It's a 123.

03:14:22.000 --> 03:14:24.000
Go back to your browser. Now, in terms of Dansu, just type 1.

03:14:24.000 --> 03:14:31.000
Okay.

03:14:31.000 --> 03:14:32.000
Oh, okay. Got it, got it, got it. Uh, but it is not user ID.

03:14:32.000 --> 03:14:36.000
It's ID, right? Yeah, so the very first variable.

03:14:36.000 --> 03:14:38.000
No, it's username, username. So, your URL, right. User slash. Users, users slash users.

03:14:38.000 --> 03:14:44.000
It is, uh, ah.

03:14:44.000 --> 03:14:51.000
What is your route? Your route is users? Users, yeah. Now hit.

03:14:51.000 --> 03:14:55.000
Users.

03:14:55.000 --> 03:14:56.000
Yeah, that is what I do. Yes, sir.

03:14:56.000 --> 03:15:02.000
That is your URL, right? Just, just go back, go back, show me once.

03:15:02.000 --> 03:15:03.000
Uh, to the court.

03:15:03.000 --> 03:15:09.000
Yes. So, U.S. I'm known?

03:15:09.000 --> 03:15:10.000
U-s-e-r-s. Yeah… Line number 35.

03:15:10.000 --> 03:15:16.000
I think it is user. Yeah, I think… I think it is line number 35.

03:15:16.000 --> 03:15:24.000
Yeah, line number 35, and your DB is this one, so it should return, basically, uh… Yeah, it doesn't matter the username you're passing, it's the data that you're passing, right?

03:15:24.000 --> 03:15:34.000
So, variable is fine. Users, and then user name, that's fine. So, USERS. Yeah, hit it now.

03:15:34.000 --> 03:15:36.000
Uh, should I… should I run it once again?

03:15:36.000 --> 03:15:41.000
No, no, no, it's fine. You have already run with the reload, right? So it will update automatically.

03:15:41.000 --> 03:15:42.000
Good news in. Okay, okay, I'll do it.

03:15:42.000 --> 03:15:52.000
This was… yeah, this was not required, was it?

03:15:52.000 --> 03:15:57.000
Slash users…

03:15:57.000 --> 03:16:02.000
And one, yeah. It should take, uh, username, then as ID.

03:16:02.000 --> 03:16:04.000
Try to pass one. Oh, it should.

03:16:04.000 --> 03:16:08.000
You know, it's not…

03:16:08.000 --> 03:16:18.000
It's 200 users one. For that, it's giving me 200. Which looks good to me.

03:16:18.000 --> 03:16:25.000
And your event route looks good to me. Uh, yeah, it's giving me 200, so why it isn't…

03:16:25.000 --> 03:16:26.000
Yeah.

03:16:26.000 --> 03:16:33.000
Not… Turning the…

03:16:33.000 --> 03:16:36.000
Maybe should I try this once again?

03:16:36.000 --> 03:16:43.000
Slash, there's no route is fine. Slash user… just drive it to 2, ID 2.

03:16:43.000 --> 03:16:57.000
Slash user's ID 2. Maybe you have to… yeah, ID 2.

03:16:57.000 --> 03:17:00.000
In a terminal, it is giving, uh… Yes, yes.

03:17:00.000 --> 03:17:05.000
No, and dominant is giving you 200 OK, right? So, which is… simply means that… It's a good request, but in return, you have written.

03:17:05.000 --> 03:17:09.000
Yes.

03:17:09.000 --> 03:17:29.000
Uh, this one, and let's suppose… Um…

03:17:29.000 --> 03:17:32.000
We return. Because in the terminal, it says… It's all okay request.

03:17:32.000 --> 03:18:02.000
Hmm, it's all okay request. It's actually okay request. There is nothing wrong…

03:18:02.000 --> 03:18:07.000
Okay, yeah, just go up. Someone has added username, data type was actually in teaser.

03:18:07.000 --> 03:18:09.000
Just, just go up, go up.

03:18:09.000 --> 03:18:12.000
Okay.

03:18:12.000 --> 03:18:22.000
And, uh… But doesn't matter, like, it's an integer that we are trying to pass.

03:18:22.000 --> 03:18:28.000
And…

03:18:28.000 --> 03:18:33.000
Product ID, and then make…

03:18:33.000 --> 03:18:43.000
It's taking as a… string…

03:18:43.000 --> 03:18:46.000
I just want to get Method next week.

03:18:46.000 --> 03:19:14.000
No, no, that is not an issue.

03:19:14.000 --> 03:19:18.000
Ideally, it should work. I don't see any kind of an issue in this one.

03:19:18.000 --> 03:19:25.000
And you are doing, uh… just go to your postman, or maybe, like, just try to do a curl.

03:19:25.000 --> 03:19:28.000
Okay. I'll do it organism.

03:19:28.000 --> 03:19:33.000
Yeah, just do it from a postman, or do it from a curl, because it's a 200, right? So 200 simply means that everything is working fine.

03:19:33.000 --> 03:19:34.000
Yes, sir. Okay.

03:19:34.000 --> 03:19:40.000
I don't know, like, why it is, uh, not, uh… showing, but it should show, actually.

03:19:40.000 --> 03:19:48.000
So, good. Cesar, help me with this commandment. I'm not that…

03:19:48.000 --> 03:19:49.000
Good, good.

03:19:49.000 --> 03:19:57.000
Which one? Curl? Curl, then, like, uh, space, then hyphen X, and then space, then method name, get.

03:19:57.000 --> 03:20:04.000
Good GLT good? Then, space, and then there will be a string, open double quote.

03:20:04.000 --> 03:20:09.000
Yeah, and close double quote, and then in between, try to write your URL.

03:20:09.000 --> 03:20:11.000
Uh, this one.

03:20:11.000 --> 03:20:18.000
Yeah, so try to write your, like, this URL, yeah.

03:20:18.000 --> 03:20:21.000
So, here you have… you're trying to, like, do a curl, right?

03:20:21.000 --> 03:20:29.000
Uh, first of all, curl is not recognized here. Invalid request, this, this, this, no, no, no.

03:20:29.000 --> 03:20:34.000
Not work.

03:20:34.000 --> 03:20:39.000
This H2DB.

03:20:39.000 --> 03:20:46.000
Is it catch in a browser? Yeah, there is a possibility. But, uh, Carly, you are writing, right?

03:20:46.000 --> 03:20:47.000
Mm-hmm, mm-hmm.

03:20:47.000 --> 03:20:53.000
Yes, sir.

03:20:53.000 --> 03:21:01.000
Again, looks good to me. Just do one thing, so remove the method, uh, remove X and remove GET.

03:21:01.000 --> 03:21:06.000
Just try to keep this URL.

03:21:06.000 --> 03:21:08.000
And it will be string as well. And remove, uh…

03:21:08.000 --> 03:21:13.000
It removes Jane? Okay.

03:21:13.000 --> 03:21:16.000
Just, just keep the URL. You are a yes.

03:21:16.000 --> 03:21:22.000
Just give the U. Okay, uh…

03:21:22.000 --> 03:21:23.000
Your… Remove, remove codes, basically.

03:21:23.000 --> 03:21:29.000
Is it this one? They remove quotes? Okay.

03:21:29.000 --> 03:21:41.000
Yeah. Someone is saying he's passing ID. It doesn't matter. Basically, he's passing a variable. The mapping should be correct, so it doesn't matter what name he's passing.

03:21:41.000 --> 03:21:48.000
Unable to connect to the remote server, uh, curl is not available, it seems.

03:21:48.000 --> 03:21:52.000
In your system, just do one thing, give me a control, I'll check from my end.

03:21:52.000 --> 03:21:55.000
Okay, so…

03:21:55.000 --> 03:22:01.000
Hmm, give me a control.

03:22:01.000 --> 03:22:09.000
Okay, so here…

03:22:09.000 --> 03:22:20.000
Wow, what is Cell…

03:22:20.000 --> 03:22:35.000
Okay. Sddb… Oh, and one more thing, your application itself is not running, how will work?

03:22:35.000 --> 03:22:36.000
Your application is not up and running, so how call will work, by the way?

03:22:36.000 --> 03:22:43.000
Sorry, sir?

03:22:43.000 --> 03:22:51.000
No, just try to open up a new PowerCell. If I have to do a curl… do a curl… eh?

03:22:51.000 --> 03:22:58.000
Url slash… Users slash… to get method.

03:22:58.000 --> 03:23:03.000
Yeah, so we are able to get the response, and response says that user not found, okay?

03:23:03.000 --> 03:23:07.000
Nice. Yes.

03:23:07.000 --> 03:23:10.000
Fine, so user not found. But we are able to hit it. Basically, it's a 200, something that we are able to hit it.

03:23:10.000 --> 03:23:12.000
Yes.

03:23:12.000 --> 03:23:17.000
Now, it's telling me that user not found, user DB, this, this, this, this, this.

03:23:17.000 --> 03:23:23.000
Okay. Hmm…

03:23:23.000 --> 03:23:34.000
And get you have kept it here.

03:23:34.000 --> 03:23:39.000
Def. You can get underscore users, then…

03:23:39.000 --> 03:23:51.000
Here, I'll try to pass ID. Id should be integer. And then… Let's do the mapping. A return, basically, RE.

03:23:51.000 --> 03:23:58.000
8, you are in return, return what? So return, basically, the user ID variable that you have.

03:23:58.000 --> 03:24:04.000
User DB, and then pass, basically, ID. A very simple code.

03:24:04.000 --> 03:24:10.000
And it works. Uh, so here, I'll pass just an ID.

03:24:10.000 --> 03:24:20.000
Fine. And then decorate it with app. Get method, and then give a route.

03:24:20.000 --> 03:24:28.000
Over here, so slash, uh, get underscore, uh, maybe just I'll write, like, a usage user.

03:24:28.000 --> 03:24:34.000
Slash, and then parameterize it. Id.

03:24:34.000 --> 03:24:36.000
So, line number 19, uh, DB group.

03:24:36.000 --> 03:24:42.000
Yeah, DB, so… DB. Ctrl-s.

03:24:42.000 --> 03:25:07.000
It must have repress itself. Okay. Then…

03:25:07.000 --> 03:25:15.000
So let's less users…

03:25:15.000 --> 03:25:25.000
Got it right? Yeah. So, it was not… I don't know what… what was the mistake, maybe there was a string over there, it was not able to convert, so it was returning a blank.

03:25:25.000 --> 03:25:27.000
Okay.

03:25:27.000 --> 03:25:32.000
I don't know, like, it simply means that there is a dictionary called as userDB, and I'm trying to pass a key, it is going to return that value. Simple.

03:25:32.000 --> 03:25:33.000
Okay, so yeah, TK, I mean, no.

03:25:33.000 --> 03:25:39.000
Right, at this… at this particular… at this particular URL. And this is how you are… you can run the curl.

03:25:39.000 --> 03:25:42.000
And you can test it anywhere else as well.

03:25:42.000 --> 03:25:50.000
Okay, so now if I go to my URL, it should be… running correctly, correct?

03:25:50.000 --> 03:25:51.000
Let's, uh… so it is Edge. So it is edge, and users.

03:25:51.000 --> 03:25:54.000
Hmm, it should… let me go and test it now. What is the…

03:25:54.000 --> 03:25:59.000
It should be user, yes. Yes, okay. Sir, uh, I… ah, that… this is okay, sir.

03:25:59.000 --> 03:26:03.000
Noted, right?

03:26:03.000 --> 03:26:05.000
Uh, I can see, uh, you had created in terminal. Can I take the control, sir?

03:26:05.000 --> 03:26:09.000
Hmm. Hmm, you can take a control. Fine. Your system is yours now.

03:26:09.000 --> 03:26:17.000
Okay. I can see this… there is UVCon and PowerSool. You have actually opened two terminals.

03:26:17.000 --> 03:26:18.000
Is there a specific reason? I am not ignored.

03:26:18.000 --> 03:26:27.000
Yeah, so basically, in one, your service should be up and running, right? So if you're going to stop your APIs, and then if you're going to call a curl, how it will be able to hit it.

03:26:27.000 --> 03:26:28.000
Oh, correct, correct, correct, correct. So I'm very new to this, so please, please partner with me.

03:26:28.000 --> 03:26:39.000
So… Okay. You can… yeah, so you can try to open up any number of terminals, because…

03:26:39.000 --> 03:26:40.000
Got it.

03:26:40.000 --> 03:26:48.000
Most of the time when you are testing it, right, so your application should be up and running, your backend should be up and running, your frontend should be up and running, so in UVCon that you are able to see, it's also a terminal, and this is also a terminal. In one, I have kept it up and running, and in second, I'm testing it.

03:26:48.000 --> 03:26:50.000
Got it, got it. Now and I got it. Okay, thank you, sir.

03:26:50.000 --> 03:26:55.000
Yeah, yeah. Last time when you were hitting a curl, right, so your API was not up and running, so it will not be able to… So how it will be able to give you the result.

03:26:55.000 --> 03:27:00.000
Exactly, huh? And these are very… yeah, these are fundamentals, uh…

03:27:00.000 --> 03:27:01.000
Yeah, yeah. Not an issue, like, you will get used to it very soon.

03:27:01.000 --> 03:27:05.000
So I… huh. I'll get into it, that is not a problem. I just need to practice a little more.

03:27:05.000 --> 03:27:10.000
Yeah, yeah. Yep, yep, yep.

03:27:10.000 --> 03:27:11.000
Okay, thank you, sir. Thank you so much.

03:27:11.000 --> 03:27:16.000
Oh, yeah. Next, yeah. Thank you. Okay, so next one, Bharatwaj Arman Manis, anyone?

03:27:16.000 --> 03:27:17.000
Yeah, I mean, so… Uh, yeah, shall I share my screen, sir?

03:27:17.000 --> 03:27:28.000
Anil and Prasan, uh, you have raised your hand. Yeah. Yeah. Yes, please go ahead, please go ahead.

03:27:28.000 --> 03:27:33.000
Yeah, like, uh, yeah, uh, last week I started joining the classes, just today, again, I attended the class.

03:27:33.000 --> 03:27:34.000
Okay. Mm-hmm.

03:27:34.000 --> 03:27:39.000
So, yesterday's recording, you had to review it because of some issues.

03:27:39.000 --> 03:27:40.000
So, like, uh, I… just now went to this API keys.

03:27:40.000 --> 03:27:44.000
Mm-hmm.

03:27:44.000 --> 03:27:45.000
Mm-hmm. Mm-hmm.

03:27:45.000 --> 03:27:53.000
And created this key. So I was trying to hit this, I mean, sample code using, uh… So, like, getting this error. Is it something prerequisite I need to, like.

03:27:53.000 --> 03:28:01.000
Nationalization context, failed cryptid, this is check the user function, unable to check the revocation certificate, and what you are hitting.

03:28:01.000 --> 03:28:07.000
Uh, this authorization key is fine, then data-wise, message, this, this, this, hello.

03:28:07.000 --> 03:28:13.000
You are trying to give… no, I don't see anything wrong in this one.

03:28:13.000 --> 03:28:16.000
Shall we create a key again, so maybe?

03:28:16.000 --> 03:28:27.000
Uh, yeah, do it once again.

03:28:27.000 --> 03:28:31.000
Hmm. Now, copy the curl, copy a key in a text editor somewhere, yeah, in a notebook, yeah. So, just copy everything.

03:28:31.000 --> 03:28:35.000
Yes.

03:28:35.000 --> 03:28:43.000
Copy the URI API key, fine. Copy the curl. Okay. And replace this API key with that one?

03:28:43.000 --> 03:28:44.000
Shall I change the models?

03:28:44.000 --> 03:28:52.000
Yeah, change the model, yeah. Gpt… 4.1… what is the name of the model? Exactly, 4.1, I believe, and nanone.

03:28:52.000 --> 03:28:55.000
Should I check it, uh, here.

03:28:55.000 --> 03:29:01.000
You're gonna check it inside, uh, even the first page. First, go to first page, introduction, yeah.

03:29:01.000 --> 03:29:06.000
Now, here, OpenAPI, OpenAI, OpenAI, OpenAI, click on OpenAI, yeah, it will show all the models.

03:29:06.000 --> 03:29:07.000
Okay.

03:29:07.000 --> 03:29:14.000
Now, so let's check the ID. So, it's a 4.1 hyphen nano. Gpt-4.1.1 nano.

03:29:14.000 --> 03:29:20.000
Yeah. Now it's good. Uh, you can try to, like, give some context. You're saying hello, right?

03:29:20.000 --> 03:29:21.000
And change your API key, replace the API key. You already have a new one, yeah.

03:29:21.000 --> 03:29:27.000
I don't know. Ah, yes, I updated it. Uh, so, okay, here I also has a…

03:29:27.000 --> 03:29:37.000
So, replace it. Fine, and maybe content-wise, you can change the content if you want.

03:29:37.000 --> 03:29:47.000
Ask any question, like, tell me about this, that, something, so…

03:29:47.000 --> 03:30:02.000
Yeah, so, hit it now.

03:30:02.000 --> 03:30:03.000
Sure.

03:30:03.000 --> 03:30:11.000
Mmm… security context fail the revocation function was unable to.

03:30:11.000 --> 03:30:12.000
Who will be sent for the secondary. Are you… are you… no, no, no, are you trying to use a company laptop or something?

03:30:12.000 --> 03:30:19.000
Anything, like, I need to open PowerShell or Bash in admin…

03:30:19.000 --> 03:30:20.000
Then… why it is giving US…

03:30:20.000 --> 03:30:30.000
No, no, sir, it's my personal desktop itself. And I… do we need to open any partial or this thing in admin mode, or something like that?

03:30:30.000 --> 03:30:31.000
Okay. Yeah, yeah.

03:30:31.000 --> 03:30:34.000
No, not at all. It works in every mode. Basically, there is nothing to do with your admin, right? You are hitting…

03:30:34.000 --> 03:30:35.000
Yeah, yeah, yes.

03:30:35.000 --> 03:30:51.000
Uri Server. Uh…

03:30:51.000 --> 03:30:52.000
And you are using Git to BAS, right?

03:30:52.000 --> 03:30:59.000
Even I tried with the image to… I mean, model as well, which you… Yes, yes. I even tried with this in here as well.

03:30:59.000 --> 03:31:00.000
Oh, the same thing.

03:31:00.000 --> 03:31:09.000
And it is basically checking for SSL, by the way. So, whenever you are doing a… so there is an issue with your installation.

03:31:09.000 --> 03:31:10.000
Over here, uh… Just open up a VS Code.

03:31:10.000 --> 03:31:15.000
Okay.

03:31:15.000 --> 03:31:20.000
Hmm. Now, open up a terminal. Yeah, clean, clean this one, clean this one, PowerCell, yeah, clean it.

03:31:20.000 --> 03:31:32.000
Hmm. Hit the same.

03:31:32.000 --> 03:31:33.000
Oh, okay.

03:31:33.000 --> 03:31:44.000
No, no, it was not line-by-line, so, like…

03:31:44.000 --> 03:31:47.000
Hmm. Hit?

03:31:47.000 --> 03:31:53.000
Cannot convert JSON value, I'm just…

03:31:53.000 --> 03:31:59.000
No, so it was expecting, uh, into the codes, uh, this URL that you are trying to pass, right? So whenever you do a curl.

03:31:59.000 --> 03:32:05.000
Here, so generally, it expects… but, no, no, no, that's just fine, leave it.

03:32:05.000 --> 03:32:08.000
Uh, just try to open up, uh, you're using a Windows machine, right?

03:32:08.000 --> 03:32:09.000
Ah, Windows, yeah. Oh, shit, look.

03:32:09.000 --> 03:32:15.000
Open a PowerCell. Separately. And, uh…

03:32:15.000 --> 03:32:25.000
Inside that, if you have WSL, then… Yeah, open it, open it.

03:32:25.000 --> 03:32:32.000
No, again, not line by line.

03:32:32.000 --> 03:32:41.000
Because the issue that I'm able to see is with SSL, so your kernel is not, like, uh… in your, like, a Git bas, right? So it is not working.

03:32:41.000 --> 03:32:47.000
Uh, one more thing, just let me do one modification in your SSL, then.

03:32:47.000 --> 03:32:48.000
Okay. Uh, okay.

03:32:48.000 --> 03:32:57.000
Uh, let me, uh, give… give me a control. So here, I can bypass your SSL, because unnecessarily your system is checking SSL.

03:32:57.000 --> 03:32:58.000
Uh, so I can… Just leave your system, I'm controlled.

03:32:58.000 --> 03:33:04.000
Okay. Yeah, I left it, yeah.

03:33:04.000 --> 03:33:07.000
No, I am not able to access… let me… No, no, no, give up, remote, just wait, just wait.

03:33:07.000 --> 03:33:13.000
Okay, shall I close this partial?

03:33:13.000 --> 03:33:16.000
And now I'm again requesting you, give me a remote control, just click on the button. Yeah, click on the button.

03:33:16.000 --> 03:33:20.000
Okay. Yeah, I approve it, yes.

03:33:20.000 --> 03:33:26.000
Uh, now I can get it. I can get, uh, your control. So, SSL issue it is giving you, right? Let me bypass. Hyphen, hyphen SSL hyphen, revoke the access.

03:33:26.000 --> 03:33:30.000
Okay.

03:33:30.000 --> 03:33:36.000
Mmm, even… best hyphen EFFORTs.

03:33:36.000 --> 03:33:40.000
So, because of some of your installation, it's giving you this issue.

03:33:40.000 --> 03:33:44.000
Okay. Actually reinstall later after the class with the girls.

03:33:44.000 --> 03:33:47.000
Yeah, that will fix the issue. Now, see, it's, uh, hitting. Yeah, now you got the output.

03:33:47.000 --> 03:33:51.000
Okay. Okay. Okay, okay.

03:33:51.000 --> 03:33:52.000
Sure. Okay.

03:33:52.000 --> 03:33:57.000
So basically, I have written hyphen SSL revoke best effort, right? So, this was the certificate issue it was giving over here.

03:33:57.000 --> 03:33:58.000
Right. Now, with the help of this command, so I have just, like, removed that check.

03:33:58.000 --> 03:34:02.000
Okay, okay, okay. Okay, okay, okay.

03:34:02.000 --> 03:34:03.000
And now you have the output. Yeah, okay. Yeah.

03:34:03.000 --> 03:34:13.000
Sure, sure, sure. Sure. So, like, I mean, uh, yeah, one more question, like, uh, not with respect to this context, maybe, like, uh, I'm, like, almost, like, 9% years of experience.

03:34:13.000 --> 03:34:14.000
So, like, uh, into currently into Kubernetes, like, last couple of years, I've been working with the Kubernetes, uh.

03:34:14.000 --> 03:34:19.000
Okay.

03:34:19.000 --> 03:34:32.000
Build automations and all. So, like, transitioning to this, like, the… Topics which you're teaching right here. So, switching in this position as a senior engineer, like, will we be able to, like, come and cope up with the things if you are, like, I mean, internally?

03:34:32.000 --> 03:34:40.000
Easily, see, development-wise, I understands all kind of a development and tech as same. It's not very different, believe me.

03:34:40.000 --> 03:34:46.000
And I think with 9 years of experience, you must have started realizing it. In next couple of years, you will be able to realize it in a better way.

03:34:46.000 --> 03:34:47.000
Okay, okay. Okay.

03:34:47.000 --> 03:34:52.000
Right. After some times of all ticks are same. Doesn't matter which you are implementing, which you are learning.

03:34:52.000 --> 03:34:57.000
Okay, okay. So, like, I mean, this background knowledge of Kubernetes will be useful even as a…

03:34:57.000 --> 03:35:06.000
Always, always useful. It will be very much useful in terms of productizing the application, in terms of scaling the application, and when you will go and talk about the story, right? That, okay, fine, this is something which I have done for this scale.

03:35:06.000 --> 03:35:11.000
For this number of users with this kind of a hit per second, like, attraction per second.

03:35:11.000 --> 03:35:13.000
That will give you a lot of backup. Yeah. Yeah.

03:35:13.000 --> 03:35:16.000
Okay, okay. Sure, sure, directly. Yeah, thank you so much. Thanks.

03:35:16.000 --> 03:35:18.000
Okay, thank you. Arman, please share your screen.

03:35:18.000 --> 03:35:20.000
Yeah.

03:35:20.000 --> 03:35:26.000
Most strange issue was resolved, so I have a question now, apart from sharing my screen.

03:35:26.000 --> 03:35:27.000
Okay, sure.

03:35:27.000 --> 03:35:33.000
Basically, we have created, you know, two requests, put and delete, like the update one.

03:35:33.000 --> 03:35:34.000
Mm-hmm.

03:35:34.000 --> 03:35:42.000
So, for a person who doesn't know about the postman, or the call part, so how they will be able to test our APIs regarding the update and resort and all that stuff.

03:35:42.000 --> 03:35:51.000
See, girl, if someone is saying curl, you don't know, I will simply say one thing that you have never done any development.

03:35:51.000 --> 03:35:57.000
That's the whole idea, right? If someone is saying that, I don't know… let's suppose Postman and curl. If someone don't know.

03:35:57.000 --> 03:36:08.000
It's simply meant that you have never productionized a real-time project in your entire life, first part. Second part is, you are not aware about the basic of the language, because that should come with that.

03:36:08.000 --> 03:36:16.000
Right? Uh, and again, uh, I don't think that, like, knowing about a curl or postman takes more than 5 minutes of time.

03:36:16.000 --> 03:36:32.000
Right? So it's not a chapter. Curl is not a chapter. Postman is not a chapter that you have to go through, right? It's not a resource that you have to, uh, done. It's just a one single command. We don't know about many things, right? Before a studies class and today's class, we were not aware about, like.

03:36:32.000 --> 03:36:44.000
This term's called as get, post, put, and delete. We were not aware about even how to, like, hit the APIs with the help of a ULS. Now, we are aware about it. Similarly, current postman, like, we are able to use it.

03:36:44.000 --> 03:36:52.000
And I think those who have done at least a little bit of development, right, in any programming language, any means, literally any programming language, any framework.

03:36:52.000 --> 03:36:58.000
They must be aware about curl, they must be aware about the postman, because without that, they can't do the real development.

03:36:58.000 --> 03:37:05.000
Or things like called to test it, right? But…

03:37:05.000 --> 03:37:16.000
Obviously, whenever you will create the API, you will test it, right? Without testing how you will deploy, how you will put that in a production, or any system.

03:37:16.000 --> 03:37:17.000
When you said that was interesting. And…

03:37:17.000 --> 03:37:27.000
Right? I don't… And to do that, you have to use either curl or Postman, or maybe some programming language where you will write, like, write an endpoint, and then you will try to pass the data, and you will get the response.

03:37:27.000 --> 03:37:29.000
Yeah?

03:37:29.000 --> 03:37:36.000
Having the practical example of how the API editing a database and displaying your data.

03:37:36.000 --> 03:37:44.000
Just, just, just, just attend all the lectures. There are, like, a n number of combinations. You will go through… we'll… we will go through all the combinations in a class itself.

03:37:44.000 --> 03:37:52.000
Like, if we were too fast-paced the learning of generative AI of this series, as we saw that you have a.

03:37:52.000 --> 03:37:58.000
Completed one class before, so… and you've had… Last sequence we have to follow.

03:37:58.000 --> 03:38:06.000
You're gonna… you can follow that sequence, even you will be able to learn all these in native AI concepts, yeah?

03:38:06.000 --> 03:38:09.000
Okay? Fine. You have to share your screen, Arman, or more?

03:38:09.000 --> 03:38:10.000
No, sir, I was having the regarding that my API was not working.

03:38:10.000 --> 03:38:12.000
Oh, good. Just, just me, yeah. Just, just, just wait, wait, wait, wait, everyone, okay?

03:38:12.000 --> 03:38:13.000
Good afternoon, sir. Sir, can I…

03:38:13.000 --> 03:38:18.000
So, can I share my screen?

03:38:18.000 --> 03:38:24.000
Okay, so Mukesh, please share your screen. After that, Manis, uh, will share the screen. After that, those who are raising their hand, so I'll take them.

03:38:24.000 --> 03:38:25.000
Yeah, Amit Sarah. So, you would like to share the screen?

03:38:25.000 --> 03:38:29.000
Shut them up.

03:38:29.000 --> 03:38:30.000
Yes, that's okay.

03:38:30.000 --> 03:38:31.000
No, no, no, not sharing, just 2-3 points. If you allow me…

03:38:31.000 --> 03:38:42.000
Amit, Amit? Okay, I'll come… we'll talk it, we'll talk about it peacefully, okay? So, let me, like, there are two people only, Bukesh and Manish, who would like to share their screen.

03:38:42.000 --> 03:38:43.000
Okay, yeah, so Mukesh, who is sharing, by the way? Yeah, Mukesh is sharing.

03:38:43.000 --> 03:38:44.000
So, I want to say this again.

03:38:44.000 --> 03:38:46.000
Yeah, but I'm sitting here. Yeah, so, uh, yeah, uh, so, uh, here, uh, to, uh.

03:38:46.000 --> 03:38:53.000
Yeah, Mukes, please tell me, what is the issue?

03:38:53.000 --> 03:38:58.000
Publish this code. Uh, I just, uh. Miss that thing, to debug the issues from my end.

03:38:58.000 --> 03:38:59.000
Okay.

03:38:59.000 --> 03:39:05.000
Then, just to wait for 4 hours, or to, uh… do it deployment right way.

03:39:05.000 --> 03:39:06.000
So, what was the thing now? Uh, because I have, uh, if you see… This one… yeah.

03:39:06.000 --> 03:39:14.000
Okay. Okay, so fine. You have to write, uh, like, inside this render, right?

03:39:14.000 --> 03:39:22.000
So, basically, you have to write a UVCORN. Uh, just go to render.

03:39:22.000 --> 03:39:27.000
Yeah. From the inside, yeah.

03:39:27.000 --> 03:39:36.000
Yeah. Sorry, where is your screen? Okay, go to render, Python is fine, main is fine, uh, root directory is fine, blank, that's cool.

03:39:36.000 --> 03:39:41.000
And then pip install requirement.txt. You have a requirement.txt, right, inside your file?

03:39:41.000 --> 03:39:48.000
Okay. Now, also, inside this start command, so you have to technically write a UV corn.

03:39:48.000 --> 03:39:54.000
Right? Uvcon, UVIs, URL. Uvc URN? Yeah. Space?

03:39:54.000 --> 03:39:58.000
So what is your file name? Can you please show me your repository?

03:39:58.000 --> 03:40:03.000
Yeah.

03:40:03.000 --> 03:40:23.000
Yeah, so your file name is which one? Uh… where you have written the actual API code.

03:40:23.000 --> 03:40:24.000
No, uh, no. Yeah, this one.

03:40:24.000 --> 03:40:37.000
No. This is IPY and B. Okay, so you're… first of all, your PI file is capital.p… it should be .py, PY is small, otherwise it will raise a conflict. So, correct that particular part.

03:40:37.000 --> 03:40:42.000
Uh, second is you have a folder inside a folder. So, technically.

03:40:42.000 --> 03:40:50.000
Go back to your render, it will not be able to recognize, because it's not there, right? And even it will allow you to manage your requirement.txt.

03:40:50.000 --> 03:41:01.000
So, here, come down, come down, come down. So, a branch is main, and then, like, a root directory. So, inside root directory, you have to mention… leave it, branch is main. Your branch is main, root directory.

03:41:01.000 --> 03:41:08.000
The option, yeah. Over here, just try to type, uh, API.

03:41:08.000 --> 03:41:13.000
No, no, no. Just don't give a slash, don't give a slash. Just type API.

03:41:13.000 --> 03:41:16.000
What is your directory name? The directory name that you have given, right?

03:41:16.000 --> 03:41:19.000
Yeah. Api testing.

03:41:19.000 --> 03:41:22.000
Api underscore testing, and API underscore testing, yes, that one.

03:41:22.000 --> 03:41:27.000
Yeah.

03:41:27.000 --> 03:41:33.000
So that should be your root directory, because it will go there, and then it will try to, like, search. Yes, this one.

03:41:33.000 --> 03:41:34.000
No? Yeah, so API testing. This is, this is correct. Leave it.

03:41:34.000 --> 03:41:38.000
Okay. Okay, okay.

03:41:38.000 --> 03:41:48.000
Till this point. And then you go and correct your PI file as well. Your PI file is not correct.

03:41:48.000 --> 03:41:54.000
Just do one thing, give me a control, I'll do it from my end, within, like, 2-3 seconds.

03:41:54.000 --> 03:42:01.000
Yeah, give me a control.

03:42:01.000 --> 03:42:11.000
Yeah, fine. Leave your system. Now, so you have this, this, this, this, okay, fine, so you have a GitHub.

03:42:11.000 --> 03:42:16.000
Just remove a chat window and everything from your system. It's, like, disturbing me.

03:42:16.000 --> 03:42:17.000
Zoom with chat? Yeah. Or maybe minimize it?

03:42:17.000 --> 03:42:23.000
Yeah.

03:42:23.000 --> 03:42:32.000
And then the bar as well, the top bar. Remove that.

03:42:32.000 --> 03:42:42.000
Let me change… everything. No, still there is a bar, remove that bar. I can't control that bar, by the way.

03:42:42.000 --> 03:42:43.000
Once again, give me, uh…

03:42:43.000 --> 03:42:49.000
Yeah, the top bar is just remove it. The bar, zoom bar, that is visible, right? So just remove that.

03:42:49.000 --> 03:42:52.000
But I'm not able to see.

03:42:52.000 --> 03:43:04.000
Well, I can see it, but I can't control that bar. Apart from that bar, I can control the entire screen, by the way.

03:43:04.000 --> 03:43:05.000
Let me minimize. Okay, got it, huh?

03:43:05.000 --> 03:43:10.000
Okay, just a minute, then.

03:43:10.000 --> 03:43:16.000
Yeah, the bar that you can see, right? Okay, so dot… PI file, commit changes.

03:43:16.000 --> 03:43:26.000
Okay, commit changes. Fine, so PI file has now become testing.py file, R-EQUIREMTS, so FastAPI and Unicorn is fine.

03:43:26.000 --> 03:43:38.000
And then inside that, fine, okay. Good. Uh, go to render, then we have main, we have this, we have this, API testing, requirement.txt, fine.

03:43:38.000 --> 03:43:39.000
We have UVicron. No, in our GitHub, I have all it directly, I have changed it, so no need to push.

03:43:39.000 --> 03:43:42.000
We have to push, that changes we have to push.

03:43:42.000 --> 03:43:44.000
Okay, okay, direct file, okay.

03:43:44.000 --> 03:43:57.000
Yeah, so T-S-T-I-N-G, this is your file name. So, D-E-S, D-I-N-G, file name, colon app, and then I have to basically give a…

03:43:57.000 --> 03:44:05.000
Hi, fun, hi youhan, host, and make it neutral. So, hyphen, hyphen…

03:44:05.000 --> 03:44:17.000
Host, and 0.0.0.040. Port number, let me give it to 10,000 or 8000.

03:44:17.000 --> 03:44:24.000
So, UVIs, URN, T-S-T-I-N-G, colon app, hyphen hyphen host, port number, fine.

03:44:24.000 --> 03:44:30.000
No… Select Free.

03:44:30.000 --> 03:44:40.000
Deploy.

03:44:40.000 --> 03:44:47.000
Failed variety, this, this, doesn't exist, please check. Ow. So you already doesn't exist.

03:44:47.000 --> 03:44:52.000
Is it API testing? So, under this… APA…

03:44:52.000 --> 03:44:56.000
Which is your main… there is a… API testing.

03:44:56.000 --> 03:45:00.000
Api, I think.

03:45:00.000 --> 03:45:28.000
And it is not even able to recognize that one.

03:45:28.000 --> 03:45:54.000
T-s-d-i-n-g.

03:45:54.000 --> 03:46:14.000
A, EST. Gso genius.

03:46:14.000 --> 03:46:15.000
Okay, cool.

03:46:15.000 --> 03:46:18.000
Mmm, now it is able to clone. It was not able to reach out to that directory, could not find the version that satisfied the…

03:46:18.000 --> 03:46:30.000
Requirement to fast… you have written ABIE. In your requirement.txt file, sir, you have written ABI, not ABI.

03:46:30.000 --> 03:46:31.000
Go, hi.

03:46:31.000 --> 03:46:35.000
See, it's AABI, so failed again. Okay, let me change it here itself. So, FAST, it's an API.

03:46:35.000 --> 03:46:38.000
Yeah. Api, yeah.

03:46:38.000 --> 03:46:52.000
Submit changes, commit changes. And then, let me push it from the latest commit. So, manual deploy, deploy latest commit.

03:46:52.000 --> 03:47:22.000
What happened? Deployal latest commit. Deploy will start after the current deployment completes, okay?

03:48:11.000 --> 03:48:41.000
Why don't we have an eye device.

03:49:09.000 --> 03:49:15.000
Yeah, I agree.

03:49:15.000 --> 03:49:45.000
Nothing.

03:49:48.000 --> 03:49:49.000
Mmm, now it'll work.

03:49:49.000 --> 03:49:55.000
Okay, so it was taking… it was the wrong name, and then the.

03:49:55.000 --> 03:49:56.000
Requirement.alpa wrong, and…

03:49:56.000 --> 03:50:09.000
Yeah, so, first of all. So, in the very first phase, your directory name itself was wrong. You have written, like, a directory inside directory, so we have to go inside that. Second one was your name was, uh, like, wrong, third one was, like, uh, your, uh, requirement.txt.

03:50:09.000 --> 03:50:10.000
So now, build is accessible. So now it will work. Yeah, in progress, it will be live in some time, deploying.

03:50:10.000 --> 03:50:18.000
Yeah, okay.

03:50:18.000 --> 03:50:21.000
So the link will be, uh, coming here itself, uh, to see in the… Okay, okay, okay.

03:50:21.000 --> 03:50:26.000
Link… link… this is the link, this is the link. So here, if you will go after deployment.

03:50:26.000 --> 03:50:32.000
It will be live, so as of now, 5.02 means, still, process is going on.

03:50:32.000 --> 03:50:33.000
Just wait for… yeah, now it's live. So now if I'm going to hit this link.

03:50:33.000 --> 03:50:36.000
If I think, okay.

03:50:36.000 --> 03:50:39.000
I will not see the same, I'll see detail not found, which is cool.

03:50:39.000 --> 03:50:42.000
And I can do DOC… DOCS, so now I can render the Swagger UI.

03:50:42.000 --> 03:50:46.000
Yeah, beautiful, dear.

03:50:46.000 --> 03:50:48.000
With my own API, right? This one. Yeah, yeah, thank you.

03:50:48.000 --> 03:50:51.000
Yeah, got it, got it, yeah. Thank you, sir. Yeah.

03:50:51.000 --> 03:50:53.000
Okay, so… So one is monies, yes, monies. What is your issue?

03:50:53.000 --> 03:51:00.000
Can I say my…

03:51:00.000 --> 03:51:01.000
Show me your screen, show me your screen, give me access, I'll fix it.

03:51:01.000 --> 03:51:07.000
Said, or in deployment, just to say.

03:51:07.000 --> 03:51:09.000
Is it sharing some…

03:51:09.000 --> 03:51:23.000
Yeah, so, yet to appear. What is issue, executive status, running this, this, this, this, this, okay, fine, so… testing app, port this one, okay? Uh, common way to troubleshoot, exit with the status code 117. Build was successful, deploy was successful. Okay.

03:51:23.000 --> 03:51:29.000
Give me control, and let me check.

03:51:29.000 --> 03:51:38.000
So, basically, this is your repo, you have requirement.txt. Fast API, UVCon, fine.

03:51:38.000 --> 03:51:41.000
Then, which one you are trying to deploy? This one, testing.py.

03:51:41.000 --> 03:51:42.000
The testing.ib, yeah.

03:51:42.000 --> 03:51:54.000
Okay, fine. Testing.py file, you are trying to deploy. Hmm. Okay. So, this is fine. Then…

03:51:54.000 --> 03:51:58.000
Sir, I guess in Visual Studio, I got an error. I guess you can see in VScore.

03:51:58.000 --> 03:52:00.000
In VS Code, also, you got the error. Then… then… then we'll fix it there itself, we'll get to know what is the error.

03:52:00.000 --> 03:52:07.000
Uh, I guess I will…

03:52:07.000 --> 03:52:16.000
So, what is the error? You have received CLEAR… Hmm…

03:52:16.000 --> 03:52:20.000
So… testing, hmm…

03:52:20.000 --> 03:52:29.000
Notting very fun app.

03:52:29.000 --> 03:52:36.000
Mmm, it's learning.

03:52:36.000 --> 03:52:56.000
Let me open up any of your browser.

03:52:56.000 --> 03:52:58.000
It's up and running. Looks good.

03:52:58.000 --> 03:53:02.000
But in render, I guess it's not getting deployed.

03:53:02.000 --> 03:53:25.000
Mmm, we'll see, we'll fix it.

03:53:25.000 --> 03:53:30.000
Line, Python 3, main.

03:53:30.000 --> 03:53:41.000
R-e-m-n-t-s dot TXT, pip install, okay? So, RDQ, I…

03:53:41.000 --> 03:54:11.000
Genius, okay. Then… okay?

03:54:55.000 --> 03:54:58.000
Mmm, it's working, it's life. See?

03:54:58.000 --> 03:55:08.000
Okay, okay, okay.

03:55:08.000 --> 03:55:11.000
Yeah, it's slave. Thanks! It was… it was just… it was just waiting for me to, you know, do something in your system.

03:55:11.000 --> 03:55:17.000
Okay, sir, thank you, sir.

03:55:17.000 --> 03:55:18.000
There was… there was no error. Yeah, go. Yeah.

03:55:18.000 --> 03:55:24.000
So, like, yeah, I have one other question. I have another question. Sir, right now, I'm in fourth year, I'm doing electronics and communication engineering.

03:55:24.000 --> 03:55:29.000
Okay. Okay.

03:55:29.000 --> 03:55:36.000
Sir, I'm really, like, all these are new things for me, and I'm, like, I'm catching.

03:55:36.000 --> 03:55:37.000
I'm catching fewer things. But, uh, is there any prerequisites? I know Python, and I know C++.

03:55:37.000 --> 03:55:42.000
Mm-hmm.

03:55:42.000 --> 03:55:43.000
Hmm, hmm.

03:55:43.000 --> 03:55:49.000
Is it enough, or should I learn, like, about mathematics, they say, for, uh.

03:55:49.000 --> 03:55:56.000
Just join my class, don't worry. Just join my class, you have a time, you are in fourth year, right? And uh… just learn with me.

03:55:56.000 --> 03:55:57.000
I think that will be more than enough.

03:55:57.000 --> 03:56:02.000
Why? Because, uh, even I don't have much experience, and I see in group many people.

03:56:02.000 --> 03:56:06.000
Keep texting, and I guess it… all those becomes new things for me, so…

03:56:06.000 --> 03:56:12.000
That's… that's fine. It should not know everything at a time, right? We are human, we're not a chat GPT, so it's fine.

03:56:12.000 --> 03:56:13.000
Okay, okay, sir. Sir, and another doubt, uh, like, uh, you, you are running your… that curl, uh.

03:56:13.000 --> 03:56:18.000
Yeah. Hmm.

03:56:18.000 --> 03:56:20.000
Code command in your Ubuntu, right? So, that I can run in my PowerShell and, uh, encode prompt also, right?

03:56:20.000 --> 03:56:26.000
Hmm, hmm.

03:56:26.000 --> 03:56:30.000
Yes, you can run it, yeah. So, I have shown, like, some other people were running it, right, while doing… Curl will be by default available. By default, it will be available. If not, just update it.

03:56:30.000 --> 03:56:37.000
Yeah, yeah, for that, I should install that core package, or…

03:56:37.000 --> 03:56:39.000
Okay, so, fine. Thank you, sir, thanks so much.

03:56:39.000 --> 03:56:50.000
Yeah, yeah, thank you. Okay, so… change your role. Now, Amit Prashant, Rakeshis, what is your question? Please go ahead, one by one. Prasamit, then Prashan, then Vakesh.

03:56:50.000 --> 03:57:00.000
I think we have only 3 hands raised now. Yeah. Rakesh, Amit, Prashant, do you have any question?

03:57:00.000 --> 03:57:01.000
Yeah, Bushant, tell me.

03:57:01.000 --> 03:57:05.000
Uh, hello, sir, this is Prash. So, I just want to ask that, uh, in the study classes, that the post-API you're telling.

03:57:05.000 --> 03:57:07.000
Okay.

03:57:07.000 --> 03:57:13.000
So, when we are, uh, uh, mention this particular thing deployed to the NGR.

03:57:13.000 --> 03:57:14.000
So, in that, uh, ng block. No, not a problem.

03:57:14.000 --> 03:57:19.000
Mm-hmm. No, that was not a deployment, that is not called as deployment, that is called as forwarding, forwarding, basically.

03:57:19.000 --> 03:57:20.000
Yeah. No, basically, like, uh, we are trying to do a port forwarding.

03:57:20.000 --> 03:57:27.000
You know, already in public for wedding, like.

03:57:27.000 --> 03:57:28.000
So, port, port, P-O-R-T port, port forward. That technical name is port forwarding, basically.

03:57:28.000 --> 03:57:33.000
What is that, like…

03:57:33.000 --> 03:57:40.000
Okay, so, uh, so in the postman, when I checked this using Posted AI, actually, I made one post-it AI.

03:57:40.000 --> 03:57:43.000
Or when I kept in a postman, I'm getting responses using IGrop's API, or URL, whichever.

03:57:43.000 --> 03:57:49.000
Hmm. Url, okay.

03:57:49.000 --> 03:57:50.000
Hmm.

03:57:50.000 --> 03:57:57.000
But when I put this particular URL into that, they are giving me empty response. So, I just want to ask for getting a response, should I use slash docs? Then, in the… particular…

03:57:57.000 --> 03:58:17.000
No, no, dogs. Dogs is one of the way. Dogs basically give you a Swagger UI, so where inside a UI itself, you will be able to test it. So, basically, it's a… coming attached with the Fast API, right? If you have to test it in a postman, you can just go ahead with the simple URL and then the methods. If you have to test it in a curl, so all these things are different, different, like, a way.

03:58:17.000 --> 03:58:21.000
By which you can… you are hitting the same APIs.

03:58:21.000 --> 03:58:24.000
So my question is, when I make a URL using NGDraw, so when I go paste into the website.

03:58:24.000 --> 03:58:27.000
Hmm. Hmm.

03:58:27.000 --> 03:58:28.000
It's not giving me any response, so…

03:58:28.000 --> 03:58:33.000
No, it will give you responses, just do ngrock URL slash docs. It will give you a response.

03:58:33.000 --> 03:58:36.000
Hands, let her, then it will be given.

03:58:36.000 --> 03:58:44.000
Obviously, how do our… how do we give you a response without, like, writing a downs? Even in your local, you are writing what? Local host port number slash docs, right?

03:58:44.000 --> 03:58:48.000
Okay, okay, so that's why… because slash draft is necessary, right? When you're creating.

03:58:48.000 --> 03:58:56.000
Oh, slash documents Swagger UI. So, that is a route for Swagger UI, basically. Swagger UI is basically… If it's just, like, an inbuilt inside FastAPI.

03:58:56.000 --> 03:59:07.000
Because what I taught in GET when we are doing, we are not, uh, we are… they're actually giving response, but in post, because we have to pass a parameter.

03:59:07.000 --> 03:59:08.000
Yes, if you are trying to do it with the Swagger UI, only in that case.

03:59:08.000 --> 03:59:14.000
So, what passing a parameters, that dog required, right?

03:59:14.000 --> 03:59:30.000
If you are doing it with, like, a postman, then slash docs is not required. Basically, your route is required, at which your method is, like, available.

03:59:30.000 --> 03:59:31.000
Huh, that's what I'm doing. I'm doing multiple examination.

03:59:31.000 --> 03:59:38.000
Okay, solve the assignment which I've given to you yesterday. Yeah, just, just, just, yeah, just, just solve it. Solve it, and then, like, I think things will be clear. I know, like, you are getting stuck.

03:59:38.000 --> 03:59:39.000
Philosophically, that, okay, how this is happening? That's fine, that's fine. It's all the assignment.

03:59:39.000 --> 03:59:50.000
Um, haha, right, right, right, right, right. Because a postman I'm getting, I saw the assignment. The postman, I didn't get their response.

03:59:50.000 --> 03:59:51.000
But, uh, scratch docs are readiness.

03:59:51.000 --> 03:59:58.000
Yeah, so based on philosophy is you have a method available at URL slash docs is nothing but, just like a postman.

03:59:58.000 --> 03:59:59.000
So, Postman is one of the tools. By which I'm able to test. So, at slash docs, you are getting another tool.

03:59:59.000 --> 04:00:06.000
Okay. Okay? Hmm…

04:00:06.000 --> 04:00:08.000
Just imagine in this way. Just another tool which is helping you out in terms of testing an API.

04:00:08.000 --> 04:00:12.000
Okay, thank you.

04:00:12.000 --> 04:00:16.000
Just a tool. Yep.

04:00:16.000 --> 04:00:19.000
Can I share my screen? Yeah.

04:00:19.000 --> 04:00:35.000
Uh, yeah, Rakesh, you would like to share the screen? Yeah, please go ahead. Okay, so Prasan Gutai, please explain the option for working in organization without depending solely on… See, you have to use the Prashad API, maybe you can use from Auri, maybe you can use from OpenAI, maybe you use…

04:00:35.000 --> 04:00:46.000
He's from a Gemini, because even if you're working inside the organization, unless and until your organization is not hosting those models, or you are not hosting those models on a GPUs.

04:00:46.000 --> 04:00:49.000
You will not be able to do inferencing, you will not be able to build the IndustryGate application.

04:00:49.000 --> 04:00:56.000
So, either go ahead with the URI API, or go ahead with, like, some other platform by paying, like, a PopExlity, OpenAI, Cloud.

04:00:56.000 --> 04:01:01.000
Or maybe, like, a Gemini, anywhere. But you need an API.

04:01:01.000 --> 04:01:14.000
And if you have to, like, host it, then I have published a video study itself, so host your model on a GPU, and then, like, you will be having your own model, and you don't have to, like, call Yuri or anyone's API. You will be able to call your own.

04:01:14.000 --> 04:01:20.000
Hope I'm able to answer your question, Prashad. Uh, yeah, so, um, someone sent me, Rake is right. Yeah, share is, you have a permission.

04:01:20.000 --> 04:01:27.000
Yeah. I'm not able to push my code to this VS Code.

04:01:27.000 --> 04:01:29.000
Uh, sorry, GitHub. My little screen is shared.

04:01:29.000 --> 04:01:36.000
Okay, share the screen, share the screen, I'll do it. No, I'm not able to see your screen, by the way.

04:01:36.000 --> 04:01:43.000
Which screen you are sharing?

04:01:43.000 --> 04:01:49.000
Now it's appearing. Okay. Got it. So what is the issue?

04:01:49.000 --> 04:01:52.000
I'm not able to push that code to GitHub.

04:01:52.000 --> 04:01:58.000
Hmm. Share your whole history, and I think you have shared just a single screen with me.

04:01:58.000 --> 04:02:12.000
So, share your whole screen, basically. Just do unshare, and then share a whole screen.

04:02:12.000 --> 04:02:19.000
Care-complete system, yeah.

04:02:19.000 --> 04:02:21.000
How do we share.

04:02:21.000 --> 04:02:30.000
Basically, once you are going to click on share, right, so you will be able to see, like, a entire screen option, the very first option.

04:02:30.000 --> 04:02:33.000
No, Susan.

04:02:33.000 --> 04:02:40.000
Let me see… yeah, now I can see your URL. And, uh, I think…

04:02:40.000 --> 04:02:54.000
Okay, just give me a control now. No, I don't have a control, because you are not sharing the whole screen.

04:02:54.000 --> 04:02:59.000
So… have you joined through a browser or through a Zoom app?

04:02:59.000 --> 04:03:01.000
I have done through a browser.

04:03:01.000 --> 04:03:14.000
Then again, I won't be able to control. So basically, to control, I need a Zoom app. Fine, share your screen, I'll help you out from here itself. So, from next time, maybe you can join through a Zoom app, that will be better. So that I can control your screen.

04:03:14.000 --> 04:03:16.000
Yeah, share it now? Okay. So, what is the issue? You are not able to push your code to GitHub, right?

04:03:16.000 --> 04:03:20.000
Yeah. Yeah.

04:03:20.000 --> 04:03:29.000
Okay, not an issue. So, just, uh, uh… open up a new terminal.

04:03:29.000 --> 04:03:31.000
Hmm. Do Git, GIT Git. Just git.

04:03:31.000 --> 04:03:37.000
Yeah.

04:03:37.000 --> 04:03:38.000
Just get not here. Okay, so Git is… Git is installed. Now, show me your repository.

04:03:38.000 --> 04:03:42.000
So yeah, some keyboards.

04:03:42.000 --> 04:03:49.000
Go to your GitHub.

04:03:49.000 --> 04:03:55.000
Uh, I was trying to push this to this, uh. Fast report.

04:03:55.000 --> 04:03:59.000
No, no, fine, go to GitHub, go to github.com.

04:03:59.000 --> 04:04:02.000
Uh, this representative.

04:04:02.000 --> 04:04:07.000
The other repository, github.com, like, the browser, where you have a GitHub repository, right?

04:04:07.000 --> 04:04:08.000
Yeah, I mean, uh, repo only.

04:04:08.000 --> 04:04:15.000
Go there? No, I can't see your screen, sir. Basically, you are sharing only one screen, I believe. I can see your, like, VS Code screen.

04:04:15.000 --> 04:04:21.000
You have still, uh, because you can share your entire screen, that is an option which is available, but you have not shared the entire screen.

04:04:21.000 --> 04:04:27.000
Okay, please give me some time, I will sit entirely. Meanwhile, you can take further discussion.

04:04:27.000 --> 04:04:36.000
I just have only one person, I believe. I have cleared all the questions. Yeah, so Amit, what is your question?

04:04:36.000 --> 04:04:41.000
Now, anyone else, guys, who is having questions for me? Otherwise, we'll go for closer.

04:04:41.000 --> 04:04:42.000
Yeah, I mean, go ahead, go ahead, please, go ahead. Yamit, please go ahead.

04:04:42.000 --> 04:04:44.000
Hello? Hello? Uh, so I'll just stop, uh…

04:04:44.000 --> 04:04:52.000
Hmm.

04:04:52.000 --> 04:04:53.000
Tay good?

04:04:53.000 --> 04:04:58.000
Uh, sir, only that few things, uh… I am also working in this area, sir. So, it will be a great help, sir, if you can provide a transcript or subtitle for download purpose.

04:04:58.000 --> 04:05:09.000
So that later we can use AI to, like, Notook, LLM, and other things, uh, to make our nodes. So, uh, in revision time, rather than going for the long video.

04:05:09.000 --> 04:05:13.000
We can take the help of transcript sometimes, it will be a great help.

04:05:13.000 --> 04:05:26.000
Transcripts I can provide, but for a long term, right, because we have a lot of classes, so it will be very difficult for us to, you know, maintain it. Anyhow, we are generating a transcript for this lecture. For entire lecture, we are generating a transcript, actually.

04:05:26.000 --> 04:05:34.000
Uh, by default, Zoom is doing it, but yeah, maintaining those transcripts will be very, very difficult. Very difficult.

04:05:34.000 --> 04:05:35.000
Right. So, um…

04:05:35.000 --> 04:05:43.000
And, sir, secondly, sir, since, uh. We are… we are working professionals, so sometimes we might miss the class.

04:05:43.000 --> 04:05:44.000
Hmm, hmm.

04:05:44.000 --> 04:05:52.000
So, there might be the case, let's say, while teaching, you are referring some reference that document URL.

04:05:52.000 --> 04:05:53.000
Hmm. Hmm.

04:05:53.000 --> 04:05:58.000
And you are pasting in the chat. So somehow, it will be missed if we are going to see the recording.

04:05:58.000 --> 04:06:01.000
So, best, basically, if you can basically make one document file.

04:06:01.000 --> 04:06:02.000
Uh, in that, uh, uh, as and when, basically, you…

04:06:02.000 --> 04:06:21.000
Hmm. And that is, sir, practically, sir, sir, sir, sir, sir, practically, see, practically, whatever I'm teaching, everything is getting recorded. Now, when you will see the recording, you will be able to see the exact same thing, and I just go ahead, whenever I'm sharing a URL, I just go ahead with a Google search approach. I do a Google search, I show you that, okay, fine, search this one, and then from there, go to the URL.

04:06:21.000 --> 04:06:22.000
Book is open.

04:06:22.000 --> 04:06:31.000
Now, if you are asking me to maintain all of those URLs, right, all of those URLs maintain a transcript, I don't think that it's called as real learning.

04:06:31.000 --> 04:06:32.000
I mean, like…

04:06:32.000 --> 04:06:37.000
No, no, no, sir, I'm not saying this. I'm saying… I'm saying, sir, through… on chat sometime, basically, Kajali, basically.

04:06:37.000 --> 04:06:39.000
No, no, so whatever I'm showing in chat, I'm doing it on a screen as well, right?

04:06:39.000 --> 04:06:43.000
Did… go through this URL?

04:06:43.000 --> 04:06:44.000
Okay, okay, no issue, no issue.

04:06:44.000 --> 04:06:51.000
No, so whatever I'm sharing in a chat… yeah, yeah, whatever I'm sharing in chat, I'm trying to show it on a screen as well, right? At the same point of a time.

04:06:51.000 --> 04:06:52.000
And…

04:06:52.000 --> 04:07:07.000
Yeah? Everything is getting recorded in a lecture itself. So, very difficult for me to, you know, uh, like, let's suppose I have opened up 50 different, different URLs. Now it will be very difficult for me to, you know, maintain those and upload it as a content. I mean, like, that's the reason I'm uploading a recording.

04:07:07.000 --> 04:07:11.000
By the way, and again, I know, like, if I'm going to do that, next time I'll get another, uh, like.

04:07:11.000 --> 04:07:14.000
Okay, so, okay, okay, okay, no issue. No issue.

04:07:14.000 --> 04:07:23.000
Yes, yeah, so let's keep it simple. Yeah, let's keep it simple and plain. I think that, in that way, we'll be able to go very, very long.

04:07:23.000 --> 04:07:24.000
Right? Okay.

04:07:24.000 --> 04:07:28.000
And, sir, uh, uh… My background also a teaching, sir, so…

04:07:28.000 --> 04:07:37.000
One… I know, basically, you are teaching really good. Isa, basically, that giving cessation to you, something like that. Basically, I am showing across the sun.

04:07:37.000 --> 04:07:38.000
Mm-hmm. Mm-hmm.

04:07:38.000 --> 04:07:42.000
Of this, uh, med… With just one suggestion, it's a humble suggestion.

04:07:42.000 --> 04:07:43.000
Mm-hmm.

04:07:43.000 --> 04:07:55.000
Creating a code, basically, really doing a good job, basically, you are asking us to type with me… But at the same time, sir, it will be a great… it will help in our learning journey much more better way.

04:07:55.000 --> 04:08:01.000
So, like, MindMeb, basically, you know, through a pen marker se bata ejay ki, ye karm me jaram logo.

04:08:01.000 --> 04:08:06.000
And then, basically, we will quote. The Toras are learning an announcement to Jayagasar. Give me a suggestion as a security.

04:08:06.000 --> 04:08:22.000
I mean, there was a doubt that… group mein hum announcement kerarte hailid thee, ki chi kaya topic discussed whenever. Think hai?

04:08:22.000 --> 04:08:26.000
First stage, ki aapka yoga, minde mein, ah ye discuss honee wala hai.

04:08:26.000 --> 04:08:38.000
Second, jazahi class start hot hai, koi bhi live class object low. Usme humidah ki pahika discuss hua tha, aur aajam lo kya kapne.

04:08:38.000 --> 04:08:56.000
Apiskare me samjahata. Aur ye topic kali ba taiga jajka part niwale. Kiajput palingaj get padlehenge.

04:08:56.000 --> 04:09:02.000
No, no, sir, mate… Asanta is different. Let's say…

04:09:02.000 --> 04:09:07.000
I'm saying, basically, let's say you have a functional implement. Pseudo-algorithm type ka.

04:09:07.000 --> 04:09:09.000
And the son of the Gibbs, JoJo… style batar pseudo-basic level na.

04:09:09.000 --> 04:09:15.000
Ustra fellow, basically.

04:09:15.000 --> 04:09:33.000
Hai. Right? Pseudo-basic kojota aapki college pada yatha, aapko har classes pada yatha, aapke har master jo aki palate wo aapko. U, basically, sudok, basically, koti praate board palikta hai. Una a kabi ko type ni kiya.

04:09:33.000 --> 04:09:42.000
And that is a reality. Right? That is a reality.

04:09:42.000 --> 04:09:48.000
Khujbini, right? Exactly. Book!

04:09:48.000 --> 04:09:49.000
Subjective call us at Tayil.

04:09:49.000 --> 04:09:56.000
No, no, no, argument about DNA, I'm just talking to talk about… I'm just doing a fair discussion over here. He war approach is the he-sahi here.

04:09:56.000 --> 04:09:58.000
Pseudo-basic code pahake heart silikke ketcha for loo, fork under ase.

04:09:58.000 --> 04:10:08.000
So, actually, Mr. According to attempt failan ki, without making a mind map.

04:10:08.000 --> 04:10:10.000
Was it a coding with Jam Karjatrien.

04:10:10.000 --> 04:10:21.000
Galat, Galat, Galat. Again, Galat. Chigay. Again, coding bar was hi approach hi nahi takabihi jo ham low college parahya joab boulder. Problem solved karo, aapko bug aegi, aap bug fix kar, bug fix kar ok, then aap learn kar hoge.

04:10:21.000 --> 04:10:29.000
So these are ticket people.

04:10:29.000 --> 04:10:35.000
Shelly, tea. Thank you, thank you, sir. Thank you.

04:10:35.000 --> 04:10:40.000
Yeah. Okay, so, uh, please share your screen, uh, Rakesh.

04:10:40.000 --> 04:10:42.000
Yeah, absolutely.

04:10:42.000 --> 04:10:51.000
I mean, like… No walks. Do a practical always works.

04:10:51.000 --> 04:10:54.000
I hope it's fine with every one of us, right guys? Everyone?

04:10:54.000 --> 04:10:55.000
Yeah. I'm not able to push the code to GitHub.

04:10:55.000 --> 04:11:01.000
Huh. Um, go ahead. So, what is the issue, Rakis? Okay, not an issue. So, just try to open up your GitHub repository.

04:11:01.000 --> 04:11:06.000
I was getting to see you. Yeah.

04:11:06.000 --> 04:11:09.000
Yeah, so I can see it now. Now, come down, come down.

04:11:09.000 --> 04:11:10.000
In the same repository, same blank repository that you've created, right? Go there.

04:11:10.000 --> 04:11:14.000
Let's see.

04:11:14.000 --> 04:11:19.000
Hmm. Go to the repository, come down. Now, so we have… we are able to see a couple of command, right? Okay. So, first of all, git init, git add, git commit. Now go back.

04:11:19.000 --> 04:11:24.000
Yeah.

04:11:24.000 --> 04:11:31.000
Go back to your, like, VS Code domino. Hmm.

04:11:31.000 --> 04:11:40.000
So, first of all, git init. Okay, now I can see your whole screen, I can control your screen as well.

04:11:40.000 --> 04:11:42.000
Can I give you control?

04:11:42.000 --> 04:11:49.000
No, no, it's fine, do it. So get init is fine, re initialize the repository, okay. Then, just I'm telling you the command, type it.

04:11:49.000 --> 04:11:50.000
Git add. No, the second one is git add.

04:11:50.000 --> 04:12:04.000
Uh, sorry, I am having some issues.

04:12:04.000 --> 04:12:06.000
Looks like…

04:12:06.000 --> 04:12:12.000
Just type it, type it, type it. Git space add space dot.

04:12:12.000 --> 04:12:18.000
Yeah, dot. Remove the readme.

04:12:18.000 --> 04:12:32.000
Fine. Then git commit hyphen m.

04:12:32.000 --> 04:13:02.000
Hmm, fine, it's done. Next one? So, at the branch.

04:13:14.000 --> 04:13:23.000
It's done. Go and refresh your repository. It's available now.

04:13:23.000 --> 04:13:26.000
Oh, thanks. I think I was missing something.

04:13:26.000 --> 04:13:38.000
Uh, yeah, just as simple a step, right? And then you have an entire code inside API testing, so you have to… give a route directory is equal to API testing, otherwise it will not work on render.

04:13:38.000 --> 04:13:40.000
Uh, how to…

04:13:40.000 --> 04:13:45.000
Just do one thing. Click on New, click on New. Just create the fresh one, yeah.

04:13:45.000 --> 04:13:51.000
New web service? Select the new repository, okay.

04:13:51.000 --> 04:14:03.000
Go back to your repository, show me your repository once. Show me your repository. Click on API testing.

04:14:03.000 --> 04:14:09.000
Click, click, click, click.

04:14:09.000 --> 04:14:13.000
I think it's empty.

04:14:13.000 --> 04:14:15.000
Is it? We'll go back to your VS Code.

04:14:15.000 --> 04:14:21.000
Yeah, it's not over.

04:14:21.000 --> 04:14:27.000
Api underscore testing, and you are in which directory? You are in 2025.0810.

04:14:27.000 --> 04:14:29.000
Sorry.

04:14:29.000 --> 04:14:35.000
Hmm. No, no, that's fine. So you have pushed the entire repository itself, right? That's fine, like, there is no issue with that.

04:14:35.000 --> 04:14:45.000
Go back. Go back, and uh… You have basically created this with numbers. That's the issue.

04:14:45.000 --> 04:14:51.000
That's the reason it's empty. Hmm… hmm…

04:14:51.000 --> 04:15:15.000
Create a new repository.

04:15:15.000 --> 04:15:17.000
Yeah, it's created.

04:15:17.000 --> 04:15:25.000
Hmm, now do the same thing. Init, add commit, then add the branch, push it.

04:15:25.000 --> 04:15:32.000
Hmm, in it? Fine. Uh, git add. Git add, not really mean. Git add, just simple dot.

04:15:32.000 --> 04:15:37.000
Yes, sir.

04:15:37.000 --> 04:16:07.000
Hmm. Git commit hyphen M message.

04:16:17.000 --> 04:16:22.000
Remote origin already exists, so you have to write a… no, no, it will not work. Push will fail over here.

04:16:22.000 --> 04:16:28.000
So, git remove remote origin. You have to write a command, so just go there and type a command, because it… you have already added the previous, uh…

04:16:28.000 --> 04:16:33.000
Remove?

04:16:33.000 --> 04:16:40.000
Get remove remote origin, R-E-M-O-T. Origin, or RGIN?

04:16:40.000 --> 04:16:47.000
Yeah, so you have already added the previous one, it will not take the new one. Hit enter.

04:16:47.000 --> 04:16:58.000
Good to…

04:16:58.000 --> 04:17:06.000
Get remote remove origin, git remote. Get remote.

04:17:06.000 --> 04:17:12.000
A new origin, yeah, that's a command.

04:17:12.000 --> 04:17:25.000
Remove origin. Hmm. Hmm. Now, just try to add the origin.

04:17:25.000 --> 04:17:31.000
Git remote add origin URL. No, not this one, not this one, URL. First add URL.

04:17:31.000 --> 04:17:44.000
Hmm.

04:17:44.000 --> 04:17:51.000
Now, last command, it will push.

04:17:51.000 --> 04:17:57.000
No, I think you have executed once again, right? Remove origin.

04:17:57.000 --> 04:18:00.000
No, no, no, first of all, try to execute this… Yeah, so you have removed the origin again. So just add it once again.

04:18:00.000 --> 04:18:05.000
Oh, sorry.

04:18:05.000 --> 04:18:07.000
Git adder.

04:18:07.000 --> 04:18:13.000
Git remote add origin, the URL. Hmm, hit enter?

04:18:13.000 --> 04:18:21.000
Then the last command, push. No, no, go back to your… go back to your repository, there is a command, so git push origin main.

04:18:21.000 --> 04:18:43.000
This one, grid push origin main, yeah.

04:18:43.000 --> 04:18:44.000
Yeah.

04:18:44.000 --> 04:18:50.000
Not valuable? Okay, go to render.

04:18:50.000 --> 04:18:56.000
New service, click on new, click on new, yeah. Ain.

04:18:56.000 --> 04:19:00.000
This is your latest repository name?

04:19:00.000 --> 04:19:03.000
I need to cancel first, I think.

04:19:03.000 --> 04:19:07.000
No, no, it's like, just so be in the repository name. What is the repository name that you have created?

04:19:07.000 --> 04:19:11.000
So, repository name is fast underscore AP underscore testing 002, okay.

04:19:11.000 --> 04:19:17.000
Go back? Hmm. Uh, search for source code.

04:19:17.000 --> 04:19:24.000
Click on edit, click on Edit.

04:19:24.000 --> 04:19:26.000
It's not coming.

04:19:26.000 --> 04:19:34.000
Fine, click on new. Start fresh. It will be able to refresh.

04:19:34.000 --> 04:19:42.000
Cancel it, cancel it, yeah, or refresh it. Hmm, now it's coming. So…

04:19:42.000 --> 04:19:49.000
Hmm. Come down, main fine, down, down, down, requirement.txt, then here, write it down, UUCon.

04:19:49.000 --> 04:19:55.000
Yeah, testing the SDING app was fine, port, fine, okay, free.

04:19:55.000 --> 04:19:56.000
Hmm, that is, now it's available in main root directory, right, so it's fine.

04:19:56.000 --> 04:19:59.000
This directory is fine.

04:19:59.000 --> 04:20:05.000
And then click on Free. Hmm. Neploy.

04:20:05.000 --> 04:20:14.000
It'll work.

04:20:14.000 --> 04:20:21.000
So, fine, guys, we don't have any kind of issue. The last one was a case, so with that, thank you so much, everyone.

04:20:21.000 --> 04:20:25.000
If anyone is having any questions still, so you can raise your hand.

04:20:25.000 --> 04:20:43.000
Uh, otherwise, we'll close the lecture for today.

04:20:43.000 --> 04:20:44.000
It will come, it will come. Still in the building page.

04:20:44.000 --> 04:20:49.000
Why these laws have not come?

04:20:49.000 --> 04:21:11.000
Oh, yeah.

04:21:11.000 --> 04:21:19.000
Hmm…

04:21:19.000 --> 04:21:26.000
It's not live yet, maybe it will take 30 seconds, 30 more seconds. Class docs.

04:21:26.000 --> 04:21:29.000
It will just wait for 30 more seconds.

04:21:29.000 --> 04:21:42.000
Yeah.

04:21:42.000 --> 04:21:47.000
Hmm, now it's live.

04:21:47.000 --> 04:21:50.000
So, slash docs, or maybe you can hit it through a… Postglan, or curl, or anything, anywhere that you want, yeah?

04:21:50.000 --> 04:21:58.000
Yeah.

04:21:58.000 --> 04:22:02.000
So… Your APIs are live, yeah.

04:22:02.000 --> 04:22:08.000
You can test it even through a curl, like, whatever method you want with that word.

04:22:08.000 --> 04:22:21.000
Yeah. Okay, so fine, guys, thank you so much, take care, everyone. See you again in next Saturday and Sunday. Uh, hope we are able to learn a lot this weekend, Saturday and Sunday, and I'm assuming that even next week, so we will try to do a lot of learning.

04:22:21.000 --> 04:22:27.000
A practical learning, right? Not a rote learning. Because I believe I keep on saying this part, and.

04:22:27.000 --> 04:22:40.000
Uh… you will be able to see that it's working. With that, thank you so much, everyone. Take care, see you again, and have a great remaining Sunday, so whatever time is left, go and enjoy. With that. Thank you so much. Take care.

